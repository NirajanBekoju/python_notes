{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"chapter_1_introduction/basic_syntax/","title":"Basic Syntax\\nThis page covers Python's basic syntax.","text":""},{"location":"chapter_1_introduction/introduction/","title":"Introduction to Python","text":"<p>Welcome to Python basics!</p>"},{"location":"chapter_1_introduction/introduction/#what-is-python","title":"What is Python?","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in web development, data science, automation, artificial intelligence, and more.</p>"},{"location":"chapter_1_introduction/introduction/#key-features-of-python","title":"Key Features of Python","text":"<ul> <li>Easy to Learn: Python has a clean and readable syntax.</li> <li>Versatile: Can be used for various applications, from web apps to machine learning.</li> <li>Extensive Libraries: Rich ecosystem of packages for every need.</li> <li>Cross-platform: Runs on Windows, macOS, and Linux.</li> </ul>"},{"location":"chapter_1_introduction/introduction/#basic-syntax-example","title":"Basic Syntax Example","text":"<p>```python</p>"},{"location":"chapter_1_introduction/introduction/#this-is-a-comment","title":"This is a comment","text":"<p>print(\"Hello, World!\")</p>"},{"location":"chapter_1_introduction/introduction/#variables","title":"Variables","text":"<p>name = \"Alice\" age = 25</p>"},{"location":"chapter_1_introduction/introduction/#conditional-statement","title":"Conditional statement","text":"<p>if age &gt; 18:     print(f\"{name} is an adult.\") else:     print(f\"{name} is not an adult.\")</p>"},{"location":"chapter_2_datatypes/1_variables/","title":"Data Types and Variables","text":"In\u00a0[1]: Copied! <pre># this is a comment \n'''\nthis is a\nmulti line \ncomment\n'''\n</pre> # this is a comment  ''' this is a multi line  comment ''' Out[1]: <pre>'\\nthis is a\\nmulti line \\ncomment\\n'</pre> In\u00a0[2]: Copied! <pre>\"\"\"\nThis is an example of \nmulti line comment.\n\nBelow shows the example of the CASE SENSTIVE in Python\n\"\"\"\ntemperature = 20\nTEMPerature = 30\n\nprint(temperature)\nprint(TEMPerature)\n</pre> \"\"\" This is an example of  multi line comment.  Below shows the example of the CASE SENSTIVE in Python \"\"\" temperature = 20 TEMPerature = 30  print(temperature) print(TEMPerature) <pre>20\n30\n</pre> In\u00a0[3]: Copied! <pre>print(TEMPERATURE)\n</pre> print(TEMPERATURE) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 print(TEMPERATURE)\n\nNameError: name 'TEMPERATURE' is not defined</pre> In\u00a0[5]: Copied! <pre>## input your name\nname = input('Enter your name : ')\nprint(name)\n</pre> ## input your name name = input('Enter your name : ') print(name) <pre>Nirajan\n</pre> In\u00a0[6]: Copied! <pre>PI = 3.14\n</pre> PI = 3.14 In\u00a0[7]: Copied! <pre>TEMPERATURE = 20\n</pre> TEMPERATURE = 20 In\u00a0[9]: Copied! <pre>abc = 10\n</pre> abc = 10 In\u00a0[9]: Copied! <pre>temperature = 2\nexhaust_temperature = 2\n</pre> temperature = 2 exhaust_temperature = 2 In\u00a0[\u00a0]: Copied! <pre>## special characters lik $, -, % cannot be used in the variable name.\nasdf$sdf = 10\n</pre> ## special characters lik $, -, % cannot be used in the variable name. asdf$sdf = 10 <pre>\n  Cell In[1], line 1\n    asdf$sdf = 10\n        ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[8]: Copied! <pre># python keywords cannot be used as variable name\nif = 10\n</pre> # python keywords cannot be used as variable name if = 10 <pre>\n  Cell In[8], line 2\n    if = 10\n       ^\nSyntaxError: invalid syntax\n</pre> Category Data Types Description Text Type <code>str</code> Stores text data (e.g., <code>\"Hello\"</code>) Numeric Types <code>int</code>, <code>float</code>, <code>complex</code> <code>int</code>: Integers (e.g., 5)  <code>float</code>: Decimals (e.g., 3.14)  <code>complex</code>: Complex numbers (e.g., 2 + 3j) Sequence Types <code>list</code>, <code>tuple</code>, <code>range</code> Ordered collections  <code>list</code> and <code>tuple</code> store multiple items  <code>range</code> represents a sequence of numbers Mapping Type <code>dict</code> Key-value pairs (e.g., <code>{\"name\": \"Alice\"}</code>) Set Types <code>set</code>, <code>frozenset</code> Unordered collections of unique items Boolean Type <code>bool</code> Represents truth values: <code>True</code> or <code>False</code> In\u00a0[10]: Copied! <pre>a = 2\nb = 5\nprint(a + b)\nprint(a - b)\n</pre> a = 2 b = 5 print(a + b) print(a - b) <pre>7\n-3\n</pre> In\u00a0[11]: Copied! <pre>a = 2+5j\nprint(a)\nprint(type(a))\n</pre> a = 2+5j print(a) print(type(a)) <pre>(2+5j)\n&lt;class 'complex'&gt;\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[25]: Copied! <pre>x = 5 + 2j\ny = 5 - 2j \nprint(x)\nprint(y)\nprint(x + y)\nprint(x - y)\nprint(x / y)\nprint(x * y)\nprint(x ** y)\n</pre> x = 5 + 2j y = 5 - 2j  print(x) print(y) print(x + y) print(x - y) print(x / y) print(x * y) print(x ** y)  <pre>(5+2j)\n(5-2j)\n(10+0j)\n4j\n(0.7241379310344828+0.6896551724137931j)\n(29+0j)\n(1025.9425992055105-9639.459628933018j)\n</pre> In\u00a0[12]: Copied! <pre>x_string = '10asdfa'\nx_int = int(x_string)\n\nprint(x_string)\nprint(x_int)\n</pre> x_string = '10asdfa' x_int = int(x_string)  print(x_string) print(x_int) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[12], line 2\n      1 x_string = '10asdfa'\n----&gt; 2 x_int = int(x_string)\n      4 print(x_string)\n      5 print(x_int)\n\nValueError: invalid literal for int() with base 10: '10asdfa'</pre> In\u00a0[27]: Copied! <pre>print(type(x_string))\nprint(type(x_int))\n</pre> print(type(x_string)) print(type(x_int)) <pre>&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n</pre> <p>Q. Take two numbers as an input from user and add them</p> In\u00a0[28]: Copied! <pre>a = 10\nb = str(a)\nprint(a)\nprint(b)\n\nprint(type(a), type(b))\n</pre> a = 10 b = str(a) print(a) print(b)  print(type(a), type(b)) <pre>10\n10\n&lt;class 'int'&gt; &lt;class 'str'&gt;\n</pre> In\u00a0[\u00a0]: Copied! <pre>a = 10\nprint(a)\nprint(type(a))\n\nb = float(a)\nprint(b)\nprint(type(b))\n</pre> a = 10 print(a) print(type(a))  b = float(a) print(b) print(type(b))  <pre>10\n&lt;class 'int'&gt;\n10.0\n&lt;class 'float'&gt;\n</pre> In\u00a0[3]: Copied! <pre>a = 10.123\nprint(a)\nprint(type(a))\n\nb = int(a)\nprint(b)\nprint(type(b))\n</pre> a = 10.123 print(a) print(type(a))  b = int(a) print(b) print(type(b)) <pre>10.123\n&lt;class 'float'&gt;\n10\n&lt;class 'int'&gt;\n</pre> In\u00a0[6]: Copied! <pre>a = '10'\nb = int(a)\n</pre> a = '10' b = int(a) In\u00a0[10]: Copied! <pre>\"\"\"\nIn python, data type is specified during the runtime.\n\"\"\"\na = 10\n</pre> \"\"\" In python, data type is specified during the runtime. \"\"\" a = 10 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_2_datatypes/1_variables/#data-types-and-variables","title":"Data Types and Variables\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#syntax","title":"Syntax\u00b6","text":"<p>Syntax refers to the guidelines that determine the structure of a language. If the syntax of a language is not followed, the code will not be understood by a compiler or interpreter.</p>"},{"location":"chapter_2_datatypes/1_variables/#key-features-of-python-syntax","title":"Key Features of Python Syntax:\u00b6","text":"<ul> <li><p>Comments:</p> <ul> <li>Single-line comment: <code>#</code></li> <li>Multi-line comment: <code>\"\"\" \"\"\"</code></li> </ul> </li> <li><p>Case Sensitivity:</p> <ul> <li>Python is case-sensitive.</li> </ul> </li> <li><p>Statements:</p> <ul> <li>Python executes statements line by line, i.e., one line at a time.</li> </ul> </li> <li><p>Input/Output:</p> <ul> <li><code>input()</code> is used to take user input.</li> <li><code>print()</code> is used to show the output.</li> </ul> </li> <li><p>Indentation:</p> <ul> <li>Python uses indentation to define code blocks instead of braces <code>{}</code>.</li> </ul> </li> </ul>"},{"location":"chapter_2_datatypes/1_variables/#variables","title":"Variables\u00b6","text":"<p>Variables are containers for storing data values.</p>"},{"location":"chapter_2_datatypes/1_variables/#rules-for-creating-variable-names","title":"Rules for Creating Variable Names\u00b6","text":"<ul> <li>Must start with a letter or the underscore (<code>_</code>) character</li> <li>Cannot start with a number</li> <li>Can only contain alphanumeric characters and underscores (<code>A-z</code>, <code>0-9</code>, and <code>_</code>)</li> <li>Case-sensitive \u2014 <code>mobile</code>, <code>Mobile</code>, and <code>MOBILE</code> are three different variables</li> <li>Cannot be any of the Python keywords</li> </ul> <p>Tip: Use meaningful variable names to make your code easier to understand.</p>"},{"location":"chapter_2_datatypes/1_variables/#data-types","title":"Data Types\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#perform-arithmetic-operations-using-float-variables","title":"Perform arithmetic operations using Float Variables\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#excercise-perform-arithmetic-operations-using-complex-number","title":"Excercise : Perform arithmetic operations using Complex Number\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#type-casting","title":"Type Casting\u00b6","text":"<ul> <li>Type casting, also known as type conversion, is the process of changing the data type of a variable from one type to another.</li> </ul>"},{"location":"chapter_2_datatypes/1_variables/#dynamic-typing-in-python","title":"Dynamic Typing in Python\u00b6","text":"<p>In statically typed languages like C</p> <pre><code>int a = 10\n</code></pre> <p>The data type is explicitly declared at compile time, meaning a is known to be an integer before the program runs.</p>"},{"location":"chapter_2_datatypes/1_variables/#exercise-write-a-program-to-take-two-numbers-from-user-and-add-them","title":"Exercise:  Write a program to take two numbers from user and add them\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/","title":"Strings","text":"In\u00a0[1]: Copied! <pre># using single quotes\nfirst_name = 'Nirajan'\nprint(first_name)\n\n# using double quotes\nlast_name = \"Bekoju\"\nprint(last_name)\n\n# Triple quotes for multi-line\ntutorial = \"\"\"\nI am learning Python.\nPython is fun.\n\"\"\"\n\nprint(tutorial)\n</pre> # using single quotes first_name = 'Nirajan' print(first_name)  # using double quotes last_name = \"Bekoju\" print(last_name)  # Triple quotes for multi-line tutorial = \"\"\" I am learning Python. Python is fun. \"\"\"  print(tutorial) <pre>Nirajan\nBekoju\n\nI am learning Python.\nPython is fun.\n\n</pre> In\u00a0[2]: Copied! <pre>## index example\ntext = 'Python'\nprint(len(text))\nprint(text[0])\nprint(text[3])\n\n## index out of range\nprint(text[9])\n</pre> ## index example text = 'Python' print(len(text)) print(text[0]) print(text[3])  ## index out of range print(text[9]) <pre>6\nP\nh\n</pre> <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[2], line 8\n      5 print(text[3])\n      7 ## index out of range\n----&gt; 8 print(text[9])\n\nIndexError: string index out of range</pre> In\u00a0[3]: Copied! <pre>## index example using negative value\ntext = 'Python'\nprint(text[-1])\nprint(text[-2])\nprint(text[-3])\n\nprint(text[-11])\n</pre> ## index example using negative value text = 'Python' print(text[-1]) print(text[-2]) print(text[-3])  print(text[-11]) <pre>n\no\nh\n</pre> <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[3], line 7\n      4 print(text[-2])\n      5 print(text[-3])\n----&gt; 7 print(text[-11])\n\nIndexError: string index out of range</pre> In\u00a0[4]: Copied! <pre>### string slicing\ntext = 'Python'\nprint(text[0:4])\nprint(text[2:8])\nprint(text[2:])\nprint(text[:5])\n</pre> ### string slicing text = 'Python' print(text[0:4]) print(text[2:8]) print(text[2:]) print(text[:5]) <pre>Pyth\nthon\nthon\nPytho\n</pre> In\u00a0[6]: Copied! <pre>text = 'Python'\nprint(text[-3:])\nprint(text[-3:-5])\nprint(text[-4:-2])\n</pre> text = 'Python' print(text[-3:]) print(text[-3:-5]) print(text[-4:-2]) <pre>hon\n\nth\n</pre> In\u00a0[7]: Copied! <pre>text = 'abcdefghij'\nprint(len(text))\nprint(text[0:5])\nprint(text[0:5:2])\n</pre> text = 'abcdefghij' print(len(text)) print(text[0:5]) print(text[0:5:2]) <pre>10\nabcde\nace\n</pre> In\u00a0[9]: Copied! <pre>text = 'abcdefghij'\nprint(text[::-1])\nprint(text[::-2])\n</pre> text = 'abcdefghij' print(text[::-1]) print(text[::-2]) <pre>jihgfedcba\njhfdb\n</pre> In\u00a0[11]: Copied! <pre>first_name = 'Toni'\nlast_name = 'Kroos'\n\nconcatenated_word = first_name + ' ' + last_name\nprint(concatenated_word)\n\n## also calculate the length of the concatenated word\nprint(len(concatenated_word))\n</pre> first_name = 'Toni' last_name = 'Kroos'  concatenated_word = first_name + ' ' + last_name print(concatenated_word)  ## also calculate the length of the concatenated word print(len(concatenated_word)) <pre>Toni Kroos\n10\n</pre> In\u00a0[12]: Copied! <pre>a = 'Hello World'\nprint(id(a))\na[1] = 'b'\nprint()\n</pre> a = 'Hello World' print(id(a)) a[1] = 'b' print() <pre>131676183822896\n</pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[12], line 3\n      1 a = 'Hello World'\n      2 print(id(a))\n----&gt; 3 a[1] = 'b'\n      4 print()\n\nTypeError: 'str' object does not support item assignment</pre> In\u00a0[25]: Copied! <pre>a = 'random string 1'\nprint(id(a))\n</pre> a = 'random string 1' print(id(a)) <pre>123290813869040\n</pre> In\u00a0[26]: Copied! <pre>a = 'hello world'\nprint(id(a))\n</pre> a = 'hello world' print(id(a)) <pre>123290813873776\n</pre> Method Description Example <code>str.lower()</code> Converts to lowercase <code>\"Hello\".lower()</code> \u2192 <code>'hello'</code> <code>str.upper()</code> Converts to uppercase <code>\"hello\".upper()</code> \u2192 <code>'HELLO'</code> <code>str.title()</code> Capitalizes first letter of each word <code>\"hello world\".title()</code> -&gt; Hello World <code>str.capitalize()</code> Capitalizes the first character <code>\"hello\".capitalize()</code> \u2192 <code>'Hello'</code> <code>str.strip()</code> Removes leading/trailing spaces <code>\"  hello  \".strip()</code> <code>str.replace(old, new)</code> Replaces a substring <code>\"apple\".replace(\"a\", \"A\")</code> <code>str.find(sub)</code> Finds the first index of substring <code>\"hello\".find(\"l\")</code> \u2192 <code>2</code> <code>str.count(sub)</code> Counts occurrences of a substring <code>\"banana\".count(\"a\")</code> \u2192 <code>3</code> <code>str.split(sep)</code> Splits string into a list <code>\"a,b,c\".split(\",\")</code> <code>str.join(list)</code> Joins list into a string <code>\" \".join([\"I\", \"love\", \"Python\"])</code> <code>str.isalpha()</code> Checks if all characters are alphabetic <code>\"abc\".isalpha()</code> \u2192 <code>True</code> <code>str.isdigit()</code> Checks if all characters are digits <code>\"123\".isdigit()</code> \u2192 <code>True</code> <code>str.isalnum()</code> Checks if alphanumeric <code>\"abc123\".isalnum()</code> \u2192 <code>True</code> <code>str.startswith(prefix)</code> Checks if string starts with <code>prefix</code> <code>\"hello\".startswith(\"he\")</code> <code>str.endswith(suffix)</code> Checks if string ends with <code>suffix</code> <code>\"hello\".endswith(\"o\")</code> In\u00a0[15]: Copied! <pre>name = 'kroos toni abc sk'\ntitle_name = name.title()\nprint(title_name)\n</pre> name = 'kroos toni abc sk' title_name = name.title() print(title_name) <pre>Kroos Toni Abc Sk\n</pre> In\u00a0[14]: Copied! <pre>print(name)\n</pre> print(name) <pre>kroos toni abc sk\n</pre> In\u00a0[32]: Copied! <pre>name = 'Rejesh Hamal'\n# replace e with a\nname.replace('e', 'a', 1)\n</pre> name = 'Rejesh Hamal' # replace e with a name.replace('e', 'a', 1)  Out[32]: <pre>'Rajesh Hamal'</pre> In\u00a0[36]: Copied! <pre>a = name.lower()\nprint(a)\nprint(name)\n</pre> a = name.lower() print(a) print(name) <pre>rejesh hamal\nRejesh Hamal\n</pre> In\u00a0[37]: Copied! <pre>name.title()\n</pre> name.title() Out[37]: <pre>'Rejesh Hamal'</pre> In\u00a0[38]: Copied! <pre>'nirajan BEKOJU'.title()\n</pre> 'nirajan BEKOJU'.title() Out[38]: <pre>'Nirajan Bekoju'</pre> In\u00a0[39]: Copied! <pre>\"asdf\".isalnum()\n</pre> \"asdf\".isalnum() Out[39]: <pre>True</pre> In\u00a0[40]: Copied! <pre>print(\"Hello I am learning \\n Python\")\n</pre> print(\"Hello I am learning \\n Python\") <pre>Hello I am learning \n Python\n</pre> In\u00a0[44]: Copied! <pre>print(\"Hello I am learning \\\"python\\\"\")\n</pre> print(\"Hello I am learning \\\"python\\\"\") <pre>Hello I am learning \"python\"\n</pre> In\u00a0[51]: Copied! <pre>name = 'Rajesh Hamal'\nage = 50\ntemp = \"temporary\"\n\nnew_sentence = f\"my name is {name} and I am {age} year old.  {temp}\"\nprint(new_sentence)\n</pre> name = 'Rajesh Hamal' age = 50 temp = \"temporary\"  new_sentence = f\"my name is {name} and I am {age} year old.  {temp}\" print(new_sentence) <pre>my name is Rajesh Hamal and I am 50 year old.  temporary\n</pre> In\u00a0[53]: Copied! <pre>name = 'Rajesh Hamal'\nage = 50\ntemp = \"temporary\"\n\n\nnew_sentence = \"My name is {n} and I am {a} year old\".format(n = name, a = age)\nprint(new_sentence)\n</pre> name = 'Rajesh Hamal' age = 50 temp = \"temporary\"   new_sentence = \"My name is {n} and I am {a} year old\".format(n = name, a = age) print(new_sentence) <pre>My name is Rajesh Hamal and I am 50 year old\n</pre> <p>Note : f-string is faster than .format() and hence use it.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_2_datatypes/2_string/#string","title":"String\u00b6","text":"<p>A string is a sequence of characters enclosed in quotes.</p>"},{"location":"chapter_2_datatypes/2_string/#characteristics-1-strings-can-be-indexed-or-sliced","title":"Characteristics 1 : Strings can be indexed or sliced.\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/#string-concatenation","title":"String Concatenation\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/#characteristics-2-strings-are-immutable","title":"Characteristics 2 : Strings are immutable.\u00b6","text":"<ul> <li>Immutable means they cannot be changed after creation</li> </ul>"},{"location":"chapter_2_datatypes/2_string/#string-methods","title":"String Methods\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/#string-method-exercise","title":"String Method Exercise\u00b6","text":"<ul> <li><p>Take a name from the user and print it in uppercase and lowercase.</p> </li> <li><p>Count how many times the letter \"a\" appears in the string \"banana\".</p> </li> <li><p>Check if a user-entered word starts with \"A\" or ends with \"z\".</p> </li> <li><p>Write a program that takes a full name and splits it into first and last name.</p> </li> <li><p>Take a input string from user and print its reverse</p> </li> </ul>"},{"location":"chapter_2_datatypes/2_string/#escape-characters","title":"Escape Characters\u00b6","text":"Character Description <code>\\n</code> New Line <code>\\t</code> Tab <code>\\\\</code> Backslash <code>\\'</code> Single Quote <code>\\\"</code> Double Quote"},{"location":"chapter_2_datatypes/2_string/#f-string-and-format","title":"F-String and Format\u00b6","text":""},{"location":"chapter_2_datatypes/3_operator/","title":"Operator","text":"In\u00a0[4]: Copied! <pre>a = 72\nb = 5\nprint(a % b)\n</pre> a = 72 b = 5 print(a % b) <pre>2\n</pre> In\u00a0[1]: Copied! <pre>a = 11.5\nb = 10\n\nprint(a == b)\nprint(a != b)\n</pre> a = 11.5 b = 10  print(a == b) print(a != b) <pre>False\nTrue\n</pre> In\u00a0[2]: Copied! <pre>a = True \nb = False \n\nprint(a and b)\nprint(a or b)\nprint(not a)\n</pre> a = True  b = False   print(a and b) print(a or b) print(not a) <pre>False\nTrue\nFalse\n</pre> In\u00a0[3]: Copied! <pre>num_1 = 10\nnum_2 = 20\n\n(num_1 &lt; 15) and (num_2 &gt;15)\n</pre> num_1 = 10 num_2 = 20  (num_1 &lt; 15) and (num_2 &gt;15) Out[3]: <pre>True</pre> In\u00a0[1]: Copied! <pre>a = 5\n-a\n</pre> a = 5 -a Out[1]: <pre>-5</pre> In\u00a0[\u00a0]: Copied! <pre>x = 5\ny = 10\nz = 15\n\n# Precedence: &gt; then and then not\nprint(not x &gt; 2 and y &lt; 20) \n\n# Use parentheses to control order\nprint(not (x &gt; 2 and y &lt; 20))  # not(True and True) \u2192 False\n</pre> x = 5 y = 10 z = 15  # Precedence: &gt; then and then not print(not x &gt; 2 and y &lt; 20)   # Use parentheses to control order print(not (x &gt; 2 and y &lt; 20))  # not(True and True) \u2192 False <pre>False\nFalse\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_2_datatypes/3_operator/#arithmetic-operator","title":"Arithmetic Operator\u00b6","text":"Operator Name Description Example Output <code>+</code> Addition Adds two numbers <code>5 + 3</code> <code>8</code> <code>-</code> Subtraction Subtracts the second from the first <code>10 - 4</code> <code>6</code> <code>*</code> Multiplication Multiplies two numbers <code>2 * 6</code> <code>12</code> <code>/</code> Division Divides the first by the second (float) <code>8 / 2</code> <code>4.0</code> <code>//</code> Floor Division Division with result rounded down <code>7 // 2</code> <code>3</code> <code>%</code> Modulus Remainder of the division <code>7 % 2</code> <code>1</code> <code>**</code> Exponentiation Raises to the power <code>2 ** 3</code> <code>8</code>"},{"location":"chapter_2_datatypes/3_operator/#comparison-operator","title":"Comparison Operator\u00b6","text":"Operator Meaning Example <code>==</code> Equal to <code>5 == 5 \u2192 True</code> <code>!=</code> Not equal to <code>5 != 3 \u2192 True</code> <code>&gt;</code> Greater than <code>5 &gt; 3 \u2192 True</code> <code>&lt;</code> Less than <code>5 &lt; 3 \u2192 False</code> <code>&gt;=</code> Greater than or equal <code>5 &gt;= 5 \u2192 True</code> <code>&lt;=</code> Less than or equal <code>3 &lt;= 5 \u2192 True</code>"},{"location":"chapter_2_datatypes/3_operator/#logical-operator","title":"Logical Operator\u00b6","text":"Operator Description Example <code>and</code> True if both are True <code>True and True \u2192 True</code> <code>or</code> True if any is True <code>True or False \u2192 True</code> <code>not</code> Inverts True/False <code>not True \u2192 False</code>"},{"location":"chapter_2_datatypes/3_operator/#operator-precedence","title":"Operator Precedence\u00b6","text":"Precedence Operator Type Operators Description 1 Parentheses <code>()</code> Overrides default precedence 2 Exponent <code>**</code> Power 3 Unary <code>+x</code>, <code>-x</code>, <code>~x</code> Unary plus, minus, bitwise NOT 4 Multiply/Divide <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code> Multiplication, division, etc. 5 Add/Subtract <code>+</code>, <code>-</code> Addition and subtraction 6 Comparison <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> Compare values 7 Logical NOT <code>not</code> Logical negation 8 Logical AND <code>and</code> Logical AND 9 Logical OR <code>or</code> Logical OR"},{"location":"chapter_3_data_structure/1_list/","title":"Lists","text":"In\u00a0[2]: Copied! <pre>## creating a list\nfruits_list = ['apple', 'banana', 'cherry', 10, 20, 30, 111.4]\nprint(fruits_list)\n</pre> ## creating a list fruits_list = ['apple', 'banana', 'cherry', 10, 20, 30, 111.4] print(fruits_list) <pre>['apple', 'banana', 'cherry', 10, 20, 30, 111.4]\n</pre> In\u00a0[3]: Copied! <pre>fruits_list = ['apple', 'banana', 'cherry']\nfruits_list[0] = 'mango'\nprint(fruits_list)\n</pre> fruits_list = ['apple', 'banana', 'cherry'] fruits_list[0] = 'mango' print(fruits_list) <pre>['mango', 'banana', 'cherry']\n</pre> In\u00a0[26]: Copied! <pre>## creating the list\nnumbers_list = [53, 93, 35, 1, 65, 26, 47, 3]\n\n## get the length of the list\nprint(len(numbers_list))\n</pre> ## creating the list numbers_list = [53, 93, 35, 1, 65, 26, 47, 3]  ## get the length of the list print(len(numbers_list)) <pre>8\n</pre> In\u00a0[13]: Copied! <pre>## indexing in list\nprint(numbers_list[0])\nprint(numbers_list[5])\nprint(numbers_list[-2])\n</pre> ## indexing in list print(numbers_list[0]) print(numbers_list[5]) print(numbers_list[-2]) <pre>53\n26\n47\n</pre> In\u00a0[4]: Copied! <pre>## slicing in list\nnumbers_list = [53, 93, 35, 1, 65, 26, 47, 3]\n\n## slicing with positive numbers\nprint('-----------------------------')\nprint('slicing with postive numbers')\nprint('-----------------------------')\nprint(numbers_list[1:4])     \nprint(numbers_list[:3])      \nprint(numbers_list[3:]) \n\n## slicing with negative numbers\nprint('-----------------------------')\nprint('slicing with negative numbers')\nprint('-----------------------------')\nprint(numbers_list[-5:-3])\n</pre> ## slicing in list numbers_list = [53, 93, 35, 1, 65, 26, 47, 3]  ## slicing with positive numbers print('-----------------------------') print('slicing with postive numbers') print('-----------------------------') print(numbers_list[1:4])      print(numbers_list[:3])       print(numbers_list[3:])   ## slicing with negative numbers print('-----------------------------') print('slicing with negative numbers') print('-----------------------------') print(numbers_list[-5:-3])  <pre>-----------------------------\nslicing with postive numbers\n-----------------------------\n[93, 35, 1]\n[53, 93, 35]\n[1, 65, 26, 47, 3]\n-----------------------------\nslicing with negative numbers\n-----------------------------\n[1, 65]\n</pre> In\u00a0[5]: Copied! <pre>## with steps\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers_list[::2])\n\n## reverse the list\nprint(numbers_list[::-1])   \n</pre> ## with steps numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers_list[::2])  ## reverse the list print(numbers_list[::-1])    <pre>[1, 3, 5, 7, 9]\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n</pre> In\u00a0[6]: Copied! <pre>temp_list = ['apple', 1, 2]\n</pre> temp_list = ['apple', 1, 2] In\u00a0[10]: Copied! <pre>a = 2\nprint(type(temp_list))\n</pre> a = 2 print(type(temp_list)) <pre>&lt;class 'list'&gt;\n</pre> In\u00a0[25]: Copied! <pre># List of cities\ncities = [\n    \"Kathmandu\",\n    \"New York\",\n    \"Tokyo\",\n    \"Paris\",\n    \"London\",\n    \"Sydney\",\n    \"Dubai\",\n    \"Toronto\",\n    \"Rome\",\n]\n</pre> # List of cities cities = [     \"Kathmandu\",     \"New York\",     \"Tokyo\",     \"Paris\",     \"London\",     \"Sydney\",     \"Dubai\",     \"Toronto\",     \"Rome\", ] In\u00a0[26]: Copied! <pre>cities.sort()\nprint(cities)\n</pre> cities.sort() print(cities) <pre>['Dubai', 'Kathmandu', 'London', 'New York', 'Paris', 'Rome', 'Sydney', 'Tokyo', 'Toronto']\n</pre> In\u00a0[27]: Copied! <pre>cities.sort(reverse=True)\nprint(cities)\n</pre> cities.sort(reverse=True) print(cities) <pre>['Toronto', 'Tokyo', 'Sydney', 'Rome', 'Paris', 'New York', 'London', 'Kathmandu', 'Dubai']\n</pre> In\u00a0[19]: Copied! <pre>removed_element = cities.pop(1)\nprint(removed_element)\n</pre> removed_element = cities.pop(1) print(removed_element) <pre>New York\n</pre> In\u00a0[20]: Copied! <pre>print(cities)\n</pre> print(cities) <pre>['Kathmandu', 'Tokyo', 'Paris', 'London', 'Sydney', 'Dubai', 'Toronto', 'Rome']\n</pre> In\u00a0[12]: Copied! <pre>cities.append('Pokhara')\n</pre> cities.append('Pokhara') In\u00a0[13]: Copied! <pre>print(cities)\n</pre> print(cities) <pre>['Kathmandu', 'New York', 'Tokyo', 'Paris', 'London', 'Sydney', 'Dubai', 'Toronto', 'Rome', 'Pokhara']\n</pre> In\u00a0[29]: Copied! <pre># List of cities\ncities = [\n    \"Kathmandu\",\n    \"New York\",\n    \"Tokyo\",\n    \"Paris\",\n    \"London\",\n    \"Sydney\",\n    \"Dubai\",\n    \"Toronto\",\n    \"Rome\",\n]\n\nprint(cities.sort())\n</pre> # List of cities cities = [     \"Kathmandu\",     \"New York\",     \"Tokyo\",     \"Paris\",     \"London\",     \"Sydney\",     \"Dubai\",     \"Toronto\",     \"Rome\", ]  print(cities.sort()) <pre>None\n</pre> In\u00a0[30]: Copied! <pre>print(cities)\n</pre> print(cities) <pre>['Dubai', 'Kathmandu', 'London', 'New York', 'Paris', 'Rome', 'Sydney', 'Tokyo', 'Toronto']\n</pre> In\u00a0[31]: Copied! <pre>help(cities.sort)\n</pre> help(cities.sort) <pre>Help on built-in function sort:\n\nsort(*, key=None, reverse=False) method of builtins.list instance\n    Sort the list in ascending order and return None.\n\n    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n    order of two equal elements is maintained).\n\n    If a key function is given, apply it once to each list item and sort them,\n    ascending or descending, according to their function values.\n\n    The reverse flag can be set to sort in descending order.\n\n</pre> In\u00a0[16]: Copied! <pre>## insert\na = [1, 2, 3, 5]\na.insert(5,1)\nprint(a)\n</pre> ## insert a = [1, 2, 3, 5] a.insert(5,1) print(a) <pre>[1, 2, 3, 5, 1]\n</pre> In\u00a0[17]: Copied! <pre>help(list.insert)\n</pre> help(list.insert) <pre>Help on method_descriptor:\n\ninsert(self, index, object, /) unbound builtins.list method\n    Insert object before index.\n\n</pre> In\u00a0[12]: Copied! <pre>cities.sort(reverse=True)\nprint(cities)\n</pre> cities.sort(reverse=True) print(cities) <pre>['Toronto', 'Tokyo', 'Sydney', 'Rome', 'Pokhara', 'Paris', 'New York', 'London', 'Kathmandu', 'Dubai']\n</pre> In\u00a0[32]: Copied! <pre>original_list = [[1, 2], [3, 4], ['apple', 'mango', 'coconut']]\n\n## shallow copy of the list\ncopy_list = original_list.copy()\n\nprint(original_list)\nprint(copy_list)\n</pre> original_list = [[1, 2], [3, 4], ['apple', 'mango', 'coconut']]  ## shallow copy of the list copy_list = original_list.copy()  print(original_list) print(copy_list) <pre>[[1, 2], [3, 4], ['apple', 'mango', 'coconut']]\n[[1, 2], [3, 4], ['apple', 'mango', 'coconut']]\n</pre> In\u00a0[33]: Copied! <pre>copy_list[2][0]\n</pre> copy_list[2][0] Out[33]: <pre>'apple'</pre> In\u00a0[34]: Copied! <pre>copy_list[0][0] = 5\n\nprint(original_list)\nprint(copy_list)\n</pre> copy_list[0][0] = 5  print(original_list) print(copy_list) <pre>[[5, 2], [3, 4], ['apple', 'mango', 'coconut']]\n[[5, 2], [3, 4], ['apple', 'mango', 'coconut']]\n</pre> In\u00a0[35]: Copied! <pre>## an example of deep copy\nimport copy\noriginal_list = [[1, 2], [3, 4]]\n\ndeep_copy_list = copy.deepcopy(original_list)\ndeep_copy_list[0][0] = 5\n\nprint(original_list)\nprint(deep_copy_list)\n</pre> ## an example of deep copy import copy original_list = [[1, 2], [3, 4]]  deep_copy_list = copy.deepcopy(original_list) deep_copy_list[0][0] = 5  print(original_list) print(deep_copy_list)  <pre>[[1, 2], [3, 4]]\n[[5, 2], [3, 4]]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/1_list/#lists","title":"Lists\u00b6","text":"<ul> <li>Lists are used to store multiple items in a single variable.</li> <li>Lists can hold items of different data types such as string, integer, float</li> </ul>"},{"location":"chapter_3_data_structure/1_list/#list-is-mutable","title":"List is Mutable\u00b6","text":""},{"location":"chapter_3_data_structure/1_list/#indexing-and-slicing","title":"Indexing and Slicing\u00b6","text":""},{"location":"chapter_3_data_structure/1_list/#list-methods","title":"List Methods\u00b6","text":"Method Description Example Code Output <code>append()</code> Adds an item to the end of the list <code>lst = [1, 2]</code><code>lst.append(3)</code> <code>[1, 2, 3]</code> <code>extend()</code> Adds all elements of another list <code>lst = [1, 2]</code><code>lst.extend([3, 4])</code> <code>[1, 2, 3, 4]</code> <code>insert()</code> Inserts item at given index <code>lst = [1, 3]</code><code>lst.insert(1, 2)</code> <code>[1, 2, 3]</code> <code>remove()</code> Removes first occurrence of value <code>lst = [1, 2, 3]</code><code>lst.remove(2)</code> <code>[1, 3]</code> <code>pop()</code> Removes and returns item at index (default last) <code>lst = [1, 2, 3]</code><code>lst.pop()</code> <code>3</code>, list: <code>[1, 2]</code> <code>clear()</code> Removes all items from the list <code>lst = [1, 2, 3]</code><code>lst.clear()</code> <code>[]</code> <code>index()</code> Returns first index of value <code>lst = [10, 20, 30]</code><code>lst.index(20)</code> <code>1</code> <code>count()</code> Counts how many times value appears <code>lst = [1, 1, 2, 1]</code><code>lst.count(1)</code> <code>3</code> <code>sort()</code> Sorts the list in ascending order <code>lst = [3, 1, 2]</code><code>lst.sort()</code> <code>[1, 2, 3]</code> <code>reverse()</code> Reverses the order of the list <code>lst = [1, 2, 3]</code><code>lst.reverse()</code> <code>[3, 2, 1]</code> <code>copy()</code> Returns a shallow copy of the list <code>lst = [1, 2]</code><code>new = lst.copy()</code> <code>new = [1, 2]</code>"},{"location":"chapter_3_data_structure/1_list/#exercise-create-list-of-atleast-7-favorite-movies-or-series","title":"Exercise : Create list of atleast 7 favorite movies or series.\u00b6","text":"<ul> <li>Print the second and last movies.</li> <li>Print from second to second last movies</li> <li>Reverse the list.</li> <li>Add a new movie.</li> <li>Sort the list alphabetically.</li> <li>Remove the third movie</li> <li>clear all the list</li> </ul>"},{"location":"chapter_3_data_structure/1_list/#shallow-copy-vs-deep-copy","title":"Shallow Copy vs Deep Copy\u00b6","text":"<ul> <li><p>A shallow copy creates a new outer object, but doesn't copy nested objects inside it.</p> </li> <li><p>Both the original and the copy share references to the same inner objects.</p> </li> </ul>"},{"location":"chapter_3_data_structure/2_tuple/","title":"Tuples","text":"In\u00a0[1]: Copied! <pre>my_tuple = (1, 2, 3)\nmy_tuple[0] = 5\n# my_tuple[0] = 10  # This will raise an error\n</pre> my_tuple = (1, 2, 3) my_tuple[0] = 5 # my_tuple[0] = 10  # This will raise an error <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[1], line 2\n      1 my_tuple = (1, 2, 3)\n----&gt; 2 my_tuple[0] = 5\n      3 # my_tuple[0] = 10  # This will raise an error\n\nTypeError: 'tuple' object does not support item assignment</pre> In\u00a0[8]: Copied! <pre>t = ('a', 'b', 'c', 'd', 'e')\nprint(t[0])       # First element\nprint(t[-1])      # Last element\nprint(t[1:4])     # Slicing\nprint(t[::-1])    # Reversed\n</pre> t = ('a', 'b', 'c', 'd', 'e') print(t[0])       # First element print(t[-1])      # Last element print(t[1:4])     # Slicing print(t[::-1])    # Reversed <pre>a\ne\n('b', 'c', 'd')\n('e', 'd', 'c', 'b', 'a')\n</pre> In\u00a0[2]: Copied! <pre>my_tuple = ('apply', 'coco', 'sdfjh', 'mango')\nmy_tuple.index('coco')\n</pre> my_tuple = ('apply', 'coco', 'sdfjh', 'mango') my_tuple.index('coco') Out[2]: <pre>1</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[10]: Copied! <pre>country_1, country_2, country_3 = ('Nepal', 'Japan', 'India')\nprint(country_1)\nprint(country_2)\nprint(country_3)\n</pre> country_1, country_2, country_3 = ('Nepal', 'Japan', 'India') print(country_1) print(country_2) print(country_3) <pre>Nepal\nJapan\nIndia\n</pre> In\u00a0[11]: Copied! <pre>t = ('a', 'b', 'c', 'd', 'e')\n</pre> t = ('a', 'b', 'c', 'd', 'e')  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/2_tuple/#tuples","title":"Tuples\u00b6","text":"<ul> <li>Tuples are used to store multiple items in a single variable.</li> <li>Tuples are immutable, meaning once created, their elements cannot be changed.</li> </ul>"},{"location":"chapter_3_data_structure/2_tuple/#tuple-is-immutable","title":"Tuple is Immutable\u00b6","text":""},{"location":"chapter_3_data_structure/2_tuple/#indexing-and-slicing","title":"Indexing and Slicing\u00b6","text":""},{"location":"chapter_3_data_structure/2_tuple/#tuple-methods","title":"Tuple Methods\u00b6","text":"Method Description Example Code Output <code>count()</code> Returns the number of times a value appears <code>t = (1, 2, 1)</code><code>t.count(1)</code> <code>2</code> <code>index()</code> Returns the index of the first matching value <code>t = (10, 20, 30)</code><code>t.index(20)</code> <code>1</code>"},{"location":"chapter_3_data_structure/2_tuple/#exercise-create-a-tuple-of-5-artists","title":"Exercise : Create a tuple of 5 artists.\u00b6","text":"<ul> <li>Print the first and last artists.</li> <li>Print a slice from second to fourth artists.</li> <li>Count a particular artists (create some duplicate in the tuple for this).</li> <li>Try modifying an element (and observe the error).</li> </ul>"},{"location":"chapter_3_data_structure/2_tuple/#unpacking-a-tuple","title":"Unpacking a tuple\u00b6","text":""},{"location":"chapter_3_data_structure/2_tuple/#add-new-element-in-tuple","title":"Add new element in Tuple\u00b6","text":""},{"location":"chapter_3_data_structure/3_dictionary/","title":"Dictionaries","text":"In\u00a0[1]: Copied! <pre>person = {\n    'name': 'Alice', \n    'age': 25\n    }\nprint(person['name'])  # Accessing value by key\n</pre> person = {     'name': 'Alice',      'age': 25     } print(person['name'])  # Accessing value by key <pre>Alice\n</pre> In\u00a0[13]: Copied! <pre>## add city\nperson['city'] = 'Kathmandu'\n\n## update age\nperson['age'] = 50\nprint(person)\n</pre> ## add city person['city'] = 'Kathmandu'  ## update age person['age'] = 50 print(person) <pre>{'name': 'Alice', 'age': 50, 'city': 'Kathmandu'}\n</pre> In\u00a0[14]: Copied! <pre>## delete name\ndel person['name']\nprint(person)\n</pre> ## delete name del person['name'] print(person) <pre>{'age': 50, 'city': 'Kathmandu'}\n</pre> In\u00a0[2]: Copied! <pre>print(person)\n</pre> print(person) <pre>{'name': 'Alice', 'age': 25}\n</pre> In\u00a0[3]: Copied! <pre>person.keys()\n</pre> person.keys() Out[3]: <pre>dict_keys(['name', 'age'])</pre> In\u00a0[4]: Copied! <pre>person.values()\n</pre> person.values() Out[4]: <pre>dict_values(['Alice', 25])</pre> In\u00a0[5]: Copied! <pre>person.items()\n</pre> person.items() Out[5]: <pre>dict_items([('name', 'Alice'), ('age', 25)])</pre> In\u00a0[6]: Copied! <pre>person\n</pre> person Out[6]: <pre>{'name': 'Alice', 'age': 25}</pre> In\u00a0[7]: Copied! <pre>person['location']\n</pre> person['location'] <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 person['location']\n\nKeyError: 'location'</pre> In\u00a0[9]: Copied! <pre>person.get('name')\n</pre> person.get('name') Out[9]: <pre>'Alice'</pre> In\u00a0[11]: Copied! <pre>person.get('location', 'Kathmandu')\n</pre> person.get('location', 'Kathmandu') Out[11]: <pre>'Kathmandu'</pre> In\u00a0[12]: Copied! <pre>person.get('dsafaskhj', 'Kathmandu')\n</pre> person.get('dsafaskhj', 'Kathmandu') Out[12]: <pre>'Kathmandu'</pre> In\u00a0[14]: Copied! <pre>my_tuple = (1, 2, 3, 4)\nmy_list = list(my_tuple)\nmy_list.append(5)\nmy_tuple = tuple(my_list)\nprint(my_tuple)\n</pre> my_tuple = (1, 2, 3, 4) my_list = list(my_tuple) my_list.append(5) my_tuple = tuple(my_list) print(my_tuple) <pre>(1, 2, 3, 4, 5)\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/3_dictionary/#dictionaries","title":"Dictionaries\u00b6","text":"<ul> <li>Dictionaries are used to store data values in key:value pairs.</li> </ul>"},{"location":"chapter_3_data_structure/3_dictionary/#creating-and-accessing-dictionary","title":"Creating and Accessing Dictionary\u00b6","text":""},{"location":"chapter_3_data_structure/3_dictionary/#adding-updating-and-removing-elements","title":"Adding, Updating, and Removing Elements\u00b6","text":""},{"location":"chapter_3_data_structure/3_dictionary/#dictionary-methods","title":"Dictionary Methods\u00b6","text":"Method Description Example Code Output <code>keys()</code> Returns a list of dictionary keys <code>d = {'a': 1}</code><code>d.keys()</code> <code>dict_keys(['a'])</code> <code>values()</code> Returns a list of dictionary values <code>d = {'a': 1}</code><code>d.values()</code> <code>dict_values([1])</code> <code>items()</code> Returns a list of key-value tuple pairs <code>d = {'a': 1}</code><code>d.items()</code> <code>dict_items([('a', 1)])</code> <code>get()</code> Returns value for key if key exists <code>d = {'a': 1}</code><code>d.get('a')</code> <code>1</code> <code>update()</code> Updates dictionary with another dictionary <code>d.update({'b': 2})</code> <code>{'a': 1, 'b': 2}</code> <code>pop()</code> Removes and returns value for key <code>d.pop('a')</code> <code>1</code> and <code>{'b': 2}</code> <code>clear()</code> Removes all items <code>d.clear()</code> <code>{}</code>"},{"location":"chapter_3_data_structure/3_dictionary/#exercise-create-a-dictionary-with-movie-data-title-year-rating","title":"Exercise Create a dictionary with movie data (title, year, rating)\u00b6","text":"<p>Tasks:</p> <ul> <li>Access the title.</li> <li>Update the rating.</li> <li>Add a new key: 'actor'.</li> <li>Delete the year.</li> <li>Print all keys and values.</li> </ul>"},{"location":"chapter_3_data_structure/3_dictionary/#type-casting","title":"type casting\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/","title":"Sets","text":"In\u00a0[1]: Copied! <pre>## Creating a Set\nfruits_set = {'apple', 'banana', 'cherry'}\nprint(fruits_set)\n</pre> ## Creating a Set fruits_set = {'apple', 'banana', 'cherry'} print(fruits_set) <pre>{'cherry', 'banana', 'apple'}\n</pre> In\u00a0[3]: Copied! <pre>## Duplicate values will be removed automatically\nfruits_set = {'apple', 'banana', 'apple'}\nprint(fruits_set)\n</pre> ## Duplicate values will be removed automatically fruits_set = {'apple', 'banana', 'apple'} print(fruits_set) <pre>{'banana', 'apple'}\n</pre> In\u00a0[4]: Copied! <pre>fruits_set = {'apple', 'banana'}\nfruits_set.add('cherry')\nprint(fruits_set)\n</pre> fruits_set = {'apple', 'banana'} fruits_set.add('cherry') print(fruits_set) <pre>{'cherry', 'banana', 'apple'}\n</pre> In\u00a0[7]: Copied! <pre>fruits_set.update(['orange', 'grape'])\nprint(fruits_set)\n</pre> fruits_set.update(['orange', 'grape']) print(fruits_set) <pre>{'orange', 'apple', 'cherry', 'banana', 'grape'}\n</pre> In\u00a0[8]: Copied! <pre>fruits_set.remove('banana')\nprint(fruits_set)\n</pre> fruits_set.remove('banana') print(fruits_set) <pre>{'orange', 'apple', 'cherry', 'grape'}\n</pre> In\u00a0[9]: Copied! <pre>fruits_set.discard('pineapple')  # No error if not found\n# fruits_set.remove('pineapple') would raise an error\n</pre> fruits_set.discard('pineapple')  # No error if not found # fruits_set.remove('pineapple') would raise an error In\u00a0[\u00a0]: Copied! <pre># Union\nset1 = {'a', 'b'}\nset2 = {'b', 'c'}\nprint(set1.union(set2))\n</pre> # Union set1 = {'a', 'b'} set2 = {'b', 'c'} print(set1.union(set2)) In\u00a0[\u00a0]: Copied! <pre># Intersection\nprint(set1.intersection(set2))\n</pre> # Intersection print(set1.intersection(set2)) In\u00a0[\u00a0]: Copied! <pre># Difference\nprint(set1.difference(set2))\n</pre> # Difference print(set1.difference(set2)) In\u00a0[\u00a0]: Copied! <pre># Symmetric Difference\nprint(set1.symmetric_difference(set2))\n</pre> # Symmetric Difference print(set1.symmetric_difference(set2)) In\u00a0[10]: Copied! <pre>for fruit in fruits_set:\n    print(fruit)\n</pre> for fruit in fruits_set:     print(fruit) <pre>orange\napple\ncherry\ngrape\n</pre> In\u00a0[11]: Copied! <pre>'apple' in fruits_set\n</pre> 'apple' in fruits_set Out[11]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/4_set/#sets","title":"Sets\u00b6","text":"<ul> <li>Sets are used to store multiple items in a single variable.</li> <li>Sets are unordered, unchangeable (but you can add/remove items), and do not allow duplicate values.</li> </ul>"},{"location":"chapter_3_data_structure/4_set/#note-since-set-is-unordered-there-is-no-indexing-and-slicing","title":"Note : Since Set is Unordered, there is no indexing and slicing\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#no-duplicates-allowed","title":"No Duplicates Allowed\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#add-items","title":"Add Items\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#add-multiple-items","title":"Add Multiple Items\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#remove-items","title":"Remove Items\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#discard-vs-remove","title":"Discard vs Remove\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#set-operations","title":"Set Operations\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#set-methods-in-python","title":"Set Methods in Python\u00b6","text":"Method Description Example <code>add(elem)</code> Adds a single element to the set <code>s.add(5)</code> <code>update(iterable)</code> Adds multiple elements from an iterable (like list, tuple) <code>s.update([1, 2])</code> <code>remove(elem)</code> Removes specified element; raises error if not found <code>s.remove(3)</code> <code>discard(elem)</code> Removes specified element; no error if element not found <code>s.discard(10)</code> <code>pop()</code> Removes and returns a random element <code>s.pop()</code> <code>clear()</code> Removes all elements from the set <code>s.clear()</code> <code>copy()</code> Returns a shallow copy of the set <code>s2 = s.copy()</code> <code>union(set2)</code> Returns a new set with all elements from both sets <code>s.union(s2)</code> <code>intersection(set2)</code> Returns common elements of both sets <code>s.intersection(s2)</code> <code>difference(set2)</code> Returns elements in the first set but not in the second <code>s.difference(s2)</code> <code>symmetric_difference(set2)</code> Returns elements in either set, but not in both <code>s.symmetric_difference(s2)</code> <code>issubset(set2)</code> Returns <code>True</code> if all elements of the set are in set2 <code>s.issubset(s2)</code> <code>issuperset(set2)</code> Returns <code>True</code> if set has all elements of set2 <code>s.issuperset(s2)</code> <code>isdisjoint(set2)</code> Returns <code>True</code> if sets have no elements in common <code>s.isdisjoint(s2)</code>"},{"location":"chapter_3_data_structure/4_set/#looping-through-a-set","title":"Looping Through a Set\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#check-if-item-exists","title":"Check if Item Exists\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/","title":"Conditionals and Loops","text":"In\u00a0[1]: Copied! <pre># 1. if, elif, else and Indentation\nx = 15\n\nif x &lt; 10:\n    print(\"Less than 10\")\nelif x == 10:\n    print(\"Equal to 10\")\nelse:\n    print(\"Greater than 10\")\n</pre> # 1. if, elif, else and Indentation x = 15  if x &lt; 10:     print(\"Less than 10\") elif x == 10:     print(\"Equal to 10\") else:     print(\"Greater than 10\") <pre>Greater than 10\n</pre> In\u00a0[2]: Copied! <pre>if x &lt; 10:\n    print('x less than 10')\nprint('x less than 10')\n</pre> if x &lt; 10:     print('x less than 10') print('x less than 10') <pre>x less than 10\n</pre> In\u00a0[3]: Copied! <pre># 2. Logical Operators: and, or, not\na = 5\nb = 10\n\nif a &lt; 10 and b &gt; 5:\n    print(\"Both conditions are True\")\n\nif a &gt; 10 or b &gt; 5:\n    print(\"At least one condition is True\")\n\nif not a &gt; 10:\n    print(\"a is not greater than 10\")\n</pre> # 2. Logical Operators: and, or, not a = 5 b = 10  if a &lt; 10 and b &gt; 5:     print(\"Both conditions are True\")  if a &gt; 10 or b &gt; 5:     print(\"At least one condition is True\")  if not a &gt; 10:     print(\"a is not greater than 10\") <pre>Both conditions are True\nAt least one condition is True\na is not greater than 10\n</pre> In\u00a0[4]: Copied! <pre># 3. is vs. == (Identity vs. Equality)\nx = [1, 2, 3]\ny = [1, 2, 3]\nz = x\n\nprint(x == y)  # True: Same content\nprint(x is y)  # False: Different objects\nprint(x is z)  # True: Same object\n</pre> # 3. is vs. == (Identity vs. Equality) x = [1, 2, 3] y = [1, 2, 3] z = x  print(x == y)  # True: Same content print(x is y)  # False: Different objects print(x is z)  # True: Same object <pre>True\nFalse\nTrue\n</pre> In\u00a0[5]: Copied! <pre>id(x), id(y), id(z)\n</pre> id(x), id(y), id(z) Out[5]: <pre>(136234817650112, 136234817650496, 136234817650112)</pre> In\u00a0[6]: Copied! <pre>n = 5\nres = \"Even\" if n % 2 == 0 else \"Odd\"\nprint(res)\n</pre> n = 5 res = \"Even\" if n % 2 == 0 else \"Odd\" print(res) <pre>Odd\n</pre> In\u00a0[7]: Copied! <pre>cities_list = ('Kathmandu', 'Lalitpur', 'Bhaktapur', 'asdf')\n\nfor city in cities_list:\n    print(city.lower())\n    print(city.upper())\n</pre> cities_list = ('Kathmandu', 'Lalitpur', 'Bhaktapur', 'asdf')  for city in cities_list:     print(city.lower())     print(city.upper())  <pre>kathmandu\nKATHMANDU\nlalitpur\nLALITPUR\nbhaktapur\nBHAKTAPUR\nasdf\nASDF\n</pre> In\u00a0[8]: Copied! <pre>word = 'Kathmandu'\n\nfor char in word:\n    print(char)\n</pre> word = 'Kathmandu'  for char in word:     print(char) <pre>K\na\nt\nh\nm\na\nn\nd\nu\n</pre> In\u00a0[9]: Copied! <pre># 4. Introduction to Loops: for and while\n# for loop\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</pre> # 4. Introduction to Loops: for and while # for loop fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits:     print(fruit) <pre>apple\nbanana\ncherry\n</pre> In\u00a0[10]: Copied! <pre># while loop\ncount = 0\nwhile count &lt; 3:\n    print(\"Count:\", count)\n    count += 1\n</pre> # while loop count = 0 while count &lt; 3:     print(\"Count:\", count)     count += 1 <pre>Count: 0\nCount: 1\nCount: 2\n</pre> In\u00a0[11]: Copied! <pre>for i in range(10):\n    print(i)\n</pre> for i in range(10):     print(i) <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre> In\u00a0[12]: Copied! <pre>for i in range(2, 10):\n    print(i)\n</pre> for i in range(2, 10):     print(i) <pre>2\n3\n4\n5\n6\n7\n8\n9\n</pre> In\u00a0[13]: Copied! <pre>for i in range(2, 10, 2):\n    print(i)\n</pre> for i in range(2, 10, 2):     print(i) <pre>2\n4\n6\n8\n</pre> In\u00a0[14]: Copied! <pre>for i in range(10, 1, -2):\n    print(i)\n</pre> for i in range(10, 1, -2):     print(i) <pre>10\n8\n6\n4\n2\n</pre> In\u00a0[15]: Copied! <pre>numbers_list = []\nfor i in range(1, 101):\n    numbers_list.append(i)\n</pre> numbers_list = [] for i in range(1, 101):     numbers_list.append(i) In\u00a0[16]: Copied! <pre>nums_list = list(range(1, 101))\n</pre> nums_list = list(range(1, 101)) In\u00a0[17]: Copied! <pre>numbers_list = [1, 2, 3, 4, 5, 6, 7,]\n</pre> numbers_list = [1, 2, 3, 4, 5, 6, 7,] In\u00a0[18]: Copied! <pre># 5. Loop control: break, continue, pass\n# break example\nfor i in range(5):\n    if i == 3:\n        break\n    print(f\"Break example: {i}\")\n</pre> # 5. Loop control: break, continue, pass # break example for i in range(5):     if i == 3:         break     print(f\"Break example: {i}\")  <pre>Break example: 0\nBreak example: 1\nBreak example: 2\n</pre> In\u00a0[19]: Copied! <pre># continue example\nfor i in range(5):\n    if i == 2:\n        continue\n    print(\"Continue example:\", i)\n</pre> # continue example for i in range(5):     if i == 2:         continue     print(\"Continue example:\", i)  <pre>Continue example: 0\nContinue example: 1\nContinue example: 3\nContinue example: 4\n</pre> In\u00a0[20]: Copied! <pre># range()\nfor i in range(1, 6):\n    print(i)\n</pre> # range() for i in range(1, 6):     print(i) <pre>1\n2\n3\n4\n5\n</pre> In\u00a0[21]: Copied! <pre>for i in range(1, 10, 2):\n    print(i)\n</pre> for i in range(1, 10, 2):     print(i) <pre>1\n3\n5\n7\n9\n</pre> In\u00a0[22]: Copied! <pre>for i in range(10, 1, -1):\n    print(i)\n</pre> for i in range(10, 1, -1):     print(i) <pre>10\n9\n8\n7\n6\n5\n4\n3\n2\n</pre> In\u00a0[23]: Copied! <pre>colors = [\"red\", \"green\", \"blue\"]\nfor index, color in enumerate(colors):\n    print(f\"{index} : {color}\")\n</pre> colors = [\"red\", \"green\", \"blue\"] for index, color in enumerate(colors):     print(f\"{index} : {color}\")  <pre>0 : red\n1 : green\n2 : blue\n</pre> In\u00a0[24]: Copied! <pre>colors = [\"red\", \"green\", \"blue\"]\nfor index, color in enumerate(colors, start=2):\n    print(f\"{index} : {color}\")\n</pre> colors = [\"red\", \"green\", \"blue\"] for index, color in enumerate(colors, start=2):     print(f\"{index} : {color}\")  <pre>2 : red\n3 : green\n4 : blue\n</pre> In\u00a0[25]: Copied! <pre># enumerate()\ncolors = [\"red\", \"green\", \"blue\"]\nfor index, color in enumerate(colors):\n    print(f\"Index {index} has color {color}\")\n</pre> # enumerate() colors = [\"red\", \"green\", \"blue\"] for index, color in enumerate(colors):     print(f\"Index {index} has color {color}\") <pre>Index 0 has color red\nIndex 1 has color green\nIndex 2 has color blue\n</pre> In\u00a0[26]: Copied! <pre>input_list = [1, 23, 983, 2923, 83, 85, 98, 20, 1]\noutput_list = []\nfor num in input_list:\n    if num % 2 == 0:\n        output_list.append(num)\n\nprint(output_list)\n</pre> input_list = [1, 23, 983, 2923, 83, 85, 98, 20, 1] output_list = [] for num in input_list:     if num % 2 == 0:         output_list.append(num)  print(output_list) <pre>[98, 20]\n</pre> In\u00a0[27]: Copied! <pre>word = 'banana'\ncounter_dictionary = {}\n\nfor char in word:\n    if char not in counter_dictionary:\n        counter_dictionary[char] = 1\n    elif char in counter_dictionary:\n        counter_dictionary[char] += 1\n\nprint(counter_dictionary)\n</pre> word = 'banana' counter_dictionary = {}  for char in word:     if char not in counter_dictionary:         counter_dictionary[char] = 1     elif char in counter_dictionary:         counter_dictionary[char] += 1  print(counter_dictionary) <pre>{'b': 1, 'a': 3, 'n': 2}\n</pre> In\u00a0[28]: Copied! <pre>'cocot' in ['apple', 'fruites', 'coco', 'mike']\n</pre> 'cocot' in ['apple', 'fruites', 'coco', 'mike'] Out[28]: <pre>False</pre> In\u00a0[29]: Copied! <pre>numbers = [3, 6, 8, 9, 2]\n\noutput_list = []\nfor number in numbers:\n    output_list.append(number ** 2)\n</pre> numbers = [3, 6, 8, 9, 2]  output_list = [] for number in numbers:     output_list.append(number ** 2) In\u00a0[30]: Copied! <pre>numbers = [3, 6, 8, 9, 2]\n\noutput_list = [number**2 for number in numbers]\nprint(output_list)\n</pre> numbers = [3, 6, 8, 9, 2]  output_list = [number**2 for number in numbers] print(output_list) <pre>[9, 36, 64, 81, 4]\n</pre> In\u00a0[31]: Copied! <pre>print(output_list)\n</pre> print(output_list) <pre>[9, 36, 64, 81, 4]\n</pre> In\u00a0[32]: Copied! <pre>input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]\n\noutput_list = []\nfor pair in input_list:\n    if pair[0] &lt; pair[1]:\n        output_list.append(pair)\n\nprint(output_list)\n</pre> input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]  output_list = [] for pair in input_list:     if pair[0] &lt; pair[1]:         output_list.append(pair)  print(output_list) <pre>[(2, 5), (3, 7)]\n</pre> In\u00a0[33]: Copied! <pre>input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]\n\n\n[pair for pair in input_list if pair[0] &lt; pair[1]]\n</pre> input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]   [pair for pair in input_list if pair[0] &lt; pair[1]] Out[33]: <pre>[(2, 5), (3, 7)]</pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#conditionals-and-loops","title":"Conditionals and Loops\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#if-elif-and-else-and-indentation","title":"if, elif and else and Indentation\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#conditional-statement-using-logical-operator-and-or-not","title":"Conditional statement using logical operator (and, or, not)\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#identityis-vs-equality","title":"Identity(is) vs Equality(==)\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#ternary-operator","title":"Ternary Operator\u00b6","text":"<ul> <li>The ternary operator in Python allows us to perform conditional checks and assign values or perform operations on a single line.</li> </ul> <pre><code>x = a if condition else b\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#1-check-even-or-odd","title":"1. Check Even or Odd\u00b6","text":"<p>Write a program that takes an integer input from the user and checks if it is even or odd.</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#2-check-age-category","title":"2. Check Age Category\u00b6","text":"<p>Write a program that asks for a person's age and prints:</p> <ul> <li>\"Child\" if age &lt; 13</li> <li>\"Teenager\" if 13 &lt;= age &lt; 20</li> <li>\"Adult\" if age &gt;= 20</li> </ul>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#3-write-a-one-liner-using-a-ternary-operator-to-assign-a-grade-based-on-a-students-score","title":"3. Write a one-liner using a ternary operator to assign a grade based on a student's score.\u00b6","text":"<p>Given a variable score (an integer from 0 to 100), write a one-liner to assign:</p> <p>\"Pass\" if the score is 40 or above</p> <p>\"Fail\" if the score is below 40</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#loops","title":"Loops\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#range","title":"Range\u00b6","text":"<pre><code>range(start, stop, step)\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#enumerate","title":"Enumerate\u00b6","text":"<pre><code>enumerate(iterable, start) \n</code></pre> <p>default value for start = 0</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#3-print-multiplication-table-for-loop","title":"3. Print Multiplication Table (for loop)\u00b6","text":"<p>Print the multiplication table of a number entered by the user (from 1 to 10). Print in the following format. Use f-string in this case</p> <p>Input = 2</p> <p>Output:</p> <pre><code>2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n....\n...\n\n2 * 10 = 20\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#4-sum-of-first-n-numbers-while-loop","title":"4. Sum of First N Numbers (while loop)\u00b6","text":"<p>Ask the user for a number n and compute the sum of the first n natural numbers using a while loop.</p> <p>Input : 5</p> <p>Output : 15</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#5-write-a-program-that-takes-a-string-input-from-the-user-and-uses-a-dictionary-to-count-how-many-times-each-character-appears-in-the-string-use-a-loop-to-iterate-over-the-string","title":"5. Write a program that takes a string input from the user and uses a dictionary to count how many times each character appears in the string. Use a loop to iterate over the string.\u00b6","text":"<p>Example:</p> <p>Input: \"banana\"</p> <p>Output:</p> <pre><code>{'b': 1, 'a': 3, 'n': 2}\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#6-filter-out-all-even-numbers-in-a-list","title":"6. Filter out All Even Numbers in a List\u00b6","text":"<p>Write a program that takes a list of integers and uses a loop to create a new list containing only the even numbers from the original list. Then print the new list.</p> <p>Example:</p> <pre><code>Input: [1, 4, 7, 8, 10, 3, 6]\n</code></pre> <pre><code>\nOutput:\n[4, 8, 10, 6]\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#list-comprehension","title":"List Comprehension\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#1-given-a-list-of-words-create-a-list-with-each-word-capitalized-use-list-comprehension","title":"1. Given a list of words, create a list with each word capitalized. Use List Comprehension.\u00b6","text":"<p>Note: Use string.title() function to capitalize</p> <pre><code>input_word_list = ['apple', 'banana', 'coco']\n\noutput_word_list = ['Apple', 'Banana', 'Coco]\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#2-generate-pairs-of-numbers-i-j-where-i-and-j-are-from-1-to-10-but-only-where-i-j-use-list-comprehension","title":"2. Generate pairs of numbers (i, j) where i and j are from 1 to 10, but only where i &lt; j. Use List Comprehension\u00b6","text":"<p>Input: [(2, 5), (5, 2), (3, 7), (8, 2)]</p> <p>Output : [(2, 5), (3, 7)]</p>"},{"location":"chapter_5_functions/5_functions_tutorial/","title":"Python Functions Tutorial","text":"<ul> <li>Functions are defined using the <code>def</code> keyword.</li> <li>Parameters are inputs to functions.</li> <li><code>return</code> sends back a result from the function.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>def greet(name):\n    greeting_sentence = f\"Hello, {name}!\" \n    return greeting_sentence\n\ngreeting_sentence = greet(\"Alice\")\nprint(greeting_sentence)\n</pre> def greet(name):     greeting_sentence = f\"Hello, {name}!\"      return greeting_sentence  greeting_sentence = greet(\"Alice\") print(greeting_sentence) <pre>Hello, Alice!\n</pre> In\u00a0[4]: Copied! <pre>def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False \n\nnumber = 5\nis_even(number)\n</pre> def is_even(n):     if n % 2 == 0:         return True     else:         return False   number = 5 is_even(number) Out[4]: <pre>False</pre> In\u00a0[5]: Copied! <pre>def sqaure_cube(number_list):\n    print(number_list)\n\nnum_list = [1, 2, 6, 5, 8, 2]\nsqaure_cube(num_list)\n</pre> def sqaure_cube(number_list):     print(number_list)  num_list = [1, 2, 6, 5, 8, 2] sqaure_cube(num_list) <pre>[1, 2, 6, 5, 8, 2]\n</pre> In\u00a0[\u00a0]: Copied! <pre>grades_dictionary = {\n    'Alice': [85, 90, 78],\n    'Bob': [70, 80, 65],\n    'Charlie': [100, 95, 90]\n}\n\noutput_dictionary = {}\n\nfor grade in grades_dictionary.items():\n    student_name, students_grades = grade \n    student_average_grade = sum(students_grades) / len(students_grades)\n\n    output_dictionary[student_name] = student_average_grade\n\nprint(output_dictionary)\n</pre> grades_dictionary = {     'Alice': [85, 90, 78],     'Bob': [70, 80, 65],     'Charlie': [100, 95, 90] }  output_dictionary = {}  for grade in grades_dictionary.items():     student_name, students_grades = grade      student_average_grade = sum(students_grades) / len(students_grades)      output_dictionary[student_name] = student_average_grade  print(output_dictionary) <pre>{'Alice': 84.33333333333333, 'Bob': 71.66666666666667, 'Charlie': 95.0}\n</pre> In\u00a0[11]: Copied! <pre>def averageGrades(grades_dictionary):\n    output_dictionary = {}\n\n    for grade in grades_dictionary.items():\n        student_name, students_grades = grade \n        student_average_grade = sum(students_grades) / len(students_grades)\n\n        output_dictionary[student_name] = student_average_grade\n\n    return output_dictionary\n</pre> def averageGrades(grades_dictionary):     output_dictionary = {}      for grade in grades_dictionary.items():         student_name, students_grades = grade          student_average_grade = sum(students_grades) / len(students_grades)          output_dictionary[student_name] = student_average_grade      return output_dictionary In\u00a0[13]: Copied! <pre>grades_dictionary = {\n    'Alice': [85, 90, 78],\n    'Bob': [70, 80, 65],\n    'Charlie': [100, 95, 90]\n}\n\naverage_grades_dictionary = averageGrades(grades_dictionary)\nprint(average_grades_dictionary)\n</pre> grades_dictionary = {     'Alice': [85, 90, 78],     'Bob': [70, 80, 65],     'Charlie': [100, 95, 90] }  average_grades_dictionary = averageGrades(grades_dictionary) print(average_grades_dictionary) <pre>{'Alice': 84.33333333333333, 'Bob': 71.66666666666667, 'Charlie': 95.0}\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[5]: Copied! <pre>def wordCounter(words):\n    output_dictionary = {}\n\n    for w in words:\n        if w not in output_dictionary.keys():\n            output_dictionary[w] = 1\n        else:\n            output_dictionary[w] = output_dictionary[w] + 1\n    \n    return output_dictionary\n</pre> def wordCounter(words):     output_dictionary = {}      for w in words:         if w not in output_dictionary.keys():             output_dictionary[w] = 1         else:             output_dictionary[w] = output_dictionary[w] + 1          return output_dictionary In\u00a0[6]: Copied! <pre>words = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n\ncounter_dictionary = wordCounter(words)\nprint(counter_dictionary)\n</pre> words = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']  counter_dictionary = wordCounter(words) print(counter_dictionary) <pre>{'apple': 3, 'banana': 2, 'orange': 1}\n</pre> <ul> <li>Default parameters are used when an argument is not passed.</li> <li>Keyword arguments allow passing parameters by name.</li> <li>Docstrings are string literals used to describe functions.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>'''\nthis is a \nmultiline\nstring\n'''\n</pre> ''' this is a  multiline string ''' In\u00a0[\u00a0]: Copied! <pre>def power(base, exponent=2):\n    ''' \n    base is raised to the power of exponent\n\n    Input: \n        base : \n        exponent:\n    \n    Output:\n        base ** exponent is the output of the function\n    '''\n    return base ** exponent\n\nprint(power(3))\npower(2, 3)\noutup_number = power(\n    base = 10,\n    exponent=2\n)\nprint(outup_number)\n</pre> def power(base, exponent=2):     '''      base is raised to the power of exponent      Input:          base :          exponent:          Output:         base ** exponent is the output of the function     '''     return base ** exponent  print(power(3)) power(2, 3) outup_number = power(     base = 10,     exponent=2 ) print(outup_number) <pre>9\n100\n</pre> In\u00a0[28]: Copied! <pre>help(power)\n</pre> help(power) <pre>Help on function power in module __main__:\n\npower(base, exponent=2)\n    base is raised to the power of exponent\n\n    Input:\n        base :\n        exponent:\n\n    Output:\n        base ** exponent is the output of the function\n\n</pre> In\u00a0[\u00a0]: Copied! <pre>print(power.__doc__)\n</pre> print(power.__doc__) In\u00a0[3]: Copied! <pre>help(power)\n</pre> help(power) <pre>Help on function power in module __main__:\n\npower(base, exponent=2)\n    Returns the base raised to the power of exponent.\n\n</pre> In\u00a0[30]: Copied! <pre>def greet(name, message = 'Welcome!'):\n    greeting_sentence = f'{message} {name}'\n    print(greeting_sentence)\n\ngreet('Alice')\ngreet('Charlie', message = 'Thank You!')\n</pre> def greet(name, message = 'Welcome!'):     greeting_sentence = f'{message} {name}'     print(greeting_sentence)  greet('Alice') greet('Charlie', message = 'Thank You!') <pre>Welcome! Alice\nThank You! Charlie\n</pre> <ul> <li><code>*args</code> allows variable number of positional arguments.</li> <li><code>**kwargs</code> allows variable number of keyword arguments.</li> </ul> In\u00a0[31]: Copied! <pre>def tempFunction1(*args):\n    print(args)\n    print(type(args))\n\ntempFunction1(1, 2, 4, 5, 'Hello')\n</pre> def tempFunction1(*args):     print(args)     print(type(args))  tempFunction1(1, 2, 4, 5, 'Hello') <pre>(1, 2, 4, 5, 'Hello')\n&lt;class 'tuple'&gt;\n</pre> In\u00a0[8]: Copied! <pre>def tempFunction2(**kwargs):\n    print(kwargs)\n    print(kwargs['name'])\n\ntempFunction2(name = 'nirajan', location = 'bkt')        \n</pre> def tempFunction2(**kwargs):     print(kwargs)     print(kwargs['name'])  tempFunction2(name = 'nirajan', location = 'bkt')         <pre>{'name': 'nirajan', 'location': 'bkt'}\nnirajan\n</pre> In\u00a0[4]: Copied! <pre>def show_args(*args, **kwargs):\n    print(\"Positional arguments:\", args)\n    print(\"Keyword arguments:\", kwargs)\n\nshow_args(1, 2, 3, name=\"Alice\", age=25)\n</pre>  def show_args(*args, **kwargs):     print(\"Positional arguments:\", args)     print(\"Keyword arguments:\", kwargs)  show_args(1, 2, 3, name=\"Alice\", age=25)  <pre>Positional arguments: (1, 2, 3)\nKeyword arguments: {'name': 'Alice', 'age': 25}\n</pre> In\u00a0[20]: Copied! <pre>def func3(a, *args, **kwargs):\n    print(a)\n    print(args)\n    print(kwargs)\n\n\nfunc3(1, 'apple', 'mango', fruit = 'grapes', city = 'pokhara')\n</pre> def func3(a, *args, **kwargs):     print(a)     print(args)     print(kwargs)   func3(1, 'apple', 'mango', fruit = 'grapes', city = 'pokhara') <pre>1\n('apple', 'mango')\n{'fruit': 'grapes', 'city': 'pokhara'}\n</pre> In\u00a0[32]: Copied! <pre>def sum_all(*numbers):\n    print(sum(numbers))\n\nsum_all(1, 2, 3, 5, 2, 3)\n</pre> def sum_all(*numbers):     print(sum(numbers))  sum_all(1, 2, 3, 5, 2, 3) <pre>16\n</pre> <ul> <li>Local: Defined inside a function.</li> <li>Global: Defined at the top level.</li> </ul> In\u00a0[39]: Copied! <pre>x = 10\n</pre> x = 10 In\u00a0[41]: Copied! <pre>def func2():\n    global x\n    print(x)\n\nfunc2()\n</pre> def func2():     global x     print(x)  func2() <pre>10\n</pre> In\u00a0[38]: Copied! <pre>def func1():\n    x = 20\n    print('inside function : ', x)\n\nfunc1()\nprint('outside function : ', x)\n</pre> def func1():     x = 20     print('inside function : ', x)  func1() print('outside function : ', x)   <pre>inside function :  20\noutside function :  10\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[4]: Copied! <pre>x = 'this is a global variable'\n\ndef func1():\n    x = 'this is a local variable'\n    print(x) ## --&gt; local variable\n\n\nfunc1()\nprint(x) # --&gt; global variable\n</pre> x = 'this is a global variable'  def func1():     x = 'this is a local variable'     print(x) ## --&gt; local variable   func1() print(x) # --&gt; global variable  <pre>this is a local variable\nthis is a global variable\n</pre> <ul> <li>Functions are defined using <code>def</code> and are independent.</li> <li>Methods are functions associated with objects (e.g., strings, lists).</li> </ul> In\u00a0[\u00a0]: Copied! <pre># Function\ndef add(a, b):\n    return a + b\n\n# Method (associated with string object)\ntext = \"hello\"\nprint(text.upper())\n\nprint(add(5, 10))\n</pre> # Function def add(a, b):     return a + b  # Method (associated with string object) text = \"hello\" print(text.upper())  print(add(5, 10))  In\u00a0[42]: Copied! <pre>list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\nintersection_list = []\n\nfor number in list1:\n    if number in list2:\n        intersection_list.append(number)\n\nprint(intersection_list)\n</pre> list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8]  intersection_list = []  for number in list1:     if number in list2:         intersection_list.append(number)  print(intersection_list) <pre>[4, 5]\n</pre> In\u00a0[\u00a0]: Copied! <pre>lst = [1, 2, 3, 4, 5, 6, 7]\nk = 3\n</pre> lst = [1, 2, 3, 4, 5, 6, 7] k = 3   Out[\u00a0]: <pre>['mango', 'apple']</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#python-functions-tutorial","title":"Python Functions Tutorial\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#1-function-definition-parameters-and-return-statements","title":"1. Function Definition, Parameters, and Return Statements\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#exercise-1","title":"Exercise 1\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q1-write-a-function-area_of_rectanglelength-width-that-returns-the-area-of-a-rectangle","title":"Q1 : Write a function area_of_rectangle(length, width) that returns the area of a rectangle.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q2-create-a-function-is_evennumber-that-returns-true-if-the-number-is-even-otherwise-false","title":"Q2 : Create a function is_even(number) that returns True if the number is even, otherwise False.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q3-create-a-function-that-takes-a-list-of-number-as-parameter-and-return-the-list-with-sqaure-of-even-numbers-and-cube-of-odd-numbers-the-order-of-number-should-be-preserved","title":"Q3 : Create a function that takes a list of number as parameter, and return the list with sqaure of even numbers and cube of odd numbers. The order of number should be preserved.\u00b6","text":"<pre><code>Input : [5, 3, 6, 7, 1, 2]\n\nOutput : [125, 27, 36, 343, 1, 4]\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#q4-write-a-python-function-that-takes-a-list-of-words-as-input-and-returns-a-dictionary-showing-how-many-times-each-word-appears-in-the-list","title":"Q4 : Write a Python function that takes a list of words as input and returns a dictionary showing how many times each word appears in the list.\u00b6","text":"<pre><code>Input : \n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n\nOutput : \n\n{'apple': 3, 'banana': 2, 'orange': 1}\n\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#q5-write-a-python-function-that-calculates-the-average-grade-for-each-student-given-a-dictionary-of-their-scores","title":"Q5 : Write a Python function that calculates the average grade for each student given a dictionary of their scores.\u00b6","text":"<p>Hint : sum([1, 2, 3]) provides sum of a list</p> <pre><code>input : \n\ngrades = {\n    'Alice': [85, 90, 78],\n    'Bob': [70, 80, 65],\n    'Charlie': [100, 95, 90]\n}\n\n\noutput : \n\n{\n    'Alice': 84.33,\n    'Bob': 71.67,\n    'Charlie': 95.0\n}\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#2-default-parameters-keyword-arguments-and-docstrings","title":"2. Default Parameters, Keyword Arguments, and Docstrings\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#exercise-2","title":"Exercise 2\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q3-write-a-function-greetname-messagewelcome-that-prints-a-greeting-demonstrate-it-with-default-and-keyword-arguments","title":"Q3 : Write a function greet(name, message=\"Welcome!\") that prints a greeting. Demonstrate it with default and keyword arguments.\u00b6","text":"<pre><code>Output : Welcome! Alice\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#q4-define-a-function-multiplya-b2-with-a-docstring-call-it-using-positional-and-keyword-arguments","title":"Q4 : Define a function multiply(a, b=2) with a docstring. Call it using positional and keyword arguments.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#3-args-and-kwargs","title":"3. *args and **kwargs\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q5-write-a-function-sum_allnumbers-that-returns-the-sum-of-all-arguments-passed-to-it","title":"Q5 : Write a function sum_all(*numbers) that returns the sum of all arguments passed to it.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q6-create-a-function-print_student_detailsdetails-that-prints-each-key-value-pair-passed-as-keyword-arguments","title":"Q6 : Create a function print_student_details(**details) that prints each key-value pair passed as keyword arguments.\u00b6","text":"<p>Hint: Use dict.items() function</p> <p>Function call:</p> <pre><code>print_student_details(name=\"Sita\", age=20, grade=\"A\", address=\"Kathmandu\")\n</code></pre> <p>Output:</p> <pre><code>name: Sita\nage: 20\ngrade: A\naddress: Janakpur\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#4-scope-local-global-and-nonlocal","title":"4. Scope: Local, Global, and Nonlocal\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#5-methods-vs-functions","title":"5. Methods vs. Functions\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#problem-solving-exercise","title":"Problem Solving Exercise\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q7-common-elements-between-two-lists","title":"Q7: Common Elements Between Two Lists\u00b6","text":"<p>Write a function common_elements(list1, list2) that returns a list of elements common to both lists.</p>"},{"location":"chapter_5_functions/5_functions_tutorial/#q8-second-largest-element","title":"Q8: Second Largest Element\u00b6","text":"<p>Write a function second_largest(lst) that returns the second largest number in a list.</p>"},{"location":"chapter_5_functions/5_functions_tutorial/#q9-rotate-list-elements","title":"Q9: Rotate List Elements\u00b6","text":"<p>Write a function rotate_list(lst, k) that rotates the list k steps to the right.</p> <p>Input:</p> <pre><code>lst = [1, 2, 3, 4, 5, 6, 7]\nk = 3\n</code></pre> <p>Output:</p> <pre><code>[5, 6, 7, 1, 2, 3, 4]\n</code></pre>"},{"location":"project/Python_Projects/","title":"10 Simple Python Projects for Beginners","text":""},{"location":"project/Python_Projects/#project-1-contact-book","title":"Project 1: Contact Book","text":"<p>Create a menu-driven program to manage a contact book that stores names and phone numbers in a dictionary. Implement functions to add a contact, remove a contact, display all contacts, and search for a contact by name. Include error handling for invalid phone numbers (e.g., non-digits) and save contacts to a file for persistence. Show the results in a Streamlit app where users can input a name and phone number, select actions (add, remove, search, display), and view the output.</p> <p>Python Code:</p> <pre><code># contact_book.py\ndef add_contact(contacts, name, phone):\n    try:\n        if not phone.isdigit():\n            raise ValueError(\"Phone number must be digits\")\n        contacts[name] = phone\n        save_contacts(contacts)\n        return f\"Added {name}\"\n    except ValueError as e:\n        return str(e)\n\ndef remove_contact(contacts, name):\n    try:\n        return contacts.pop(name, f\"{name} not found\")\n    except KeyError:\n        return f\"{name} not found\"\n\ndef display_contacts(contacts):\n    return \"\\n\".join([f\"{name}: {phone}\" for name, phone in contacts.items()]) if contacts else \"No contacts\"\n\ndef search_contact(contacts, name):\n    return contacts.get(name, f\"{name} not found\")\n\ndef save_contacts(contacts):\n    with open(\"contacts.txt\", \"w\") as f:\n        for name, phone in contacts.items():\n            f.write(f\"{name},{phone}\\n\")\n\ndef load_contacts():\n    contacts = {}\n    try:\n        with open(\"contacts.txt\", \"r\") as f:\n            for line in f:\n                name, phone = line.strip().split(\",\")\n                contacts[name] = phone\n    except FileNotFoundError:\n        pass\n    return contacts\n\nif __name__ == \"__main__\":\n    contacts = load_contacts()\n    print(add_contact(contacts, \"Alice\", \"1234567890\"))\n    print(display_contacts(contacts))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for name and phone, <code>st.selectbox</code> for actions (add, remove, search, display), and <code>st.write</code> to show results. Save contacts to a file for persistence.</p>"},{"location":"project/Python_Projects/#project-2-to-do-list-manager","title":"Project 2: To-Do List Manager","text":"<p>Create a program to manage a to-do list using a list of dictionaries, where each task has a description and a completion status. Implement functions to add a task, remove a task by index, mark a task as complete, and display all tasks. Save tasks to a file for persistence and handle errors for invalid indices. Show the results in a Streamlit app where users can input tasks, select tasks to mark complete or remove, and view the task list. Python Code:</p> <pre><code># todo_list.py\ndef add_task(tasks, task):\n    tasks.append({\"task\": task, \"completed\": False})\n    save_tasks(tasks)\n    return f\"Added {task}\"\n\ndef remove_task(tasks, index):\n    try:\n        task = tasks.pop(index)\n        save_tasks(tasks)\n        return f\"Removed {task['task']}\"\n    except IndexError:\n        return \"Invalid index\"\n\ndef complete_task(tasks, index):\n    try:\n        tasks[index][\"completed\"] = True\n        save_tasks(tasks)\n        return f\"Completed {tasks[index]['task']}\"\n    except IndexError:\n        return \"Invalid index\"\n\ndef display_tasks(tasks):\n    return \"\\n\".join([f\"{i}: {t['task']} {'(Done)' if t['completed'] else ''}\" for i, t in enumerate(tasks)]) if tasks else \"No tasks\"\n\ndef save_tasks(tasks):\n    with open(\"tasks.txt\", \"w\") as f:\n        for t in tasks:\n            f.write(f\"{t['task']},{t['completed']}\\n\")\n\ndef load_tasks():\n    tasks = []\n    try:\n        with open(\"tasks.txt\", \"r\") as f:\n            for line in f:\n                task, completed = line.strip().split(\",\")\n                tasks.append({\"task\": task, \"completed\": completed == \"True\"})\n    except FileNotFoundError:\n        pass\n    return tasks\n\nif __name__ == \"__main__\":\n    tasks = load_tasks()\n    print(add_task(tasks, \"Buy groceries\"))\n    print(display_tasks(tasks))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for task input, <code>st.number_input</code> for task index, <code>st.button</code> for actions (add, remove, complete, display), and <code>st.write</code> to show the task list.</p>"},{"location":"project/Python_Projects/#project-3-simple-calculator","title":"Project 3: Simple Calculator","text":"<p>Create a calculator program that performs basic operations (add, subtract, multiply, divide) using separate functions. Include error handling for division by zero and invalid operations. Show the results in a Streamlit app where users can input two numbers, select an operation, and view the result. Python Code:</p> <pre><code># calculator.py\ndef add(a, b): return a + b\ndef subtract(a, b): return a - b\ndef multiply(a, b): return a * b\ndef divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Cannot divide by zero\"\n\ndef calculate(operation, a, b):\n    operations = {\"add\": add, \"subtract\": subtract, \"multiply\": multiply, \"divide\": divide}\n    return operations.get(operation, lambda x, y: \"Invalid operation\")(a, b)\n\nif __name__ == \"__main__\":\n    print(calculate(\"add\", 5, 3))\n    print(calculate(\"divide\", 10, 0))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.number_input</code> for two numbers, <code>st.selectbox</code> for operation (add, subtract, multiply, divide), <code>st.button</code> to calculate, and <code>st.write</code> to display the result.</p>"},{"location":"project/Python_Projects/#project-4-number-guessing-game","title":"Project 4: Number Guessing Game","text":"<p>Create a number guessing game where the program generates a random number between 1 and 100, and the user guesses it. Provide feedback (too high, too low, or correct) and track the number of attempts. Handle invalid inputs (e.g., non-numeric guesses). Show the results in a Streamlit app where users can input guesses and see feedback and attempt count. Python Code:</p> <pre><code># number_guessing.py\nimport random\n\ndef guess_game(guess, number, attempts):\n    try:\n        guess = int(guess)\n        attempts += 1\n        if guess &lt; number:\n            return \"Too low\", attempts\n        elif guess &gt; number:\n            return \"Too high\", attempts\n        else:\n            return f\"Correct! Took {attempts} attempts\", attempts\n    except ValueError:\n        return \"Enter a valid number\", attempts\n\nif __name__ == \"__main__\":\n    number = random.randint(1, 100)\n    attempts = 0\n    guess = input(\"Guess a number (1-100): \")\n    result, attempts = guess_game(guess, number, attempts)\n    print(result)\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.number_input</code> for guesses, <code>st.button</code> to submit guesses, and <code>st.write</code> to show feedback and attempt count. Store the random number and attempts in session state.</p>"},{"location":"project/Python_Projects/#project-5-student-grade-calculator","title":"Project 5: Student Grade Calculator","text":"<p>Create a program to calculate student grades based on numeric scores, assigning letter grades (A: 90\u2013100, B: 80\u201389, C: 70\u201379, D: 60\u201369, F: &lt;60). Store students and scores in a dictionary and use list comprehension to process grades. Show the results in a Streamlit app where users can input student names and scores, and view the grade list. Python Code:</p> <pre><code># grade_calculator.py\ndef calculate_grade(score):\n    if score &gt;= 90: return \"A\"\n    elif score &gt;= 80: return \"B\"\n    elif score &gt;= 70: return \"C\"\n    elif score &gt;= 60: return \"D\"\n    else: return \"F\"\n\ndef process_grades(students):\n    return {name: calculate_grade(score) for name, score in students.items()}\n\nif __name__ == \"__main__\":\n    students = {\"Alice\": 85, \"Bob\": 92, \"Charlie\": 78}\n    print(process_grades(students))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for student names, <code>st.number_input</code> for scores, <code>st.button</code> to add students and display grades, and <code>st.write</code> to show the grade list.</p>"},{"location":"project/Python_Projects/#project-6-word-counter","title":"Project 6: Word Counter","text":"<p>Create a program to count the frequency of words in a text string, ignoring punctuation and case. Use string methods to clean the text and a dictionary to store word counts. Show the results in a Streamlit app where users can input text and view the word frequency dictionary. Python Code:</p> <pre><code># word_counter.py\nimport string\n\ndef count_words(text):\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation)).lower()\n    words = text.split()\n    return {word: words.count(word) for word in set(words)}\n\nif __name__ == \"__main__\":\n    print(count_words(\"Hello world! Hello Python.\"))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_area</code> for text input, <code>st.button</code> to count words, and <code>st.write</code> to display the word frequency dictionary.</p>"},{"location":"project/Python_Projects/#project-7-simple-bank-account","title":"Project 7: Simple Bank Account","text":"<p>Create a bank account class with methods for deposit, withdrawal, and balance checking. Use OOP principles and include error handling for negative amounts and insufficient funds. Show the results in a Streamlit app where users can input amounts for deposit or withdrawal and view the balance. Python Code:</p> <pre><code># bank_account.py\nclass BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n\n    def deposit(self, amount):\n        try:\n            if amount &lt;= 0:\n                raise ValueError(\"Amount must be positive\")\n            self.balance += amount\n            return f\"Deposited {amount}, new balance: {self.balance}\"\n        except ValueError as e:\n            return str(e)\n\n    def withdraw(self, amount):\n        try:\n            if amount &lt;= 0:\n                raise ValueError(\"Amount must be positive\")\n            if amount &gt; self.balance:\n                raise ValueError(\"Insufficient funds\")\n            self.balance -= amount\n            return f\"Withdrew {amount}, new balance: {self.balance}\"\n        except ValueError as e:\n            return str(e)\n\n    def get_balance(self):\n        return f\"Balance for {self.owner}: {self.balance}\"\n\nif __name__ == \"__main__\":\n    account = BankAccount(\"Alice\", 100)\n    print(account.deposit(50))\n    print(account.withdraw(30))\n    print(account.get_balance())\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.number_input</code> for amount, <code>st.button</code> for deposit, withdraw, and check balance actions, and <code>st.write</code> to display the results.</p>"},{"location":"project/Python_Projects/#project-8-palindrome-checker","title":"Project 8: Palindrome Checker","text":"<p>Create a function to check if a string is a palindrome, ignoring case and punctuation. Use string methods and a lambda function for text cleaning. Show the results in a Streamlit app where users can input a string and see if it\u2019s a palindrome. Python Code:</p> <pre><code># palindrome.py\ndef is_palindrome(s):\n    clean = lambda x: \"\".join(c.lower() for c in x if c.isalnum())\n    s = clean(s)\n    return s == s[::-1]\n\nif __name__ == \"__main__\":\n    print(is_palindrome(\"A man, a plan, a canal: Panama\"))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for the string, <code>st.button</code> to check, and <code>st.write</code> to display whether the input is a palindrome.</p>"},{"location":"project/Python_Projects/#project-9-expense-tracker","title":"Project 9: Expense Tracker","text":"<p>Create a program to track expenses by category, storing amounts in a dictionary. Implement functions to add expenses and display all expenses, with file I/O for persistence and error handling for negative amounts. Show the results in a Streamlit app where users can input a category and amount, and view the expense summary. Python Code:</p> <pre><code># expense_tracker.py\ndef add_expense(expenses, category, amount):\n    try:\n        if amount &lt;= 0:\n            raise ValueError(\"Amount must be positive\")\n        expenses[category] = expenses.get(category, 0) + amount\n        save_expenses(expenses)\n        return f\"Added {amount} to {category}\"\n    except ValueError as e:\n        return str(e)\n\ndef display_expenses(expenses):\n    return \"\\n\".join([f\"{cat}: {amt}\" for cat, amt in expenses.items()]) if expenses else \"No expenses\"\n\ndef save_expenses(expenses):\n    with open(\"expenses.txt\", \"w\") as f:\n        for cat, amt in expenses.items():\n            f.write(f\"{cat},{amt}\\n\")\n\ndef load_expenses():\n    expenses = {}\n    try:\n        with open(\"expenses.txt\", \"r\") as f:\n            for line in f:\n                cat, amt = line.strip().split(\",\")\n                expenses[cat] = float(amt)\n    except FileNotFoundError:\n        pass\n    return expenses\n\nif __name__ == \"__main__\":\n    expenses = load_expenses()\n    print(add_expense(expenses, \"Food\", 50))\n    print(display_expenses(expenses))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for category, <code>st.number_input</code> for amount, <code>st.button</code> for add and display actions, and <code>st.write</code> to show the expense summary.</p>"},{"location":"project/Python_Projects/#project-10-simple-data-visualizer","title":"Project 10: Simple Data Visualizer","text":"<p>Create a program to visualize a small dataset of student scores using Matplotlib or Seaborn. Use Pandas to store the data as a DataFrame and NumPy for any calculations. Generate a bar plot and save it as an image. Show the results in a Streamlit app where users can input student names and scores, and view the data and plot. Python Code:</p> <pre><code># data_visualizer.py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef visualize_data(data):\n    df = pd.DataFrame(data)\n    plt.figure(figsize=(8, 6))\n    sns.barplot(x=\"Score\", y=\"Student\"; data=df)\n    plt.savefig(\"plot.png\")\n    plt.close()\n    return \"Plot saved as plot.png\"\n\nif __name__ == \"__main__\":\n    data = {\"Student\": [\"Alice\", \"Bob\", \"Charlie\"], \"Score\": [85, 92, 78]}\n    print(visualize_data(data))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for student names, <code>st.number_input</code> for scores, <code>st.button</code> to add data and generate the plot, <code>st.write</code> to show the data, and <code>st.image</code> to display the saved plot.</p>"}]}