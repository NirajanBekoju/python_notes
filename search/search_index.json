{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"chapter_10_file_io/file_handling_csv/","title":"What is a CSV file?","text":"In\u00a0[1]: Copied! <pre>import csv\n</pre> import csv In\u00a0[7]: Copied! <pre>data = [\n    [\"Name\", \"Age\", \"City\"],\n    [\"Nirajan\", 25, \"Kathmandu\"],\n    [\"Aayush\", 24, \"Pokhara\"],\n    [\"Sita\", 23, \"Biratnagar\"]\n]\n\nwith open(\"people.csv\", \"w\", newline='') as file:\n    writer = csv.writer(file)\n    writer.writerows(data)\n</pre> data = [     [\"Name\", \"Age\", \"City\"],     [\"Nirajan\", 25, \"Kathmandu\"],     [\"Aayush\", 24, \"Pokhara\"],     [\"Sita\", 23, \"Biratnagar\"] ]  with open(\"people.csv\", \"w\", newline='') as file:     writer = csv.writer(file)     writer.writerows(data) In\u00a0[8]: Copied! <pre>with open(\"people.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</pre> with open(\"people.csv\", \"r\") as file:     reader = csv.reader(file)     for row in reader:         print(row) <pre>['Name', 'Age', 'City']\n['Nirajan', '25', 'Kathmandu']\n['Aayush', '24', 'Pokhara']\n['Sita', '23', 'Biratnagar']\n</pre> In\u00a0[15]: Copied! <pre>with open(\"people.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    header = next(reader)\n    print(\"Header:\", header)\n    \n    for row in reader:\n        print(row)\n</pre>  with open(\"people.csv\", \"r\") as file:     reader = csv.reader(file)     header = next(reader)     print(\"Header:\", header)          for row in reader:         print(row) <pre>Header: ['Name', 'Age', 'City']\n['Nirajan', '25', 'Kathmandu']\n['Aayush', '24', 'Pokhara']\n['Sita', '23', 'Biratnagar']\n</pre> In\u00a0[16]: Copied! <pre>people = [\n    {\"Name\": \"Nirajan\", \"Age\": 25, \"City\": \"Kathmandu\"},\n    {\"Name\": \"Aayush\", \"Age\": 24, \"City\": \"Pokhara\"},\n    {\"Name\": \"Sita\", \"Age\": 23, \"City\": \"Biratnagar\"}\n]\n\nwith open(\"people_dictionary.csv\", \"w\", newline='') as file:\n    fieldnames = [\"Name\", \"Age\", \"City\"]\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerows(people)\n</pre> people = [     {\"Name\": \"Nirajan\", \"Age\": 25, \"City\": \"Kathmandu\"},     {\"Name\": \"Aayush\", \"Age\": 24, \"City\": \"Pokhara\"},     {\"Name\": \"Sita\", \"Age\": 23, \"City\": \"Biratnagar\"} ]  with open(\"people_dictionary.csv\", \"w\", newline='') as file:     fieldnames = [\"Name\", \"Age\", \"City\"]     writer = csv.DictWriter(file, fieldnames=fieldnames)     writer.writeheader()     writer.writerows(people) In\u00a0[18]: Copied! <pre>with open(\"people_dictionary.csv\", \"r\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        print(row)\n</pre> with open(\"people_dictionary.csv\", \"r\") as file:     reader = csv.DictReader(file)     for row in reader:         print(row) <pre>{'Name': 'Nirajan', 'Age': '25', 'City': 'Kathmandu'}\n{'Name': 'Aayush', 'Age': '24', 'City': 'Pokhara'}\n{'Name': 'Sita', 'Age': '23', 'City': 'Biratnagar'}\n</pre>"},{"location":"chapter_10_file_io/file_handling_csv/#what-is-a-csv-file","title":"What is a CSV file?\u00b6","text":"<ul> <li>CSV stands for Comma-Separated Values.</li> <li>It is a simple text file format used to store tabular data (like a spreadsheet or a database table).</li> <li>Each line in the file represents one row of data.</li> <li>Within each line, values (or fields) are separated by commas (<code>,</code>).</li> </ul>"},{"location":"chapter_10_file_io/file_handling_csv/#structure-of-a-csv-file","title":"Structure of a CSV file\u00b6","text":"<p>Imagine a spreadsheet:</p> Name Age City Alice 30 New York Bob 25 Los Angeles <p>This table would look like this in a CSV file:</p> <pre><code>Name,Age,City\nAlice,30,New York\nBob,25,Los Angele\n</code></pre>"},{"location":"chapter_10_file_io/file_handling_csv/#csv-file-operations-in-python","title":"CSV File Operations in Python\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_csv/#writing-data-to-a-csv-file","title":"Writing Data to a CSV File\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_csv/#reading-data-from-a-csv-file","title":"Reading Data from a CSV File\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_csv/#writing-csv-using-dictwriter","title":"Writing CSV Using <code>DictWriter</code>\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_csv/#reading-csv-using-dictreader","title":"Reading CSV Using <code>DictReader</code>\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_csv/#exercise","title":"Exercise\u00b6","text":"<p>Try the following:</p> <ol> <li>Create a list of dictionaries with data (name, age, favorite subject).</li> <li>Write the data into a file called <code>students.csv</code> using <code>DictWriter</code>.</li> <li>Read it back using <code>DictReader</code> and print only names of students who are older than 20.</li> </ol>"},{"location":"chapter_10_file_io/file_handling_json/","title":"What is JSON?","text":"In\u00a0[1]: Copied! <pre>import json\n</pre> import json In\u00a0[\u00a0]: Copied! <pre>data = {\n    \"name\": \"John\",\n    \"age\": 21,\n    \"hobbies\": [\"Sports\", \"Anime\", \"Chess\"]\n}\n\nwith open(\"sample_json_data.json\", \"w\") as file:\n    json.dump(data, file, indent=4)\n</pre> data = {     \"name\": \"John\",     \"age\": 21,     \"hobbies\": [\"Sports\", \"Anime\", \"Chess\"] }  with open(\"sample_json_data.json\", \"w\") as file:     json.dump(data, file, indent=4) In\u00a0[4]: Copied! <pre>with open(\"sample_json_data.json\", \"r\") as file:\n    loaded_data = json.load(file)\n\nprint(loaded_data)\nprint(type(loaded_data))\n</pre> with open(\"sample_json_data.json\", \"r\") as file:     loaded_data = json.load(file)  print(loaded_data) print(type(loaded_data)) <pre>{'name': 'John', 'age': 21, 'hobbies': ['Sports', 'Anime', 'Chess']}\n&lt;class 'dict'&gt;\n</pre> In\u00a0[6]: Copied! <pre>loaded_data[\"age\"] = 16 ## existing update\nloaded_data[\"city\"] = \"Kathmandu\" ## new update\n\nwith open(\"sample_json_data.json\", \"w\") as file:\n    json.dump(loaded_data, file, indent=4)\n</pre> loaded_data[\"age\"] = 16 ## existing update loaded_data[\"city\"] = \"Kathmandu\" ## new update  with open(\"sample_json_data.json\", \"w\") as file:     json.dump(loaded_data, file, indent=4) In\u00a0[7]: Copied! <pre>{\"language\": \"Python\", \"version\": 3.10}\n</pre> {\"language\": \"Python\", \"version\": 3.10} Out[7]: <pre>{'language': 'Python', 'version': 3.1}</pre> In\u00a0[11]: Copied! <pre>json_string = '{\"language\": \"Python\", \"version\": 3.10}'\npython_data = json.loads(json_string)\n\nprint(python_data)\n</pre> json_string = '{\"language\": \"Python\", \"version\": 3.10}' python_data = json.loads(json_string)  print(python_data) <pre>{'language': 'Python', 'version': 3.1}\n</pre> In\u00a0[8]: Copied! <pre>data = {\"framework\": \"FastAPI\", \"type\": \"web\"}\njson_str = json.dumps(data, indent=2)\n\nprint(json_str)\nprint(type(json_str))\n</pre> data = {\"framework\": \"FastAPI\", \"type\": \"web\"} json_str = json.dumps(data, indent=2)  print(json_str) print(type(json_str)) <pre>{\n  \"framework\": \"FastAPI\",\n  \"type\": \"web\"\n}\n&lt;class 'str'&gt;\n</pre>"},{"location":"chapter_10_file_io/file_handling_json/#what-is-json","title":"What is JSON?\u00b6","text":"<p>JSON stands for JavaScript Object Notation. It\u2019s a lightweight data format used for storing and exchanging data.</p> <p>JSON is a way to organize and structure data so it can be easily read and used by computers and humans.</p>"},{"location":"chapter_10_file_io/file_handling_json/#key-features","title":"Key Features\u00b6","text":"Feature Description Text-based It\u2019s just plain text, easy to read and write. Language-independent Works with many programming languages (Python, JavaScript, etc.) Lightweight Ideal for APIs, configs, data sharing. Structured like objects Uses key-value pairs and arrays for structured data."},{"location":"chapter_10_file_io/file_handling_json/#json-structure","title":"JSON Structure\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#1-objects","title":"1. Objects\u00b6","text":"<p>Represented with curly braces <code>{}</code></p> <pre>{\n  \"name\": \"Nirajan\",\n  \"age\": 25,\n  \"isStudent\": true\n}\n</pre>"},{"location":"chapter_10_file_io/file_handling_json/#json-file-operations-in-python","title":"JSON File Operations in Python\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#writing-data-to-a-json-file","title":"Writing Data to a JSON File\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#reading-data-from-a-json-file","title":"Reading Data from a JSON File\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#modifying-json-data-and-saving","title":"Modifying JSON Data and Saving\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#json-string-python-object","title":"JSON String \u279d Python Object\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#python-object-json-string","title":"Python Object \u279d JSON String\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_json/#exercise","title":"Exercise\u00b6","text":"<p>Try the following:</p> <ol> <li>Create a Python dictionary with your own data (name, age, favorite books).</li> <li>Save it to a file called <code>mydata.json</code>.</li> <li>Read the file back and print the data.</li> <li>Add a new key <code>hobby</code> and update the file.</li> </ol>"},{"location":"chapter_10_file_io/file_handling_text/","title":"File Handling","text":"<pre><code>## open the file\nfile = open('example.txt', mode)\n\n\n## close the file\nfile.close()\n</code></pre> Mode Description <code>'r'</code> Read (default). File must exist. <code>'w'</code> Write. Overwrites existing content or creates a new file. <code>'a'</code> Append. Adds content to the end of file or creates a new file. <code>'x'</code> Exclusive creation. Fails if file exists. <code>'r+'</code> Read and write. File must exist. <code>'w+'</code> Write and read. Overwrites or creates file. <code>'a+'</code> Append and read. Creates if not exists. In\u00a0[20]: Copied! <pre>## open the file\nfile = open('sample.txt', 'r')\nprint(file)\n\n## close the file\nfile.close()\n</pre> ## open the file file = open('sample.txt', 'r') print(file)  ## close the file file.close() <pre>&lt;_io.TextIOWrapper name='sample.txt' mode='r' encoding='UTF-8'&gt;\n</pre> In\u00a0[25]: Copied! <pre>with open('sample.txt', 'r') as file:\n    content = file.read()\n    print(content)\n</pre> with open('sample.txt', 'r') as file:     content = file.read()     print(content) <pre>Hello, \nI am learning Python.\nPython is fun.\n</pre> In\u00a0[1]: Copied! <pre>text = \"\u0928\u092e\u0938\u094d\u0924\u0947\" \nencoded = text.encode('utf-8')      \nprint(type(encoded))\nprint(encoded)\n\n\ndecoded = encoded.decode('utf-8') \nprint(type(decoded))\nprint(decoded)\n</pre> text = \"\u0928\u092e\u0938\u094d\u0924\u0947\"  encoded = text.encode('utf-8')       print(type(encoded)) print(encoded)   decoded = encoded.decode('utf-8')  print(type(decoded)) print(decoded)  <pre>&lt;class 'bytes'&gt;\nb'\\xe0\\xa4\\xa8\\xe0\\xa4\\xae\\xe0\\xa4\\xb8\\xe0\\xa5\\x8d\\xe0\\xa4\\xa4\\xe0\\xa5\\x87'\n&lt;class 'str'&gt;\n\u0928\u092e\u0938\u094d\u0924\u0947\n</pre> In\u00a0[3]: Copied! <pre>with open('sample.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\nprint(type(content))\n</pre> with open('sample.txt', 'r') as file:     content = file.read()     print(content)  print(type(content)) <pre>Python is programming language.\nI am learning python.\nObject Oriented Programming.\n&lt;class 'str'&gt;\n</pre> In\u00a0[4]: Copied! <pre>with open('sample.txt', 'r') as file:\n    line1 = file.readline()\n    line2 = file.readline()\n\n    print(line1)\n    print(line2)\n</pre> with open('sample.txt', 'r') as file:     line1 = file.readline()     line2 = file.readline()      print(line1)     print(line2) <pre>Python is programming language.\n\nI am learning python.\n\n</pre> In\u00a0[5]: Copied! <pre>with open('sample.txt', 'r') as file:\n    lines = file.readlines()\n    print(lines)\n    for line in lines:\n        print(line.strip())\n</pre> with open('sample.txt', 'r') as file:     lines = file.readlines()     print(lines)     for line in lines:         print(line.strip())  <pre>['Python is programming language.\\n', 'I am learning python.\\n', 'Object Oriented Programming.']\nPython is programming language.\nI am learning python.\nObject Oriented Programming.\n</pre> In\u00a0[9]: Copied! <pre>with open('sample.txt', 'w') as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"Writing to a file in Python.\")\n</pre> with open('sample.txt', 'w') as file:     file.write(\"Hello, World!\\n\")     file.write(\"Writing to a file in Python.\")  In\u00a0[46]: Copied! <pre>lines = [\"Apple \\n\", \"Mango \\n\", \"Banana \\n\"]\nwith open('example.txt', 'w') as file:\n    file.writelines(lines)\n</pre> lines = [\"Apple \\n\", \"Mango \\n\", \"Banana \\n\"] with open('example.txt', 'w') as file:     file.writelines(lines) In\u00a0[10]: Copied! <pre>with open('sample.txt', 'a') as file:\n    file.write(\"\\nThis line is appended.\")\n</pre> with open('sample.txt', 'a') as file:     file.write(\"\\nThis line is appended.\") In\u00a0[11]: Copied! <pre>with open('example.txt', 'r+') as file:\n    content = file.read()\n    print(content)\n    \n    file.seek(0)\n    file.write(\"Modified: \" + content)\n</pre> with open('example.txt', 'r+') as file:     content = file.read()     print(content)          file.seek(0)     file.write(\"Modified: \" + content) <pre>Hello, World!\nWriting to a file in Python.\n</pre> In\u00a0[13]: Copied! <pre>try:\n    with open(\"example.txt\", \"x\") as fout:\n        pass\nexcept FileExistsError as e:\n    print(e)\n    # Your error handling goes here\n</pre> try:     with open(\"example.txt\", \"x\") as fout:         pass except FileExistsError as e:     print(e)     # Your error handling goes here <pre>[Errno 17] File exists: 'example.txt'\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_10_file_io/file_handling_text/#file-handling","title":"File Handling\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_text/#utf-8","title":"UTF-8\u00b6","text":"<ul> <li><p>UTF-8 (Unicode Transformation Format - 8-bit) is a character encoding standard used to represent text in computers, especially on the internet.</p> </li> <li><p>It encodes characters from the Unicode character set using 1 to 4 bytes per character.</p> </li> <li><p>Unicode assigns a unique number (called a code point) to every character in every language (e.g., A is U+0041, \u0915 is U+0915).</p> </li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#key-features-of-utf-8","title":"Key features of UTF-8\u00b6","text":"Feature Description Variable-length encoding Uses 1 to 4 bytes depending on the character. Backward compatible ASCII characters (0\u2013127) are the same in UTF-8. Efficient English text is compact (1 byte per character); non-Latin scripts use more. Universally supported Most popular encoding on the web today."},{"location":"chapter_10_file_io/file_handling_text/#reading-from-a-text-file","title":"Reading from a Text file\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_text/#1-read","title":"1. Read()\u00b6","text":"<ul> <li>Reads the entire content as a string.</li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#2-readline","title":"2. readline()\u00b6","text":"<ul> <li>Reads a single line at a time.</li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#3-readlines","title":"3. readlines()\u00b6","text":"<ul> <li>Reads all lines and returns a list of strings.</li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#writing-to-a-text-file","title":"Writing to a text file\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_text/#1-write","title":"1. write()\u00b6","text":"<ul> <li>Writes a string to the file.</li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#2-writelines","title":"2. writelines()\u00b6","text":"<ul> <li>Writes a list of strings to the file.</li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#appending-to-a-text-file","title":"Appending to a Text File\u00b6","text":"<ul> <li>Use mode 'a' or 'a+'.</li> </ul>"},{"location":"chapter_10_file_io/file_handling_text/#reading-and-writing-simultaneously","title":"Reading and Writing Simultaneously\u00b6","text":""},{"location":"chapter_10_file_io/file_handling_text/#useful-file-methods","title":"Useful File Methods\u00b6","text":"Method Description Example Usage <code>read(size)</code> Reads <code>size</code> characters or full if omitted <code>f.read(10)</code> <code>readline()</code> Reads one line <code>f.readline()</code> <code>readlines()</code> Reads all lines as list <code>f.readlines()</code> <code>write(string)</code> Writes a string to file <code>f.write(\"Hello\")</code> <code>writelines()</code> Writes list of strings <code>f.writelines([\"A\\n\", \"B\\n\"])</code> <code>seek(offset)</code> Moves cursor to given byte position <code>f.seek(0)</code> <code>tell()</code> Returns current position <code>f.tell()</code> <code>close()</code> Closes the file <code>f.close()</code> <code>truncate(size)</code> Cuts file to <code>size</code> bytes <code>f.truncate(10)</code>"},{"location":"chapter_11_modules/Modules/","title":"Modules","text":"In\u00a0[\u00a0]: Copied! <pre># utility.py\ndef multiply(num1, num2):\n    return num1*num2\n\ndef divide(num1, num2):\n    return num1/num2\n\n# main.py\nimport utility  # not utility.py\nprint(utility)\nprint(utility.multiply(3, 5))\n</pre> # utility.py def multiply(num1, num2):     return num1*num2  def divide(num1, num2):     return num1/num2  # main.py import utility  # not utility.py print(utility) print(utility.multiply(3, 5)) <p>The way we comunicate between python files is quite simple</p> <p>import &lt;file name&gt;</p> <p>When we use module, we always generate py_cache folder <code>(__pycache__)</code>. After importing modules, we have access to it's function, classes, etc.</p> In\u00a0[\u00a0]: Copied! <pre># Shopping_cart.py\ndef buy(item):\n    cart = []\n    cart.append(item)\n    return cart\n\n\n# main.py\nimport utility\nimport shopping.shopping_cart\n\nprint(shopping.shopping_cart.buy('apple'))\n</pre> # Shopping_cart.py def buy(item):     cart = []     cart.append(item)     return cart   # main.py import utility import shopping.shopping_cart  print(shopping.shopping_cart.buy('apple')) <p>We can also import modules and functions as:</p> In\u00a0[\u00a0]: Copied! <pre>from utility import multiply, divide\nfrom shopping import shopping_Cart  # This is more useful due to ambiguity\n</pre> from utility import multiply, divide from shopping import shopping_Cart  # This is more useful due to ambiguity <p>Instead of importing function, importing modules is more feasible.</p> <p>For example: Shopping cart has buy function and Utility has also buy function. If we import buy the it gets overidden.</p> In\u00a0[\u00a0]: Copied! <pre>from utility import * # This means import everything.\n</pre> from utility import * # This means import everything. In\u00a0[\u00a0]: Copied! <pre>print(__name__) \n\nif __name__ == \"__main__\":\n    pass\n</pre> print(__name__)   if __name__ == \"__main__\":     pass <p>This means only run the code if you are on main file.</p> In\u00a0[\u00a0]: Copied! <pre>from shopping import shopping_cart as cart\n\ncart.buy('apple')\n</pre> from shopping import shopping_cart as cart  cart.buy('apple') In\u00a0[\u00a0]: Copied! <pre># main.py\nimport sys\n\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\n\nprint(num1 + num2)\n</pre> # main.py import sys  num1 = int(sys.argv[1]) num2 = int(sys.argv[2])  print(num1 + num2) <pre><code>**Example:** &gt; python main.py 4 7\n\n**Output:** 11\n</code></pre> In\u00a0[\u00a0]: Copied! <pre># Solution\nimport random\nimport sys\n\nfirst = int(sys.argv[1])\nlast = int(sys.argv[2])\n\nrandom_number = random.randint(first, last)\n\nwhile True:\n    try:\n        number = int(input(f\"Enter number between {first} and {last}?\"))\n        if first &lt;= number &lt;= last:\n            if number == random_number:\n                print(\"Congratulation!!! You guessed the number.\\n\")\n                break\n            else:\n                print(\"Try again!!!\\n\")\n        else:\n            raise ValueError\n    except ValueError:\n        print(f\"Idiot!!! I said number between {first} ad {last}\\n\")\n</pre> # Solution import random import sys  first = int(sys.argv[1]) last = int(sys.argv[2])  random_number = random.randint(first, last)  while True:     try:         number = int(input(f\"Enter number between {first} and {last}?\"))         if first &lt;= number &lt;= last:             if number == random_number:                 print(\"Congratulation!!! You guessed the number.\\n\")                 break             else:                 print(\"Try again!!!\\n\")         else:             raise ValueError     except ValueError:         print(f\"Idiot!!! I said number between {first} ad {last}\\n\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_11_modules/Modules/#modules","title":"Modules\u00b6","text":"<p>Up until now, our entire code has been on one single file.</p> <p>But in real life, this isn't the case. We have a lot of code we can't just have one file with thousands line of code.</p> <p>So, how do we stay origanised?</p> <p>If we have multiple files of python as our project is getting bigger and bigger, there should be the way for us to link all of these files together.</p> <p>\"A module in Python is a file containing Python code (functions, classes, or variables) that can be imported and used in other Python programs. Modules help organize code, promote reusability, and make projects easier to manage.\"</p> <p>Each individual Python file is a modules.</p>"},{"location":"chapter_11_modules/Modules/#package","title":"Package\u00b6","text":"<p>A package is a folder containing modules.</p> <pre><code>Shopping\n    Shopping_cart.py\n    Utility.py\n    __init__.py</code></pre> <p><code>Shopping</code> is a package containing <code>shopping_cart.py</code> and <code>utility.py</code> modules.</p> <p>When creating the package, __init__ should be created. This file can be empty. This initializes the package.</p> <p>Package can be accessed as</p> <p><code>import \\&lt;package-name\\&gt;.\\&lt;module-name\\&gt;</code></p>"},{"location":"chapter_11_modules/Modules/#wildcard-import","title":"Wildcard import\u00b6","text":""},{"location":"chapter_11_modules/Modules/#namename","title":"name(name)\u00b6","text":"<p><code>name</code> simply returns the module name.</p> <p>Note: Main file always return <code>__main__</code> even if the file name is not main.</p>"},{"location":"chapter_11_modules/Modules/#alias","title":"Alias\u00b6","text":"<p>We can also import modules as</p>"},{"location":"chapter_11_modules/Modules/#sys-module","title":"Sys module\u00b6","text":"<p>This module helps to take input parameter from the user along with file wile running from terminal.</p> <p>Syntax: sys.argv[&lt;parameter_index&gt;]</p> <p>Note: First index will always be file name.</p>"},{"location":"chapter_11_modules/Modules/#exercise-build-a-number-guessing-game-using-sys-and-random-modules","title":"Exercise: Build a Number Guessing Game Using <code>sys</code> and <code>random</code> Modules\u00b6","text":"<p>Create a fun number guessing game in Python! Your program will:</p> <ul> <li>Take a range of numbers (e.g., 1 to 10) as input from the command line using the <code>sys</code> module.</li> <li>Use the <code>random</code> module to secretly pick a random number within that range.</li> <li>Ask the user to guess a number and check if it matches the random number.</li> <li>Keep asking for guesses until the user gets it right.</li> <li>If the guess is correct, print: \"Congratulation!!! You guessed the number.\"</li> <li>If the guess is wrong, print: \"Try again!!!\"</li> <li>If the user enters a number outside the range or invalid input (e.g., letters), handle it with a <code>ValueError</code> and print: \"Idiot!!! I said number between [first] and [last].\"</li> </ul> <p>Hint:</p> <pre>import random\nrandom_number = random.randint(first, last)\n</pre>"},{"location":"chapter_11_modules/builtin_modules/datetime_tutorial/","title":"Datetime Module","text":"<p>The <code>datetime</code> module in Python is used to work with dates and times. It provides classes for manipulating both dates and times in both simple and complex ways.</p> In\u00a0[21]: Copied! <pre>from datetime import datetime\n</pre> from datetime import datetime In\u00a0[41]: Copied! <pre>print(datetime.today())\ndatetime.today().weekday()\n</pre> print(datetime.today()) datetime.today().weekday() <pre>2025-06-14 22:14:58.977277\n</pre> Out[41]: <pre>5</pre> In\u00a0[22]: Copied! <pre># Get Current Date and Time\nnow = datetime.now()\nprint(type(now))\nprint(\"Now:\", now)\n</pre> # Get Current Date and Time now = datetime.now() print(type(now)) print(\"Now:\", now) <pre>&lt;class 'datetime.datetime'&gt;\nNow: 2025-06-14 22:07:14.958088\n</pre> In\u00a0[25]: Copied! <pre># 6. Format a DateTime (strftime)\nformatted = now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(\"Formatted:\", formatted)\n</pre> # 6. Format a DateTime (strftime) formatted = now.strftime(\"%Y-%m-%d %H:%M:%S\") print(\"Formatted:\", formatted) <pre>Formatted: 2025-06-14 22:07:14\n</pre> In\u00a0[27]: Copied! <pre># 7. Parse String to DateTime (strptime)\ndate_str = \"2023-06-14 15:30:00\"\ndt = datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\nprint(\"Parsed datetime:\", dt)\n</pre> # 7. Parse String to DateTime (strptime) date_str = \"2023-06-14 15:30:00\" dt = datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\") print(\"Parsed datetime:\", dt) <pre>Parsed datetime: 2023-06-14 15:30:00\n</pre> In\u00a0[35]: Copied! <pre># 8. Date Arithmetic with timedelta\nfrom datetime import timedelta\n\ntoday = datetime.strptime('2025-06-15 10:00', '%Y-%m-%d %H:%M')\n\ntomorrow = today + timedelta(days=1)\nyesterday = today - timedelta(days=1)\n\nprint(\"Tomorrow:\", tomorrow)\nprint(\"Yesterday:\", yesterday)\n</pre> # 8. Date Arithmetic with timedelta from datetime import timedelta  today = datetime.strptime('2025-06-15 10:00', '%Y-%m-%d %H:%M')  tomorrow = today + timedelta(days=1) yesterday = today - timedelta(days=1)  print(\"Tomorrow:\", tomorrow) print(\"Yesterday:\", yesterday) <pre>Tomorrow: 2025-06-16 10:00:00\nYesterday: 2025-06-14 10:00:00\n</pre> In\u00a0[37]: Copied! <pre>### Calculate Hour Difference between two datetime\nfrom datetime import datetime\n\ndt1 = datetime(2025, 6, 14, 8, 30)  \ndt2 = datetime(2025, 6, 14, 15, 45)  \n\n# Calculate the difference\ntime_diff = dt2 - dt1\nprint('Time Difference : ', time_diff)\n\n# Get the difference in hours\nhours_diff = time_diff.total_seconds() / 3600\n\nprint(f\"Difference in hours: {hours_diff:.2f}\")\n</pre> ### Calculate Hour Difference between two datetime from datetime import datetime  dt1 = datetime(2025, 6, 14, 8, 30)   dt2 = datetime(2025, 6, 14, 15, 45)    # Calculate the difference time_diff = dt2 - dt1 print('Time Difference : ', time_diff)  # Get the difference in hours hours_diff = time_diff.total_seconds() / 3600  print(f\"Difference in hours: {hours_diff:.2f}\") <pre>Time Difference :  7:15:00\nDifference in hours: 7.25\n</pre> Code Meaning Example <code>%Y</code> Year (4 digits) 2025 <code>%m</code> Month (01\u201312) 06 <code>%d</code> Day of month 14 <code>%H</code> Hour (24-hour) 15 <code>%M</code> Minute 30 <code>%S</code> Second 45"},{"location":"chapter_11_modules/builtin_modules/datetime_tutorial/#datetime-module","title":"Datetime Module\u00b6","text":""},{"location":"chapter_11_modules/builtin_modules/datetime_tutorial/#commonly-used-datetime-methods","title":"Commonly Used Datetime Methods\u00b6","text":"Method / Attribute Description Example <code>datetime.now()</code> Returns the current local date and time <code>datetime.now()</code> \u2192 <code>2025-06-14 22:00:00</code> <code>datetime.today()</code> Returns the current local date and time (same as <code>now()</code> without tz info) <code>datetime.today()</code> \u2192 <code>2025-06-14 22:00:00</code> <code>datetime.utcnow()</code> Returns the current UTC date and time <code>datetime.utcnow()</code> \u2192 <code>2025-06-14 16:15:30</code> <code>datetime.strptime(date_str, format)</code> Parses a string into a datetime object using a specified format <code>datetime.strptime(\"2025-06-14\", \"%Y-%m-%d\")</code> \u2192 <code>datetime.datetime(2025, 6, 14, 0, 0)</code> <code>datetime.strftime(format)</code> Formats a datetime object as a string according to the format string <code>dt.strftime(\"%d-%b-%Y\")</code> \u2192 <code>'14-Jun-2025'</code> <code>datetime.date()</code> Extracts the date part from a datetime object <code>dt.date()</code> \u2192 <code>2025-06-14</code> <code>datetime.time()</code> Extracts the time part from a datetime object <code>dt.time()</code> \u2192 <code>22:00:00</code> <code>datetime.replace()</code> Replaces one or more components of a datetime object <code>dt.replace(year=2026)</code> \u2192 <code>2026-06-14 22:00:00</code> <code>datetime.combine(date, time)</code> Combines a date and a time into a datetime object <code>datetime.combine(date(2025,6,14), time(12,30))</code> \u2192 <code>2025-06-14 12:30:00</code> <code>datetime.timedelta(days=1)</code> Represents a duration; used for arithmetic with dates/times <code>dt + timedelta(days=1)</code> \u2192 <code>2025-06-15 22:00:00</code> <code>datetime.fromtimestamp(ts)</code> Converts a timestamp (seconds since epoch) to a datetime object <code>datetime.fromtimestamp(1700000000)</code> \u2192 <code>2023-11-14 00:53:20</code> <code>datetime.timestamp()</code> Converts a datetime object to a POSIX timestamp <code>dt.timestamp()</code> \u2192 <code>1750000000.0</code> <code>datetime.weekday()</code> Returns the day of the week as an integer (Monday=0, Sunday=6) <code>dt.weekday()</code> \u2192 <code>5</code> <code>datetime.isoweekday()</code> Returns the day of the week as an integer (Monday=1, Sunday=7) <code>dt.isoweekday()</code> \u2192 <code>6</code> <code>datetime.isoformat()</code> Returns a string in ISO 8601 format <code>dt.isoformat()</code> \u2192 <code>'2025-06-14T22:00:00'</code> <p>Note: <code>dt</code> refers to a datetime object created using <code>datetime.now()</code> or similar methods.</p>"},{"location":"chapter_11_modules/builtin_modules/datetime_tutorial/#bonus-useful-format-codes","title":"Bonus: Useful Format Codes\u00b6","text":""},{"location":"chapter_11_modules/builtin_modules/math_module_tutorial/","title":"Python Modules: Importing Custom, Standard, and Third-Party","text":"In\u00a0[1]: Copied! <pre>import math\n</pre> import math In\u00a0[2]: Copied! <pre>math.pi\n</pre> math.pi Out[2]: <pre>3.141592653589793</pre> In\u00a0[3]: Copied! <pre>math.sqrt(16)\n</pre> math.sqrt(16) Out[3]: <pre>4.0</pre> In\u00a0[4]: Copied! <pre>math.ceil(55.7)\n</pre> math.ceil(55.7) Out[4]: <pre>56</pre> In\u00a0[5]: Copied! <pre>math.floor(100.2)\n</pre> math.floor(100.2) Out[5]: <pre>100</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_11_modules/builtin_modules/math_module_tutorial/#python-modules-importing-custom-standard-and-third-party","title":"Python Modules: Importing Custom, Standard, and Third-Party\u00b6","text":"<ul> <li>A module is simply a file containing Python code. It may define functions, classes, and variables that you can reuse in other programs.</li> </ul> Type Example Description Standard <code>import math</code> Comes with Python Custom <code>import mymodule</code> User-defined module Third-Party <code>import requests</code> Installed via pip"},{"location":"chapter_11_modules/builtin_modules/math_module_tutorial/#math-module","title":"Math Module\u00b6","text":"Method Description Example <code>math.sqrt(x)</code> Returns the square root of <code>x</code>. <code>math.sqrt(16)</code> \u2192 <code>4.0</code> <code>math.ceil(x)</code> Returns the smallest integer \u2265 <code>x</code> (ceiling). <code>math.ceil(4.2)</code> \u2192 <code>5</code> <code>math.floor(x)</code> Returns the largest integer \u2264 <code>x</code> (floor). <code>math.floor(4.8)</code> \u2192 <code>4</code> <code>math.factorial(x)</code> Returns factorial of <code>x</code> (x!). <code>math.factorial(5)</code> \u2192 <code>120</code> <code>math.pow(x, y)</code> Returns <code>x</code> raised to the power <code>y</code> (x^y). <code>math.pow(2, 3)</code> \u2192 <code>8.0</code> <code>math.exp(x)</code> Returns e^x, the exponential of <code>x</code>. <code>math.exp(1)</code> \u2192 <code>2.718281828...</code> <code>math.log(x)</code> Returns natural logarithm (base e) of <code>x</code>. <code>math.log(math.e)</code> \u2192 <code>1.0</code> <code>math.log10(x)</code> Returns base-10 logarithm of <code>x</code>. <code>math.log10(1000)</code> \u2192 <code>3.0</code> <code>math.sin(x)</code> Returns sine of <code>x</code> (x in radians). <code>math.sin(math.pi/2)</code> \u2192 <code>1.0</code> <code>math.cos(x)</code> Returns cosine of <code>x</code> (x in radians). <code>math.cos(0)</code> \u2192 <code>1.0</code> <code>math.tan(x)</code> Returns tangent of <code>x</code> (x in radians). <code>math.tan(0)</code> \u2192 <code>0.0</code> <code>math.degrees(x)</code> Converts radians to degrees. <code>math.degrees(math.pi)</code> \u2192 <code>180</code> <code>math.radians(x)</code> Converts degrees to radians. <code>math.radians(180)</code> \u2192 <code>3.14159</code> <code>math.isclose(a, b, rel_tol=1e-9)</code> Checks if <code>a</code> and <code>b</code> are approximately equal. <code>math.isclose(0.1+0.2, 0.3)</code> \u2192 <code>True</code> <code>math.gcd(a, b)</code> Returns greatest common divisor of <code>a</code> and <code>b</code>. <code>math.gcd(12, 18)</code> \u2192 <code>6</code> <code>math.fabs(x)</code> Returns the absolute value of <code>x</code> (float). <code>math.fabs(-5.5)</code> \u2192 <code>5.5</code>"},{"location":"chapter_11_modules/custom_modules/config/","title":"Config","text":"In\u00a0[\u00a0]: Copied! <pre>USERNAME = 'NirajanBekoju'\nEMAIL = 'nirajan.bekoju@gmail.com'\nPASSWORD = '123456789'\n</pre> USERNAME = 'NirajanBekoju' EMAIL = 'nirajan.bekoju@gmail.com' PASSWORD = '123456789' In\u00a0[\u00a0]: Copied! <pre>print(__name__)\n</pre> print(__name__)"},{"location":"chapter_11_modules/custom_modules/main/","title":"Main","text":"In\u00a0[14]: Copied! <pre>from config import USERNAME, EMAIL, PASSWORD\n</pre> from config import USERNAME, EMAIL, PASSWORD In\u00a0[15]: Copied! <pre>print(USERNAME, EMAIL, PASSWORD)\n</pre> print(USERNAME, EMAIL, PASSWORD) <pre>NirajanBekoju nirajan.bekoju@gmail.com 123456789\n</pre> In\u00a0[1]: Copied! <pre>from custom_modules.arithmetic_operation import add, subtract, divide\n</pre> from custom_modules.arithmetic_operation import add, subtract, divide In\u00a0[2]: Copied! <pre>add(10, 20)\n</pre> add(10, 20) Out[2]: <pre>30</pre> In\u00a0[3]: Copied! <pre>subtract(20, 30)\n</pre> subtract(20, 30) Out[3]: <pre>-10</pre> In\u00a0[4]: Copied! <pre>divide(10, 20)\n</pre> divide(10, 20) Out[4]: <pre>0.5</pre> In\u00a0[16]: Copied! <pre>from custom_modules.bank_account import BankAccount\n</pre> from custom_modules.bank_account import BankAccount In\u00a0[17]: Copied! <pre>nirajan_account = BankAccount(1239812, 'Nirajan Bekoju', 100)\nnirajan_account.viewBalance()\n</pre> nirajan_account = BankAccount(1239812, 'Nirajan Bekoju', 100) nirajan_account.viewBalance() <pre>Your balance is 100\n</pre>"},{"location":"chapter_11_modules/custom_modules/custom_modules/arithmetic_operation/","title":"Arithmetic operation","text":"In\u00a0[\u00a0]: Copied! <pre>def add(x, y):\n    return x + y \n</pre> def add(x, y):     return x + y  In\u00a0[\u00a0]: Copied! <pre>def subtract(x, y):\n    return x - y \n</pre> def subtract(x, y):     return x - y  In\u00a0[\u00a0]: Copied! <pre>def multiply(x, y):\n    return x * y \n</pre> def multiply(x, y):     return x * y  In\u00a0[\u00a0]: Copied! <pre>def divide(x, y):\n    return x / y\n</pre> def divide(x, y):     return x / y"},{"location":"chapter_11_modules/custom_modules/custom_modules/bank_account/","title":"Bank account","text":"In\u00a0[\u00a0]: Copied! <pre>class BankAccount:\n    def __init__(self, account_number, name, balance):\n        self.account_number = account_number\n        self.name = name \n        self.balance = balance\n\n    \n    def viewBalance(self):\n        print(f'Your balance is {self.balance}')\n</pre> class BankAccount:     def __init__(self, account_number, name, balance):         self.account_number = account_number         self.name = name          self.balance = balance           def viewBalance(self):         print(f'Your balance is {self.balance}')"},{"location":"chapter_12_data_analysis/numpy_tutorial/","title":"NumPy Tutorial for Beginners","text":"In\u00a0[\u00a0]: Copied! <pre># !pip install numpy\n</pre> # !pip install numpy <pre>Requirement already satisfied: numpy in /home/fm-pc-lt-123/miniconda3/envs/python_tutorial/lib/python3.13/site-packages (2.3.0)\n</pre> In\u00a0[10]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[12]: Copied! <pre>arr = np.array([1, 2, 3])\nprint(arr)\nprint(type(arr))\nprint(arr.shape)\n</pre> arr = np.array([1, 2, 3]) print(arr) print(type(arr)) print(arr.shape) <pre>[1 2 3]\n&lt;class 'numpy.ndarray'&gt;\n(3,)\n</pre> In\u00a0[14]: Copied! <pre>arr2d = np.array([[1, 2], [3, 4]])\nprint(arr2d)\nprint(arr2d.shape)\n</pre> arr2d = np.array([[1, 2], [3, 4]]) print(arr2d) print(arr2d.shape) <pre>[[1 2]\n [3 4]]\n(2, 2)\n</pre> In\u00a0[15]: Copied! <pre>print(\"Shape:\", arr2d.shape)  # this is a 2 * 2 matrix\nprint(\"Size:\", arr2d.size) # gives total number of elements in the array\nprint(\"Data type:\", arr2d.dtype) # data types of the elements in the array \n</pre> print(\"Shape:\", arr2d.shape)  # this is a 2 * 2 matrix print(\"Size:\", arr2d.size) # gives total number of elements in the array print(\"Data type:\", arr2d.dtype) # data types of the elements in the array  <pre>Shape: (2, 2)\nSize: 4\nData type: int64\n</pre> In\u00a0[16]: Copied! <pre>print(np.zeros((2, 3)))  ## create numpy array of size 2 * 3 with all value = 0\nprint()\nprint(np.ones((2, 2)))  ## create numpy array of size 2 * 2 with all value = 1\nprint()\nprint(np.full((2, 2), 5))  ## create numpy array of size 2 * 2 with all value = 5\n</pre> print(np.zeros((2, 3)))  ## create numpy array of size 2 * 3 with all value = 0 print() print(np.ones((2, 2)))  ## create numpy array of size 2 * 2 with all value = 1 print() print(np.full((2, 2), 5))  ## create numpy array of size 2 * 2 with all value = 5 <pre>[[0. 0. 0.]\n [0. 0. 0.]]\n\n[[1. 1.]\n [1. 1.]]\n\n[[5 5]\n [5 5]]\n</pre> In\u00a0[17]: Copied! <pre>print(np.eye(3))    ## create an identity matrix of size 3 * 3\nprint()\nprint(np.arange(0, 10, 2))  ## arange(start, stop, step) --&gt; then into the 1d array\nprint()\nprint(np.linspace(0, 1, 5))  ## linspace(start, stop, no. of division)\nprint()\n</pre> print(np.eye(3))    ## create an identity matrix of size 3 * 3 print() print(np.arange(0, 10, 2))  ## arange(start, stop, step) --&gt; then into the 1d array print() print(np.linspace(0, 1, 5))  ## linspace(start, stop, no. of division) print() <pre>[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\n[0 2 4 6 8]\n\n[0.   0.25 0.5  0.75 1.  ]\n\n</pre> In\u00a0[18]: Copied! <pre>a = np.array([10, 20, 30, 40])\nprint(a)\nprint(a[1])  ## 20\nprint(a[1:3]) ## [20 30]\n</pre> a = np.array([10, 20, 30, 40]) print(a) print(a[1])  ## 20 print(a[1:3]) ## [20 30] <pre>[10 20 30 40]\n20\n[20 30]\n</pre> In\u00a0[20]: Copied! <pre>print('Indexing in b matrix')\nb = np.array([[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [11, 12, 13, 14, 15]])\nprint(b)\nprint()\nprint(b[1, 2])  \nprint()\nprint(b[:, 1]) \n</pre> print('Indexing in b matrix') b = np.array([[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [11, 12, 13, 14, 15]]) print(b) print() print(b[1, 2])   print() print(b[:, 1])  <pre>Indexing in b matrix\n[[ 1  2  3  4  5]\n [ 4  5  6  7  8]\n [11 12 13 14 15]]\n\n6\n\n[ 2  5 12]\n</pre> In\u00a0[21]: Copied! <pre>b[0:2, 2]\n</pre> b[0:2, 2] Out[21]: <pre>array([3, 6])</pre> In\u00a0[22]: Copied! <pre>a = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n\nprint(a + b)\nprint(a * b)\nprint(a ** 2)\nprint(np.dot(a, b))  ## 1 * 4 + 2 * 5 + 3 * 6 = 4 + 10 + 18 = 32\n</pre> a = np.array([1, 2, 3]) b = np.array([4, 5, 6])  print(a + b) print(a * b) print(a ** 2) print(np.dot(a, b))  ## 1 * 4 + 2 * 5 + 3 * 6 = 4 + 10 + 18 = 32 <pre>[5 7 9]\n[ 4 10 18]\n[1 4 9]\n32\n</pre> In\u00a0[23]: Copied! <pre>a = np.array([1, 2, 3, 12, 14, 15, 16, 12, 13])\nprint(np.mean(a))   ## obtain the mean of the array\nprint(np.median(a))  ## obtain the median of the array\nprint(np.std(a)) ## obtain the standard deviation of the array\nprint(np.max(a)) ## obtain the max value of the array\nprint(np.min(a)) ## obtain the min value of the array\n</pre> a = np.array([1, 2, 3, 12, 14, 15, 16, 12, 13]) print(np.mean(a))   ## obtain the mean of the array print(np.median(a))  ## obtain the median of the array print(np.std(a)) ## obtain the standard deviation of the array print(np.max(a)) ## obtain the max value of the array print(np.min(a)) ## obtain the min value of the array <pre>9.777777777777779\n12.0\n5.6524877075452915\n16\n1\n</pre> In\u00a0[24]: Copied! <pre>arr = np.array([[1, 2], [3, 4], [5, 6]])\nprint(arr)\n\nreshaped = arr.reshape((2, 3))  ## reshape the 3 * 2 matrix into 2 * 3 matrix\nflattened = arr.flatten() ## convert 2d matrix into 1d matrix.\n\nprint(\"Reshaped:\\n\", reshaped)\nprint(\"Flattened:\", flattened)\n</pre> arr = np.array([[1, 2], [3, 4], [5, 6]]) print(arr)  reshaped = arr.reshape((2, 3))  ## reshape the 3 * 2 matrix into 2 * 3 matrix flattened = arr.flatten() ## convert 2d matrix into 1d matrix.  print(\"Reshaped:\\n\", reshaped) print(\"Flattened:\", flattened) <pre>[[1 2]\n [3 4]\n [5 6]]\nReshaped:\n [[1 2 3]\n [4 5 6]]\nFlattened: [1 2 3 4 5 6]\n</pre> In\u00a0[25]: Copied! <pre>arr = np.array([[1, 2], [3, 4], [5, 6]])\nprint(arr)\n</pre> arr = np.array([[1, 2], [3, 4], [5, 6]]) print(arr)  <pre>[[1 2]\n [3 4]\n [5 6]]\n</pre> In\u00a0[26]: Copied! <pre>print(arr.T)\n</pre> print(arr.T) <pre>[[1 3 5]\n [2 4 6]]\n</pre> In\u00a0[27]: Copied! <pre>print(np.random.rand(2, 3))  ## create 2 * 2 matrix and fill elements with random numbers\n</pre> print(np.random.rand(2, 3))  ## create 2 * 2 matrix and fill elements with random numbers  <pre>[[0.43313434 0.52674378 0.31686007]\n [0.43670991 0.23406475 0.07976941]]\n</pre> In\u00a0[28]: Copied! <pre>arr = np.random.randint(1, 100, 10)\nprint(arr)\n</pre> arr = np.random.randint(1, 100, 10) print(arr) <pre>[77 84 98 66 22 15 44 33 73 60]\n</pre> In\u00a0[28]: Copied! <pre>arr = np.random.randint(1, 100, 10)\nprint(\"Array:\", arr)\nprint(\"Mean:\", np.mean(arr))\nprint(\"Max:\", np.max(arr))\nprint(\"Sorted:\", np.sort(arr))\n</pre> arr = np.random.randint(1, 100, 10) print(\"Array:\", arr) print(\"Mean:\", np.mean(arr)) print(\"Max:\", np.max(arr)) print(\"Sorted:\", np.sort(arr)) <pre>Array: [75 52 42 16 32 12 59 42 89 75]\nMean: 49.4\nMax: 89\nSorted: [12 16 32 42 42 52 59 75 75 89]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_12_data_analysis/numpy_tutorial/#numpy-tutorial-for-beginners","title":"NumPy Tutorial for Beginners\u00b6","text":"<p>NumPy (Numerical Python) is a powerful library for numerical computations in Python. It supports large multi-dimensional arrays and matrices, along with a collection of high-level mathematical functions to operate on these arrays.</p>"},{"location":"chapter_12_data_analysis/numpy_tutorial/#importing-numpy","title":"Importing NumPy\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#creating-arrays","title":"Creating Arrays\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#from-python-list","title":"From Python List\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#2d-array-matrix","title":"2D Array (Matrix)\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#array-properties","title":"Array Properties\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#array-creation-functions","title":"Array Creation Functions\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#indexing-and-slicing","title":"Indexing and Slicing\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#basic-operations","title":"Basic Operations\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#useful-functions","title":"Useful Functions\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#reshaping-and-flattening","title":"Reshaping and Flattening\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#random-module","title":"Random Module\u00b6","text":""},{"location":"chapter_12_data_analysis/numpy_tutorial/#exercise","title":"Exercise\u00b6","text":"<p>Task: Create a 1D NumPy array of 10 random integers between 1 and 100. Find its mean, max, and sort the array.</p>"},{"location":"chapter_12_data_analysis/pandas_tutorial/","title":"Pandas","text":"In\u00a0[\u00a0]: Copied! <pre># !pip install pandas\n</pre> # !pip install pandas In\u00a0[2]: Copied! <pre>import pandas as pd\n</pre> import pandas as pd In\u00a0[3]: Copied! <pre>#Series: 1-dimensional datatype.\nseries = pd.Series([\"BMW\",\"Honda\",\"Toyota\"])\nseries\n</pre> #Series: 1-dimensional datatype. series = pd.Series([\"BMW\",\"Honda\",\"Toyota\"]) series Out[3]: <pre>0       BMW\n1     Honda\n2    Toyota\ndtype: object</pre> In\u00a0[4]: Copied! <pre>colors = pd.Series([\"red\",\"blue\",\"black\"])\ncolors\n</pre> colors = pd.Series([\"red\",\"blue\",\"black\"]) colors Out[4]: <pre>0      red\n1     blue\n2    black\ndtype: object</pre> In\u00a0[5]: Copied! <pre>#Dataframe: 2-dimensional datatype.\ncar_data = pd.DataFrame({\"Car\":series, \"Color\":colors})\ncar_data\n</pre> #Dataframe: 2-dimensional datatype. car_data = pd.DataFrame({\"Car\":series, \"Color\":colors}) car_data Out[5]: Car Color 0 BMW red 1 Honda blue 2 Toyota black In\u00a0[6]: Copied! <pre>#import data\ncar_sales_df = pd.read_csv(\"data/car_sales.csv\")\ndisplay(car_sales_df)\n</pre> #import data car_sales_df = pd.read_csv(\"data/car_sales.csv\") display(car_sales_df)  Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 1 Honda Red 87899 4 $5,000.00 2 Toyota Blue 32549 3 $7,000.00 3 BMW Black 11179 5 $22,000.00 4 Nissan White 213095 4 $3,500.00 5 Toyota Green 99213 4 $4,500.00 6 Honda Blue 45698 4 $7,500.00 7 Honda Blue 54738 4 $7,000.00 8 Toyota White 60000 4 $6,250.00 9 Nissan White 31600 4 $9,700.00 In\u00a0[7]: Copied! <pre>print(type(car_sales_df))\n</pre> print(type(car_sales_df)) <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\n</pre> In\u00a0[8]: Copied! <pre>print(car_sales_df.shape)\n</pre> print(car_sales_df.shape) <pre>(10, 5)\n</pre> In\u00a0[9]: Copied! <pre>#Attribute\ncar_sales_df.dtypes\n</pre> #Attribute car_sales_df.dtypes Out[9]: <pre>Make             object\nColour           object\nOdometer (KM)     int64\nDoors             int64\nPrice            object\ndtype: object</pre> In\u00a0[10]: Copied! <pre>sales_column = car_sales_df.columns\nsales_column\n</pre> sales_column = car_sales_df.columns sales_column Out[10]: <pre>Index(['Make', 'Colour', 'Odometer (KM)', 'Doors', 'Price'], dtype='object')</pre> In\u00a0[9]: Copied! <pre>car_sales_df.describe()\n</pre> car_sales_df.describe() Out[9]: Odometer (KM) Doors count 10.000000 10.000000 mean 78601.400000 4.000000 std 61983.471735 0.471405 min 11179.000000 3.000000 25% 35836.250000 4.000000 50% 57369.000000 4.000000 75% 96384.500000 4.000000 max 213095.000000 5.000000 In\u00a0[10]: Copied! <pre>car_sales_df.info()\n</pre> car_sales_df.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10 entries, 0 to 9\nData columns (total 5 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   Make           10 non-null     object\n 1   Colour         10 non-null     object\n 2   Odometer (KM)  10 non-null     int64 \n 3   Doors          10 non-null     int64 \n 4   Price          10 non-null     object\ndtypes: int64(2), object(3)\nmemory usage: 532.0+ bytes\n</pre> In\u00a0[12]: Copied! <pre>car_sales_df.head(3)\n</pre> car_sales_df.head(3) Out[12]: Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 1 Honda Red 87899 4 $5,000.00 2 Toyota Blue 32549 3 $7,000.00 In\u00a0[13]: Copied! <pre>car_sales_df.tail(3)\n</pre> car_sales_df.tail(3) Out[13]: Make Colour Odometer (KM) Doors Price 7 Honda Blue 54738 4 $7,000.00 8 Toyota White 60000 4 $6,250.00 9 Nissan White 31600 4 $9,700.00 In\u00a0[26]: Copied! <pre>display(car_sales_df)\n</pre> display(car_sales_df) Make Colour Odometer (KM) Doors Price 0 toyota White 150043 4 $4,000.00 1 honda Red 87899 4 $5,000.00 2 toyota Blue 32549 3 $7,000.00 3 bmw Black 11179 5 $22,000.00 4 nissan White 213095 4 $3,500.00 5 toyota Green 99213 4 $4,500.00 6 honda Blue 45698 4 $7,500.00 7 honda Blue 54738 4 $7,000.00 8 toyota White 60000 4 $6,250.00 9 nissan White 31600 4 $9,700.00 In\u00a0[27]: Copied! <pre>car_sales_df.iloc[1:4]\n</pre> car_sales_df.iloc[1:4] Out[27]: Make Colour Odometer (KM) Doors Price 1 honda Red 87899 4 $5,000.00 2 toyota Blue 32549 3 $7,000.00 3 bmw Black 11179 5 $22,000.00 In\u00a0[29]: Copied! <pre>car_sales_df.iloc[1:4, 0:3]\n</pre> car_sales_df.iloc[1:4, 0:3] Out[29]: Make Colour Odometer (KM) 1 honda Red 87899 2 toyota Blue 32549 3 bmw Black 11179 In\u00a0[15]: Copied! <pre>car_sales_df['Make']\n</pre> car_sales_df['Make'] Out[15]: <pre>0    Toyota\n1     Honda\n2    Toyota\n3       BMW\n4    Nissan\n5    Toyota\n6     Honda\n7     Honda\n8    Toyota\n9    Nissan\nName: Make, dtype: object</pre> In\u00a0[16]: Copied! <pre>car_sales_df[['Make','Doors']] \n</pre> car_sales_df[['Make','Doors']]  Out[16]: Make Doors 0 Toyota 4 1 Honda 4 2 Toyota 3 3 BMW 5 4 Nissan 4 5 Toyota 4 6 Honda 4 7 Honda 4 8 Toyota 4 9 Nissan 4 In\u00a0[17]: Copied! <pre>car_sales_df[car_sales_df['Make']=='Toyota']\n</pre> car_sales_df[car_sales_df['Make']=='Toyota'] Out[17]: Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 2 Toyota Blue 32549 3 $7,000.00 5 Toyota Green 99213 4 $4,500.00 8 Toyota White 60000 4 $6,250.00 In\u00a0[22]: Copied! <pre>car_sales_df['Make'].str.upper()   #does not changes the data\n</pre> car_sales_df['Make'].str.upper()   #does not changes the data Out[22]: <pre>0    TOYOTA\n1     HONDA\n2    TOYOTA\n3       BMW\n4    NISSAN\n5    TOYOTA\n6     HONDA\n7     HONDA\n8    TOYOTA\n9    NISSAN\nName: Make, dtype: object</pre> In\u00a0[23]: Copied! <pre>display(car_sales_df)\n</pre> display(car_sales_df) Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 1 Honda Red 87899 4 $5,000.00 2 Toyota Blue 32549 3 $7,000.00 3 BMW Black 11179 5 $22,000.00 4 Nissan White 213095 4 $3,500.00 5 Toyota Green 99213 4 $4,500.00 6 Honda Blue 45698 4 $7,500.00 7 Honda Blue 54738 4 $7,000.00 8 Toyota White 60000 4 $6,250.00 9 Nissan White 31600 4 $9,700.00 In\u00a0[24]: Copied! <pre>car_sales_df['Make'] = car_sales_df['Make'].str.lower()  #assigning to change the dataset\ncar_sales_df\n</pre> car_sales_df['Make'] = car_sales_df['Make'].str.lower()  #assigning to change the dataset car_sales_df Out[24]: Make Colour Odometer (KM) Doors Price 0 toyota White 150043 4 $4,000.00 1 honda Red 87899 4 $5,000.00 2 toyota Blue 32549 3 $7,000.00 3 bmw Black 11179 5 $22,000.00 4 nissan White 213095 4 $3,500.00 5 toyota Green 99213 4 $4,500.00 6 honda Blue 45698 4 $7,500.00 7 honda Blue 54738 4 $7,000.00 8 toyota White 60000 4 $6,250.00 9 nissan White 31600 4 $9,700.00 In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_12_data_analysis/pandas_tutorial/#pandas-datatype","title":"Pandas Datatype\u00b6","text":"<p>pandas has two main datatype: series and dataframe</p>"},{"location":"chapter_12_data_analysis/pandas_tutorial/#importing-and-exporting-datas","title":"Importing and Exporting datas\u00b6","text":""},{"location":"chapter_12_data_analysis/pandas_tutorial/#describing-data","title":"Describing Data\u00b6","text":""},{"location":"chapter_12_data_analysis/pandas_tutorial/#viewing-and-selecting-data","title":"Viewing and Selecting data\u00b6","text":""},{"location":"chapter_12_data_analysis/pandas_tutorial/#manipulating-data","title":"Manipulating Data\u00b6","text":""},{"location":"chapter_12_data_analysis/visualization_tutorial/","title":"Data Visualization","text":"In\u00a0[6]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n</pre> import pandas as pd import matplotlib.pyplot as plt  import seaborn as sns In\u00a0[9]: Copied! <pre>data_df = pd.read_csv('data/heart-disease.csv')\ndisplay(data_df)\n</pre> data_df = pd.read_csv('data/heart-disease.csv') display(data_df) age gender cp trestbps chol fbs restecg thalach exang oldpeak slope ca thal target 0 63 1 3 145 233 1 0 150 0 2.3 0 0 1 1 1 37 1 2 130 250 0 1 187 0 3.5 0 0 2 1 2 41 0 1 130 204 0 0 172 0 1.4 2 0 2 1 3 56 1 1 120 236 0 1 178 0 0.8 2 0 2 1 4 57 0 0 120 354 0 1 163 1 0.6 2 0 2 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 298 57 0 0 140 241 0 1 123 1 0.2 1 0 3 0 299 45 1 3 110 264 0 1 132 0 1.2 1 0 3 0 300 68 1 0 144 193 1 1 141 0 3.4 1 2 3 0 301 57 1 0 130 131 0 1 115 1 1.2 1 1 3 0 302 57 0 1 130 236 0 0 174 0 0.0 1 1 2 0 <p>303 rows \u00d7 14 columns</p> In\u00a0[10]: Copied! <pre>print(data_df.shape)\n</pre> print(data_df.shape) <pre>(303, 14)\n</pre> In\u00a0[11]: Copied! <pre>data_df.info()\n</pre> data_df.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 303 entries, 0 to 302\nData columns (total 14 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   age       303 non-null    int64  \n 1   gender    303 non-null    int64  \n 2   cp        303 non-null    int64  \n 3   trestbps  303 non-null    int64  \n 4   chol      303 non-null    int64  \n 5   fbs       303 non-null    int64  \n 6   restecg   303 non-null    int64  \n 7   thalach   303 non-null    int64  \n 8   exang     303 non-null    int64  \n 9   oldpeak   303 non-null    float64\n 10  slope     303 non-null    int64  \n 11  ca        303 non-null    int64  \n 12  thal      303 non-null    int64  \n 13  target    303 non-null    int64  \ndtypes: float64(1), int64(13)\nmemory usage: 33.3 KB\n</pre> In\u00a0[30]: Copied! <pre>data_df['gender'].value_counts()\n</pre> data_df['gender'].value_counts() Out[30]: <pre>gender\n1    207\n0     96\nName: count, dtype: int64</pre> In\u00a0[34]: Copied! <pre>sns.countplot(x='gender', data=data_df)\n\n# Add title and labels\nplt.title('Gender Count in Dataset')\nplt.xlabel('Gender')\nplt.ylabel('Count')\n\nplt.show()\n</pre> sns.countplot(x='gender', data=data_df)  # Add title and labels plt.title('Gender Count in Dataset') plt.xlabel('Gender') plt.ylabel('Count')  plt.show() In\u00a0[38]: Copied! <pre>data_df.groupby(['gender', 'target']).size()\n</pre> data_df.groupby(['gender', 'target']).size() Out[38]: <pre>gender  target\n0       0          24\n        1          72\n1       0         114\n        1          93\ndtype: int64</pre> In\u00a0[35]: Copied! <pre>sns.countplot(x='gender', data=data_df, hue='target')\n\n# Add title and labels\nplt.title('Gender Count in Dataset')\nplt.xlabel('Gender')\nplt.ylabel('Count')\n\nplt.show()\n</pre> sns.countplot(x='gender', data=data_df, hue='target')  # Add title and labels plt.title('Gender Count in Dataset') plt.xlabel('Gender') plt.ylabel('Count')  plt.show() In\u00a0[43]: Copied! <pre># Count occurrences of each gender\ngender_counts = data_df['gender'].value_counts()\nprint(gender_counts)\n</pre> # Count occurrences of each gender gender_counts = data_df['gender'].value_counts() print(gender_counts) <pre>gender\n1    207\n0     96\nName: count, dtype: int64\n</pre> In\u00a0[47]: Copied! <pre># Create a pie chart\nplt.figure(figsize=(6, 6))\nplt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=0)\nplt.title('Gender Distribution in Dataset')\nplt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.\n\nplt.show()\n</pre> # Create a pie chart plt.figure(figsize=(6, 6)) plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=0) plt.title('Gender Distribution in Dataset') plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.  plt.show() In\u00a0[49]: Copied! <pre>display(data_df)\n</pre> display(data_df) age gender cp trestbps chol fbs restecg thalach exang oldpeak slope ca thal target 0 63 1 3 145 233 1 0 150 0 2.3 0 0 1 1 1 37 1 2 130 250 0 1 187 0 3.5 0 0 2 1 2 41 0 1 130 204 0 0 172 0 1.4 2 0 2 1 3 56 1 1 120 236 0 1 178 0 0.8 2 0 2 1 4 57 0 0 120 354 0 1 163 1 0.6 2 0 2 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 298 57 0 0 140 241 0 1 123 1 0.2 1 0 3 0 299 45 1 3 110 264 0 1 132 0 1.2 1 0 3 0 300 68 1 0 144 193 1 1 141 0 3.4 1 2 3 0 301 57 1 0 130 131 0 1 115 1 1.2 1 1 3 0 302 57 0 1 130 236 0 0 174 0 0.0 1 1 2 0 <p>303 rows \u00d7 14 columns</p> In\u00a0[55]: Copied! <pre># Create a distribution plot (histogram + KDE)\nsns.histplot(data=data_df, x='age', kde=True, bins=30, color='skyblue')\n\n# Add labels and title\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.show()\n</pre> # Create a distribution plot (histogram + KDE) sns.histplot(data=data_df, x='age', kde=True, bins=30, color='skyblue')  # Add labels and title plt.title('Age Distribution') plt.xlabel('Age') plt.ylabel('Frequency')  # Show the plot plt.show() In\u00a0[54]: Copied! <pre># Create a distribution plot (histogram + KDE)\nsns.kdeplot(data=data_df, x='age', hue='target', fill=True)\n\n# Add labels and title\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.show()\n</pre> # Create a distribution plot (histogram + KDE) sns.kdeplot(data=data_df, x='age', hue='target', fill=True)  # Add labels and title plt.title('Age Distribution') plt.xlabel('Age') plt.ylabel('Frequency')  # Show the plot plt.show() In\u00a0[61]: Copied! <pre># Create a box plot for age\nsns.boxplot(y=data_df['chol'])\n\n# Add title and label\nplt.title('Box Plot of chol')\nplt.xlabel('chol')\n\n# Show the plot\nplt.show()\n</pre> # Create a box plot for age sns.boxplot(y=data_df['chol'])  # Add title and label plt.title('Box Plot of chol') plt.xlabel('chol')  # Show the plot plt.show() In\u00a0[65]: Copied! <pre>display(data_df)\n</pre> display(data_df) age gender cp trestbps chol fbs restecg thalach exang oldpeak slope ca thal target 0 63 1 3 145 233 1 0 150 0 2.3 0 0 1 1 1 37 1 2 130 250 0 1 187 0 3.5 0 0 2 1 2 41 0 1 130 204 0 0 172 0 1.4 2 0 2 1 3 56 1 1 120 236 0 1 178 0 0.8 2 0 2 1 4 57 0 0 120 354 0 1 163 1 0.6 2 0 2 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 298 57 0 0 140 241 0 1 123 1 0.2 1 0 3 0 299 45 1 3 110 264 0 1 132 0 1.2 1 0 3 0 300 68 1 0 144 193 1 1 141 0 3.4 1 2 3 0 301 57 1 0 130 131 0 1 115 1 1.2 1 1 3 0 302 57 0 1 130 236 0 0 174 0 0.0 1 1 2 0 <p>303 rows \u00d7 14 columns</p> In\u00a0[68]: Copied! <pre># Create scatter plot between age and chol\nsns.scatterplot(data=data_df, x='thalach', y='oldpeak', color='purple')\n\n# Add title and labels\nplt.title('Scatter Plot of Age vs Cholesterol')\nplt.xlabel('Age')\nplt.ylabel('Cholesterol (chol)')\n\n# Show the plot\nplt.show()\n</pre> # Create scatter plot between age and chol sns.scatterplot(data=data_df, x='thalach', y='oldpeak', color='purple')  # Add title and labels plt.title('Scatter Plot of Age vs Cholesterol') plt.xlabel('Age') plt.ylabel('Cholesterol (chol)')  # Show the plot plt.show() In\u00a0[69]: Copied! <pre>numerical_columns = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\n\nnumerical_data_df = data_df[numerical_columns]\n\n\n# Calculate the correlation matrix\ncorrelation_matrix = numerical_data_df.corr()\n\n# Set the figure size\nplt.figure(figsize=(10, 8))\n\n# Create the heatmap\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", square=True, linewidths=0.5)\n\n# Add title\nplt.title('Correlation Heatmap')\n\n# Show the plot\nplt.show()\n</pre> numerical_columns = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']  numerical_data_df = data_df[numerical_columns]   # Calculate the correlation matrix correlation_matrix = numerical_data_df.corr()  # Set the figure size plt.figure(figsize=(10, 8))  # Create the heatmap sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", square=True, linewidths=0.5)  # Add title plt.title('Correlation Heatmap')  # Show the plot plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_12_data_analysis/visualization_tutorial/#data-visualization","title":"Data Visualization\u00b6","text":""},{"location":"chapter_12_data_analysis/visualization_tutorial/#different-types-of-plots","title":"Different Types of Plots\u00b6","text":"Plot Type Best For Variables Involved Example Line Plot Trends over time X: categorical or time, Y: numeric Daily sales over a month Bar Chart Comparing categories X: category, Y: numeric Average scores by department Histogram Distribution of data X: numeric (binned) Distribution of student ages Pie Chart Part-to-whole relationship Categorical Market share by company Scatter Plot Relationship between two numeric variables X: numeric, Y: numeric Height vs. weight Box Plot Distribution with outliers X: category, Y: numeric Exam scores by subject Violin Plot Distribution + density X: category, Y: numeric Salary distribution by gender Heatmap Matrix of values (correlation, frequency) 2D matrix Correlation matrix Pair Plot Relationships across multiple numeric vars Numeric pairs Iris dataset features Count Plot Count of categories Categorical Number of passengers by class"},{"location":"chapter_12_data_analysis/visualization_tutorial/#heart-disease-dataset-features-with-medical-descriptions","title":"Heart Disease Dataset Features (with Medical Descriptions)\u00b6","text":"<ol> <li><p>Age Age of the patient (in years). Age is a key risk factor for cardiovascular diseases; risk increases with age.</p> </li> <li><p>Gender Gender of the patient:</p> <ul> <li>1 = Male</li> <li>0 = Female Males are generally at higher risk for heart disease at a younger age compared to females.</li> </ul> </li> <li><p>cp : Chest Pain Type Describes the type of chest pain experienced:</p> <ul> <li>0 = Typical angina (heart-related chest pain triggered by physical activity or stress)</li> <li>1 = Atypical angina (non-typical chest pain, not always related to exertion)</li> <li>2 = Non-anginal pain (chest pain not related to the heart)</li> <li>3 = Asymptomatic (no chest pain despite heart issues)</li> </ul> </li> <li><p>trestbps: Resting Blood Pressure Blood pressure measured when the patient is at rest (in mm Hg). High resting blood pressure can be a sign of hypertension and is a risk factor for heart disease.</p> </li> <li><p>chol : Serum Cholesterol (in mg/dl) Total cholesterol level in the blood. High cholesterol can lead to plaque buildup in arteries, increasing heart disease risk.</p> </li> <li><p>fbs : Fasting Blood Sugar &gt; 120 mg/dl Indicates if fasting blood sugar is greater than 120 mg/dl:</p> <ul> <li>1 = True (high)</li> <li>0 = False (normal) High blood sugar levels can indicate diabetes, a major risk factor for heart disease.</li> </ul> </li> <li><p>restecg : Resting Electrocardiographic Results Results from the ECG test while the patient is resting:</p> <ul> <li>0 = Normal</li> <li>1 = ST-T wave abnormality (can suggest heart muscle damage or ischemia)</li> <li>2 = Left ventricular hypertrophy (thickening of heart muscle, often due to high blood pressure)</li> </ul> </li> <li><p>thalach : Maximum Heart Rate Achieved The highest heart rate achieved during exercise. It shows how well the heart handles physical activity.</p> </li> <li><p>exang : Exercise-Induced Angina Indicates if the patient experienced angina (chest pain) during exercise:</p> <ul> <li>1 = Yes</li> <li>0 = No Exercise-induced chest pain is often linked to insufficient blood flow to the heart.</li> </ul> </li> <li><p>oldpeak : Oldpeak ST depression induced by exercise relative to rest (measured in mm). It reflects ischemia, which is reduced blood flow to the heart.</p> </li> <li><p>slope : Slope of the Peak Exercise ST Segment Shape of the ST segment during peak exercise:</p> </li> </ol> <ul> <li>0 = Upsloping (usually normal)</li> <li>1 = Flat (can indicate ischemia)</li> <li>2 = Downsloping (more concerning for ischemia)</li> </ul> <ol> <li><p>ca : Number of Major Vessels Colored by Fluoroscopy Number of major blood vessels (0 to 3) that are visible (colored) under fluoroscopy (X-ray of heart vessels). More visible vessels suggest better blood flow and less blockage.</p> </li> <li><p>thal : Thalassemia (Thal) Type of thalassemia test result:</p> </li> </ol> <ul> <li>0 = Normal</li> <li>1 = Fixed defect (permanent damage or scarring in heart tissue)</li> <li>2 = Reversible defect (reduced blood flow during stress, improves at rest)</li> </ul> <ol> <li>Target Is this the heart disease or not?</li> </ol> <ul> <li>0 = Normal</li> <li>1 = Heart Disease</li> </ul>"},{"location":"chapter_12_data_analysis/visualization_tutorial/#categorical-value-visualization","title":"Categorical Value Visualization\u00b6","text":""},{"location":"chapter_12_data_analysis/visualization_tutorial/#exercise","title":"Exercise\u00b6","text":"<ol> <li>Make a function to plot the count of the categorical variable and put hue if required</li> </ol>"},{"location":"chapter_12_data_analysis/visualization_tutorial/#numerical-variables","title":"Numerical Variables\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/matplotlib-exercises/","title":"Matplotlib Practice","text":"In\u00a0[1]: Copied! <pre># Import the pyplot module from matplotlib as plt and make sure \n# plots appear in the notebook using '%matplotlib inline'\nimport matplotlib.pyplot as plt\n%matplotlib inline\n</pre> # Import the pyplot module from matplotlib as plt and make sure  # plots appear in the notebook using '%matplotlib inline' import matplotlib.pyplot as plt %matplotlib inline In\u00a0[2]: Copied! <pre># Create a simple plot using plt.plot()\nplt.plot();\n</pre> # Create a simple plot using plt.plot() plt.plot(); In\u00a0[3]: Copied! <pre># Plot a single Python list\na = [1,2,3,4]\nplt.plot(a);\n</pre> # Plot a single Python list a = [1,2,3,4] plt.plot(a); In\u00a0[4]: Copied! <pre># Create two lists, one called X, one called y, each with 5 numbers in them\nX = [1,2,3,4,5]\ny = [i**2 for i in X]\n</pre> # Create two lists, one called X, one called y, each with 5 numbers in them X = [1,2,3,4,5] y = [i**2 for i in X] In\u00a0[5]: Copied! <pre># Plot X &amp; y (the lists you've created)\nplt.plot(X,y);\n</pre> # Plot X &amp; y (the lists you've created) plt.plot(X,y); <p>There's another way to create plots with Matplotlib, it's known as the object-orientated (OO) method. Let's try it.</p> In\u00a0[6]: Copied! <pre># Create a plot using plt.subplots()\nfig, ax = plt.subplots()\n</pre> # Create a plot using plt.subplots() fig, ax = plt.subplots() In\u00a0[7]: Copied! <pre># Create a plot using plt.subplots() and then add X &amp; y on the axes\nfig, ax = plt.subplots()\nax.plot(X,y);\n</pre> # Create a plot using plt.subplots() and then add X &amp; y on the axes fig, ax = plt.subplots() ax.plot(X,y); <p>Now let's try a small matplotlib workflow.</p> In\u00a0[8]: Copied! <pre># Import and get matplotlib ready\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Prepare data (create two lists of 5 numbers, X &amp; y)\nX = [1,2,3,4,5]\ny = [i**2 for i in X]\n\n# Setup figure and axes using plt.subplots()\nfig, ax = plt.subplots()\n\n# Add data (X, y) to axes\nax.plot(X,y)\n\n# Customize plot by adding a title, xlabel and ylabel\nax.set(title = 'Simple plot',\n       xlabel = 'X',\n       ylabel = 'y');\n\n# Save the plot to file using fig.savefig()\n#fig.savefig(images\\fig.png)  Not saving for the time being so comment this line\n</pre> # Import and get matplotlib ready import matplotlib.pyplot as plt %matplotlib inline  # Prepare data (create two lists of 5 numbers, X &amp; y) X = [1,2,3,4,5] y = [i**2 for i in X]  # Setup figure and axes using plt.subplots() fig, ax = plt.subplots()  # Add data (X, y) to axes ax.plot(X,y)  # Customize plot by adding a title, xlabel and ylabel ax.set(title = 'Simple plot',        xlabel = 'X',        ylabel = 'y');  # Save the plot to file using fig.savefig() #fig.savefig(images\\fig.png)  Not saving for the time being so comment this line <p>Okay, this is a simple line plot, how about something a little different?</p> <p>To help us, we'll import NumPy.</p> In\u00a0[9]: Copied! <pre># Import NumPy as np\nimport numpy as np\n</pre> # Import NumPy as np import numpy as np In\u00a0[10]: Copied! <pre># Create an array of 100 evenly spaced numbers between 0 and 100 using NumPy and save it to variable X\nX = np.linspace(0,100,100)\nX\n</pre> # Create an array of 100 evenly spaced numbers between 0 and 100 using NumPy and save it to variable X X = np.linspace(0,100,100) X Out[10]: <pre>array([  0.        ,   1.01010101,   2.02020202,   3.03030303,\n         4.04040404,   5.05050505,   6.06060606,   7.07070707,\n         8.08080808,   9.09090909,  10.1010101 ,  11.11111111,\n        12.12121212,  13.13131313,  14.14141414,  15.15151515,\n        16.16161616,  17.17171717,  18.18181818,  19.19191919,\n        20.2020202 ,  21.21212121,  22.22222222,  23.23232323,\n        24.24242424,  25.25252525,  26.26262626,  27.27272727,\n        28.28282828,  29.29292929,  30.3030303 ,  31.31313131,\n        32.32323232,  33.33333333,  34.34343434,  35.35353535,\n        36.36363636,  37.37373737,  38.38383838,  39.39393939,\n        40.4040404 ,  41.41414141,  42.42424242,  43.43434343,\n        44.44444444,  45.45454545,  46.46464646,  47.47474747,\n        48.48484848,  49.49494949,  50.50505051,  51.51515152,\n        52.52525253,  53.53535354,  54.54545455,  55.55555556,\n        56.56565657,  57.57575758,  58.58585859,  59.5959596 ,\n        60.60606061,  61.61616162,  62.62626263,  63.63636364,\n        64.64646465,  65.65656566,  66.66666667,  67.67676768,\n        68.68686869,  69.6969697 ,  70.70707071,  71.71717172,\n        72.72727273,  73.73737374,  74.74747475,  75.75757576,\n        76.76767677,  77.77777778,  78.78787879,  79.7979798 ,\n        80.80808081,  81.81818182,  82.82828283,  83.83838384,\n        84.84848485,  85.85858586,  86.86868687,  87.87878788,\n        88.88888889,  89.8989899 ,  90.90909091,  91.91919192,\n        92.92929293,  93.93939394,  94.94949495,  95.95959596,\n        96.96969697,  97.97979798,  98.98989899, 100.        ])</pre> In\u00a0[11]: Copied! <pre># Create a plot using plt.subplots() and plot X versus X^2 (X squared)\nfig, ax = plt.subplots()\nax.plot(X,X**2);\n</pre> # Create a plot using plt.subplots() and plot X versus X^2 (X squared) fig, ax = plt.subplots() ax.plot(X,X**2); <p>We'll start with scatter plots.</p> In\u00a0[12]: Copied! <pre># Create a scatter plot of X versus the exponential of X (np.exp(X))\nfig, ax = plt.subplots()\nax.scatter(X,np.exp(X));\n</pre> # Create a scatter plot of X versus the exponential of X (np.exp(X)) fig, ax = plt.subplots() ax.scatter(X,np.exp(X)); In\u00a0[13]: Copied! <pre># Create a scatter plot of X versus np.sin(X)\nfig, ax = plt.subplots()\nax.scatter(X,np.sin(X));\n</pre> # Create a scatter plot of X versus np.sin(X) fig, ax = plt.subplots() ax.scatter(X,np.sin(X)); <p>How about we try another type of plot? This time let's look at a bar plot. First we'll make some data.</p> In\u00a0[14]: Copied! <pre># Create a Python dictionary of 3 of your favourite foods with \n# The keys of the dictionary should be the food name and the values their price\nfood = {'apple' : 200,\n        'mango' : 250,\n        'banana' : 120}\n</pre> # Create a Python dictionary of 3 of your favourite foods with  # The keys of the dictionary should be the food name and the values their price food = {'apple' : 200,         'mango' : 250,         'banana' : 120}  In\u00a0[15]: Copied! <pre># Create a bar graph where the x-axis is the keys of the dictionary\n# and the y-axis is the values of the dictionary\nfig, ax = plt.subplots()\nax.bar(food.keys(),food.values())\n\n# Add a title, xlabel and ylabel to the plot\nax.set(title = 'Favourite food',\n       xlabel = 'Fruit',\n       ylabel = 'Price (Rs.)');\n</pre> # Create a bar graph where the x-axis is the keys of the dictionary # and the y-axis is the values of the dictionary fig, ax = plt.subplots() ax.bar(food.keys(),food.values())  # Add a title, xlabel and ylabel to the plot ax.set(title = 'Favourite food',        xlabel = 'Fruit',        ylabel = 'Price (Rs.)'); In\u00a0[16]: Copied! <pre># Make the same plot as above, except this time make the bars go horizontal\nfig, ax = plt.subplots()\nax.barh(list(food.keys()),list(food.values()));\n</pre> # Make the same plot as above, except this time make the bars go horizontal fig, ax = plt.subplots() ax.barh(list(food.keys()),list(food.values())); <p>All this food plotting is making me hungry. But we've got a couple of plots to go.</p> <p>Let's see a histogram.</p> In\u00a0[17]: Copied! <pre># Create a random NumPy array of 1000 normally distributed numbers using NumPy and save it to X\nX = np.random.randn(1000)\n\n# Create a histogram plot of X\nplt.hist(X, bins = 20)\nplt.show()\n</pre> # Create a random NumPy array of 1000 normally distributed numbers using NumPy and save it to X X = np.random.randn(1000)  # Create a histogram plot of X plt.hist(X, bins = 20) plt.show() In\u00a0[18]: Copied! <pre># Create a NumPy array of 1000 random numbers and save it to X\nX = np.random.randint(0,100,1000)\n\n# Create a histogram plot of X\nplt.hist(X);\n</pre> # Create a NumPy array of 1000 random numbers and save it to X X = np.random.randint(0,100,1000)  # Create a histogram plot of X plt.hist(X); <p>Notice how the distributions (spread of data) are different. Why do they differ?</p> <p>What else can you find out about the normal distribution?</p> <p>Can you think of any other kinds of data which may be normally distributed?</p> <p>These questions aren't directly related to plotting or Matplotlib but they're helpful to think of.</p> <p>Now let's try make some subplots. A subplot is another name for a figure with multiple plots on it.</p> In\u00a0[19]: Copied! <pre># Create an empty subplot with 2 rows and 2 columns (4 subplots total)\nfig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(nrows = 2,\n                                          ncols = 2)\n</pre> # Create an empty subplot with 2 rows and 2 columns (4 subplots total) fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(nrows = 2,                                           ncols = 2) <p>Notice how the subplot has multiple figures. Now let's add data to each axes.</p> In\u00a0[20]: Copied! <pre># Create the same plot as above with 2 rows and 2 columns and figsize of (10, 5)\nfig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(nrows = 2,\n                                          ncols = 2)\n\n# Plot X versus X/2 on the top left axes\nax0.plot(X,X/2)\n\n# Plot a scatter plot of 10 random numbers on each axis on the top right subplot\nax1.scatter(np.arange(10),np.random.randint(1,10,10))\n\n# Plot a bar graph of the favourite food keys and values on the bottom left subplot\nax2.bar(food.keys(),food.values())\n\n# Plot a histogram of 1000 random normally distributed numbers on the bottom right subplot\nax3.hist(np.random.randn(1000));\n</pre> # Create the same plot as above with 2 rows and 2 columns and figsize of (10, 5) fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(nrows = 2,                                           ncols = 2)  # Plot X versus X/2 on the top left axes ax0.plot(X,X/2)  # Plot a scatter plot of 10 random numbers on each axis on the top right subplot ax1.scatter(np.arange(10),np.random.randint(1,10,10))  # Plot a bar graph of the favourite food keys and values on the bottom left subplot ax2.bar(food.keys(),food.values())  # Plot a histogram of 1000 random normally distributed numbers on the bottom right subplot ax3.hist(np.random.randn(1000)); <p>Woah. There's a lot going on there.</p> <p>Now we've seen how to plot with Matplotlib and data directly. Let's practice using Matplotlib to plot with pandas.</p> <p>First we'll need to import pandas and create a DataFrame work with.</p> In\u00a0[21]: Copied! <pre># Import pandas as pd\nimport pandas as pd\n</pre> # Import pandas as pd import pandas as pd In\u00a0[22]: Copied! <pre># Import the '../data/car-sales.csv' into a DataFame called car_sales and view\ncar_sales = pd.read_csv('data\\car-sales.csv')\n</pre> # Import the '../data/car-sales.csv' into a DataFame called car_sales and view car_sales = pd.read_csv('data\\car-sales.csv') In\u00a0[23]: Copied! <pre># Try to plot the 'Price' column using the plot() function\ncar_sales['Price'].plot();\n</pre> # Try to plot the 'Price' column using the plot() function car_sales['Price'].plot(); <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 2\n      1 # Try to plot the 'Price' column using the plot() function\n----&gt; 2 car_sales['Price'].plot();\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\plotting\\_core.py:1000, in PlotAccessor.__call__(self, *args, **kwargs)\n    997             label_name = label_kw or data.columns\n    998             data.columns = label_name\n-&gt; 1000 return plot_backend.plot(data, kind=kind, **kwargs)\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\__init__.py:71, in plot(data, kind, **kwargs)\n     69         kwargs[\"ax\"] = getattr(ax, \"left_ax\", ax)\n     70 plot_obj = PLOT_CLASSES[kind](data, **kwargs)\n---&gt; 71 plot_obj.generate()\n     72 plot_obj.draw()\n     73 return plot_obj.result\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py:450, in MPLPlot.generate(self)\n    448 def generate(self) -&gt; None:\n    449     self._args_adjust()\n--&gt; 450     self._compute_plot_data()\n    451     self._setup_subplots()\n    452     self._make_plot()\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py:635, in MPLPlot._compute_plot_data(self)\n    633 # no non-numeric frames or series allowed\n    634 if is_empty:\n--&gt; 635     raise TypeError(\"no numeric data to plot\")\n    637 self.data = numeric_data.apply(self._convert_to_ndarray)\n\nTypeError: no numeric data to plot</pre> <p>Why doesn't it work?</p> <p>Hint: It's not numeric data.</p> <p>In the process of turning it to numeric data, let's create another column which adds the total amount of sales and another one which shows what date the car was sold.</p> <p>Hint: To add a column up cumulatively, look up the cumsum() function. And to create a column of dates, look up the date_range() function.</p> In\u00a0[24]: Copied! <pre># Remove the symbols, the final two numbers from the 'Price' column and convert it to numbers\ncar_sales['Price'] = car_sales['Price'].str.replace(\"[\\$\\,\\.]\",\"\").astype(int)/100\n</pre> # Remove the symbols, the final two numbers from the 'Price' column and convert it to numbers car_sales['Price'] = car_sales['Price'].str.replace(\"[\\$\\,\\.]\",\"\").astype(int)/100 <pre>C:\\Users\\Nirajan\\AppData\\Local\\Temp\\ipykernel_15800\\604773559.py:2: FutureWarning: The default value of regex will change from True to False in a future version.\n  car_sales['Price'] = car_sales['Price'].str.replace(\"[\\$\\,\\.]\",\"\").astype(int)/100\n</pre> In\u00a0[25]: Copied! <pre># Add a column called 'Total Sales' to car_sales which cumulatively adds the 'Price' column\ncar_sales['Total Sales'] = car_sales['Price'].cumsum()\n\n# Add a column called 'Sale Date' which lists a series of successive dates starting from today (your today)\ncar_sales['Sale Date'] = pd.date_range('1/1/2022', periods = 10)\n# View the car_sales DataFrame\ncar_sales\n</pre> # Add a column called 'Total Sales' to car_sales which cumulatively adds the 'Price' column car_sales['Total Sales'] = car_sales['Price'].cumsum()  # Add a column called 'Sale Date' which lists a series of successive dates starting from today (your today) car_sales['Sale Date'] = pd.date_range('1/1/2022', periods = 10) # View the car_sales DataFrame car_sales Out[25]: Make Colour Odometer (KM) Doors Price Total Sales Sale Date 0 Toyota White 150043 4 4000.0 4000.0 2022-01-01 1 Honda Red 87899 4 5000.0 9000.0 2022-01-02 2 Toyota Blue 32549 3 7000.0 16000.0 2022-01-03 3 BMW Black 11179 5 22000.0 38000.0 2022-01-04 4 Nissan White 213095 4 3500.0 41500.0 2022-01-05 5 Toyota Green 99213 4 4500.0 46000.0 2022-01-06 6 Honda Blue 45698 4 7500.0 53500.0 2022-01-07 7 Honda Blue 54738 4 7000.0 60500.0 2022-01-08 8 Toyota White 60000 4 6250.0 66750.0 2022-01-09 9 Nissan White 31600 4 9700.0 76450.0 2022-01-10 <p>Now we've got a numeric column (<code>Total Sales</code>) and a dates column (<code>Sale Date</code>), let's visualize them.</p> In\u00a0[26]: Copied! <pre># Use the plot() function to plot the 'Sale Date' column versus the 'Total Sales' column\ncar_sales.plot('Sale Date', 'Total Sales');\n</pre> # Use the plot() function to plot the 'Sale Date' column versus the 'Total Sales' column car_sales.plot('Sale Date', 'Total Sales'); In\u00a0[27]: Copied! <pre># Convert the 'Price' column to the integers\n#Already done above\n\n# Create a scatter plot of the 'Odometer (KM)' and 'Price' column using the plot() function\ncar_sales.plot.scatter('Odometer (KM)', 'Price');\n</pre> # Convert the 'Price' column to the integers #Already done above  # Create a scatter plot of the 'Odometer (KM)' and 'Price' column using the plot() function car_sales.plot.scatter('Odometer (KM)', 'Price'); In\u00a0[28]: Copied! <pre># Create a NumPy array of random numbers of size (10, 4) and save it to X\nX = np.random.rand(10,4)\n\n# Turn the NumPy array X into a DataFrame with columns called ['a', 'b', 'c', 'd']\ndf = pd.DataFrame(X, columns = ['A','B','C','D'])\n\n# Create a bar graph of the DataFrame\ndf.plot(kind ='bar');\n</pre> # Create a NumPy array of random numbers of size (10, 4) and save it to X X = np.random.rand(10,4)  # Turn the NumPy array X into a DataFrame with columns called ['a', 'b', 'c', 'd'] df = pd.DataFrame(X, columns = ['A','B','C','D'])  # Create a bar graph of the DataFrame df.plot(kind ='bar'); In\u00a0[29]: Copied! <pre># Create a bar graph of the 'Make' and 'Odometer (KM)' columns in the car_sales DataFrame\ncar_sales.plot('Make','Odometer (KM)', kind ='bar');\n</pre> # Create a bar graph of the 'Make' and 'Odometer (KM)' columns in the car_sales DataFrame car_sales.plot('Make','Odometer (KM)', kind ='bar'); In\u00a0[30]: Copied! <pre># Create a histogram of the 'Odometer (KM)' column\ncar_sales['Odometer (KM)'].plot.hist(bins = 20)\n</pre> # Create a histogram of the 'Odometer (KM)' column car_sales['Odometer (KM)'].plot.hist(bins = 20) Out[30]: <pre>&lt;AxesSubplot: ylabel='Frequency'&gt;</pre> In\u00a0[31]: Copied! <pre># Create a histogram of the 'Price' column with 20 bins\ncar_sales['Price'].plot.hist(bins = 20);\n</pre> # Create a histogram of the 'Price' column with 20 bins car_sales['Price'].plot.hist(bins = 20); <p>Now we've seen a few examples of plotting directly from DataFrames using the <code>car_sales</code> dataset.</p> <p>Let's try using a different dataset.</p> In\u00a0[32]: Copied! <pre># Import \"../data/heart-disease.csv\" and save it to the variable \"heart_disease\"\nheart_disease = pd.read_csv('data\\heart-disease.csv')\n</pre> # Import \"../data/heart-disease.csv\" and save it to the variable \"heart_disease\" heart_disease = pd.read_csv('data\\heart-disease.csv') In\u00a0[33]: Copied! <pre># View the first 10 rows of the heart_disease DataFrame\nheart_disease.head()\n</pre> # View the first 10 rows of the heart_disease DataFrame heart_disease.head() Out[33]: age sex cp trestbps chol fbs restecg thalach exang oldpeak slope ca thal target 0 63 1 3 145 233 1 0 150 0 2.3 0 0 1 1 1 37 1 2 130 250 0 1 187 0 3.5 0 0 2 1 2 41 0 1 130 204 0 0 172 0 1.4 2 0 2 1 3 56 1 1 120 236 0 1 178 0 0.8 2 0 2 1 4 57 0 0 120 354 0 1 163 1 0.6 2 0 2 1 In\u00a0[34]: Copied! <pre># Create a histogram of the \"age\" column with 50 bins\nheart_disease['age'].plot.hist(bins = 50);\n</pre> # Create a histogram of the \"age\" column with 50 bins heart_disease['age'].plot.hist(bins = 50); In\u00a0[35]: Copied! <pre># Call plot.hist() on the heart_disease DataFrame and toggle the\n# \"subplots\" parameter to True\nheart_disease.plot.hist(figsize = (10,30),\n                        subplots = True);\n</pre> # Call plot.hist() on the heart_disease DataFrame and toggle the # \"subplots\" parameter to True heart_disease.plot.hist(figsize = (10,30),                         subplots = True); <p>That plot looks pretty squished. Let's change the figsize.</p> In\u00a0[36]: Copied! <pre># Call the same line of code from above except change the \"figsize\" parameter\n# to be (10, 30)\n#ALready done\n</pre> # Call the same line of code from above except change the \"figsize\" parameter # to be (10, 30) #ALready done <p>Now let's try comparing two variables versus the target variable.</p> <p>More specifially we'll see how age and cholesterol combined effect the target in patients over 50 years old.</p> <p>For this next challenge, we're going to be replicating the following plot:</p> <p></p> In\u00a0[37]: Copied! <pre># Replicate the above plot in whichever way you see fit\n\n# Note: The method below is only one way of doing it, yours might be\n# slightly different\n\n# Create DataFrame with patients over 50 years old\nover_50 = heart_disease[heart_disease['age']&gt;50]\n\n# Create the plot\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(over_50['age'],over_50['chol'])\n\n# Customize the plot\nax.set(title = 'Hello')\n\n# Add a meanline\nax.axhline(over_50['chol'].mean(),\n           ls = '--')\n</pre> # Replicate the above plot in whichever way you see fit  # Note: The method below is only one way of doing it, yours might be # slightly different  # Create DataFrame with patients over 50 years old over_50 = heart_disease[heart_disease['age']&gt;50]  # Create the plot fig, ax = plt.subplots()  # Plot the data ax.scatter(over_50['age'],over_50['chol'])  # Customize the plot ax.set(title = 'Hello')  # Add a meanline ax.axhline(over_50['chol'].mean(),            ls = '--') Out[37]: <pre>&lt;matplotlib.lines.Line2D at 0x2cc2179ab60&gt;</pre> <p>Beatiful, now you've created a plot of two different variables, let's change the style.</p> In\u00a0[38]: Copied! <pre># Check what styles are available under plt\nplt.style.available\n</pre> # Check what styles are available under plt plt.style.available Out[38]: <pre>['Solarize_Light2',\n '_classic_test_patch',\n '_mpl-gallery',\n '_mpl-gallery-nogrid',\n 'bmh',\n 'classic',\n 'dark_background',\n 'fast',\n 'fivethirtyeight',\n 'ggplot',\n 'grayscale',\n 'seaborn-v0_8',\n 'seaborn-v0_8-bright',\n 'seaborn-v0_8-colorblind',\n 'seaborn-v0_8-dark',\n 'seaborn-v0_8-dark-palette',\n 'seaborn-v0_8-darkgrid',\n 'seaborn-v0_8-deep',\n 'seaborn-v0_8-muted',\n 'seaborn-v0_8-notebook',\n 'seaborn-v0_8-paper',\n 'seaborn-v0_8-pastel',\n 'seaborn-v0_8-poster',\n 'seaborn-v0_8-talk',\n 'seaborn-v0_8-ticks',\n 'seaborn-v0_8-white',\n 'seaborn-v0_8-whitegrid',\n 'tableau-colorblind10']</pre> In\u00a0[39]: Copied! <pre># Change the style to use \"seaborn-whitegrid\"\nplt.style.use('seaborn-v0_8-whitegrid')\n</pre> # Change the style to use \"seaborn-whitegrid\" plt.style.use('seaborn-v0_8-whitegrid') <p>Now the style has been changed, we'll replot the same figure from above and see what it looks like.</p> <p>If you've changed the style correctly, it should look like the following: </p> In\u00a0[40]: Copied! <pre># Reproduce the same figure as above with the \"seaborn-whitegrid\" style\n\n# Create the plot\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(over_50['age'],over_50['chol'])\n\n# Customize the plot\nax.set(title = 'Hello')\n\n# Add a meanline\nax.axhline(over_50['chol'].mean(),\n           ls = '--')\n</pre> # Reproduce the same figure as above with the \"seaborn-whitegrid\" style  # Create the plot fig, ax = plt.subplots()  # Plot the data ax.scatter(over_50['age'],over_50['chol'])  # Customize the plot ax.set(title = 'Hello')  # Add a meanline ax.axhline(over_50['chol'].mean(),            ls = '--') Out[40]: <pre>&lt;matplotlib.lines.Line2D at 0x2cc20bcc1f0&gt;</pre> <p>Wonderful, you've changed the style of the plots and the figure is looking different but the dots aren't a very good colour.</p> <p>Let's change the <code>cmap</code> parameter of <code>scatter()</code> as well as the <code>color</code> parameter of <code>axhline()</code> to fix it.</p> <p>Completing this step correctly should result in a figure which looks like this: </p> In\u00a0[41]: Copied! <pre># Replot the same figure as above except change the \"cmap\" parameter\n# of scatter() to \"winter\"\n# Also change the \"color\" parameter of axhline() to \"red\"\n\n# Create the plot\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(over_50['age'],over_50['chol'], c = over_50['target'], cmap = 'winter' )\n\n# Customize the plot\nax.set(title = 'Hello')\n\n# Add a meanline\nax.axhline(over_50['chol'].mean(),\n           ls = '--',\n           color = 'red')\n</pre> # Replot the same figure as above except change the \"cmap\" parameter # of scatter() to \"winter\" # Also change the \"color\" parameter of axhline() to \"red\"  # Create the plot fig, ax = plt.subplots()  # Plot the data ax.scatter(over_50['age'],over_50['chol'], c = over_50['target'], cmap = 'winter' )  # Customize the plot ax.set(title = 'Hello')  # Add a meanline ax.axhline(over_50['chol'].mean(),            ls = '--',            color = 'red') Out[41]: <pre>&lt;matplotlib.lines.Line2D at 0x2cc209796f0&gt;</pre> <p>Beautiful! Now our figure has an upgraded color scheme let's save it to file.</p> In\u00a0[42]: Copied! <pre># Save the current figure using savefig(), the file name can be anything you want\n#fig.savefig('...')\n</pre> # Save the current figure using savefig(), the file name can be anything you want #fig.savefig('...') In\u00a0[43]: Copied! <pre># Reset the figure by calling plt.subplots()\nplt.subplots()\n</pre> # Reset the figure by calling plt.subplots() plt.subplots() Out[43]: <pre>(&lt;Figure size 640x480 with 1 Axes&gt;, &lt;AxesSubplot: &gt;)</pre>"},{"location":"chapter_12_data_analysis/exercises/matplotlib-exercises/#matplotlib-practice","title":"Matplotlib Practice\u00b6","text":"<p>This notebook offers a set of exercises to different tasks with Matplotlib.</p> <p>It should be noted there may be more than one different way to answer a question or complete an exercise.</p> <p>Different tasks will be detailed by comments or text.</p> <p>For further reference and resources, it's advised to check out the Matplotlib documentation.</p> <p>If you're stuck, don't forget, you can always search for a function, for example if you want to create a plot with <code>plt.subplots()</code>, search for <code>plt.subplots()</code>).</p>"},{"location":"chapter_12_data_analysis/exercises/matplotlib-exercises/#extensions","title":"Extensions\u00b6","text":"<p>For more exercises, check out the Matplotlib tutorials page. A good practice would be to read through it and for the parts you find interesting, add them into the end of this notebook.</p> <p>The next place you could go is the Stack Overflow page for the top questions and answers for Matplotlib. Often, you'll find some of the most common and useful Matplotlib functions here. Don't forget to play around with the Stack Overflow filters! You'll likely find something helpful here.</p> <p>Finally, as always, remember, the best way to learn something new is to try it. And try it relentlessly. Always be asking yourself, \"is there a better way this data could be visualized so it's easier to understand?\"</p>"},{"location":"chapter_12_data_analysis/exercises/numpy-exercises/","title":"NumPy Practice","text":"In\u00a0[1]: Copied! <pre># Import NumPy as its abbreviation 'np'\nimport numpy as np\n</pre> # Import NumPy as its abbreviation 'np' import numpy as np In\u00a0[9]: Copied! <pre># Create a 1-dimensional NumPy array using np.array()\na1 = np.array([1,2,3])\n\n# Create a 2-dimensional NumPy array using np.array()\na2 = np.array([[1,2,3],\n               [4,5,6]])\n\n# Create a 3-dimensional Numpy array using np.array()\na3 = np.array([[[1,2,3],\n                [4,5,6],\n                [7,8,9]],\n               [[10,11,12],\n                [13,14,15],\n                [16,17,18]]])\n</pre> # Create a 1-dimensional NumPy array using np.array() a1 = np.array([1,2,3])  # Create a 2-dimensional NumPy array using np.array() a2 = np.array([[1,2,3],                [4,5,6]])  # Create a 3-dimensional Numpy array using np.array() a3 = np.array([[[1,2,3],                 [4,5,6],                 [7,8,9]],                [[10,11,12],                 [13,14,15],                 [16,17,18]]]) <p>Now we've you've created 3 different arrays, let's find details about them.</p> <p>Find the shape, number of dimensions, data type, size and type of each array.</p> In\u00a0[10]: Copied! <pre># Attributes of 1-dimensional array (shape, \n# number of dimensions, data type, size and type)\na1.ndim, a1.dtype, a1.size, type(a1)\n</pre> # Attributes of 1-dimensional array (shape,  # number of dimensions, data type, size and type) a1.ndim, a1.dtype, a1.size, type(a1) Out[10]: <pre>(1, dtype('int32'), 3, numpy.ndarray)</pre> In\u00a0[11]: Copied! <pre># Attributes of 2-dimensional array\na2.ndim, a2.dtype, a2.size, type(a2)\n</pre> # Attributes of 2-dimensional array a2.ndim, a2.dtype, a2.size, type(a2) Out[11]: <pre>(2, dtype('int32'), 6, numpy.ndarray)</pre> In\u00a0[12]: Copied! <pre># Attributes of 3-dimensional array\na3.ndim, a3.dtype, a3.size, type(a3)\n</pre> # Attributes of 3-dimensional array a3.ndim, a3.dtype, a3.size, type(a3) Out[12]: <pre>(3, dtype('int32'), 18, numpy.ndarray)</pre> In\u00a0[14]: Copied! <pre># Import pandas and create a DataFrame out of one\n# of the arrays you've created\nimport pandas as pd\ndf1 = pd.DataFrame(a2)\ndf1\n</pre> # Import pandas and create a DataFrame out of one # of the arrays you've created import pandas as pd df1 = pd.DataFrame(a2) df1 Out[14]: 0 1 2 0 1 2 3 1 4 5 6 In\u00a0[15]: Copied! <pre># Create an array of shape (10, 2) with only ones\nones = np.ones((10,2))\nones\n</pre> # Create an array of shape (10, 2) with only ones ones = np.ones((10,2)) ones Out[15]: <pre>array([[1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.]])</pre> In\u00a0[16]: Copied! <pre># Create an array of shape (7, 2, 3) of only zeros\nzeros = np.zeros((7,2,3))\nzeros\n</pre> # Create an array of shape (7, 2, 3) of only zeros zeros = np.zeros((7,2,3)) zeros Out[16]: <pre>array([[[0., 0., 0.],\n        [0., 0., 0.]],\n\n       [[0., 0., 0.],\n        [0., 0., 0.]],\n\n       [[0., 0., 0.],\n        [0., 0., 0.]],\n\n       [[0., 0., 0.],\n        [0., 0., 0.]],\n\n       [[0., 0., 0.],\n        [0., 0., 0.]],\n\n       [[0., 0., 0.],\n        [0., 0., 0.]],\n\n       [[0., 0., 0.],\n        [0., 0., 0.]]])</pre> In\u00a0[17]: Copied! <pre># Create an array within a range of 0 and 100 with step 3\na_range = np.arange(0,100,3)\na_range\n</pre> # Create an array within a range of 0 and 100 with step 3 a_range = np.arange(0,100,3) a_range Out[17]: <pre>array([ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n       51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99])</pre> In\u00a0[19]: Copied! <pre># Create a random array with numbers between 0 and 10 of size (7, 2)\nrandom_array = np.random.randint(0,10, size=(7,2))\nrandom_array\n</pre> # Create a random array with numbers between 0 and 10 of size (7, 2) random_array = np.random.randint(0,10, size=(7,2)) random_array Out[19]: <pre>array([[2, 3],\n       [2, 8],\n       [7, 6],\n       [3, 2],\n       [0, 9],\n       [0, 7],\n       [9, 9]])</pre> In\u00a0[20]: Copied! <pre># Create a random array of floats between 0 &amp; 1 of shape (3, 5)\nrandom_array_2 = np.random.random((3,5))\nrandom_array_2\n</pre> # Create a random array of floats between 0 &amp; 1 of shape (3, 5) random_array_2 = np.random.random((3,5)) random_array_2 Out[20]: <pre>array([[0.32562732, 0.66053078, 0.59450311, 0.00163293, 0.88215498],\n       [0.4556074 , 0.49922244, 0.90686611, 0.8718346 , 0.54101627],\n       [0.78938774, 0.84097102, 0.92921351, 0.27464617, 0.93264094]])</pre> In\u00a0[24]: Copied! <pre># Set the random seed to 42\nnp.random.seed(2)\n\n# Create a random array of numbers between 0 &amp; 10 of size (4, 6)\nrandom_array_3 = np.random.randint(10, size = (4,6))\nrandom_array_3\n</pre> # Set the random seed to 42 np.random.seed(2)  # Create a random array of numbers between 0 &amp; 10 of size (4, 6) random_array_3 = np.random.randint(10, size = (4,6)) random_array_3 Out[24]: <pre>array([[8, 8, 6, 2, 8, 7],\n       [2, 1, 5, 4, 4, 5],\n       [7, 3, 6, 4, 3, 7],\n       [6, 1, 3, 5, 8, 4]])</pre> <p>Run the cell above again, what happens?</p> <p>Are the numbers in the array different or the same? Why do think this is?</p> In\u00a0[27]: Copied! <pre># Create an array of random numbers between 1 &amp; 10 of size (3, 7)\n# and save it to a variable\nrandom_array_4 = np.random.randint(1, 10, size=(3,7))\n\n# Find the unique numbers in the array you just created\nnp.unique(random_array_4)\n</pre> # Create an array of random numbers between 1 &amp; 10 of size (3, 7) # and save it to a variable random_array_4 = np.random.randint(1, 10, size=(3,7))  # Find the unique numbers in the array you just created np.unique(random_array_4) Out[27]: <pre>array([1, 2, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[30]: Copied! <pre># Find the 0'th index of the latest array you created\nrandom_array_4[0]\n</pre> # Find the 0'th index of the latest array you created random_array_4[0] Out[30]: <pre>array([7, 5, 6, 9, 4, 1, 1])</pre> In\u00a0[31]: Copied! <pre># Get the first 2 rows of latest array you created\nrandom_array_4[:2]\n</pre> # Get the first 2 rows of latest array you created random_array_4[:2] Out[31]: <pre>array([[7, 5, 6, 9, 4, 1, 1],\n       [6, 8, 6, 1, 9, 7, 6]])</pre> In\u00a0[32]: Copied! <pre># Get the first 2 values of the first 2 rows of the latest array\nrandom_array_4[:2,:2]\n</pre> # Get the first 2 values of the first 2 rows of the latest array random_array_4[:2,:2] Out[32]: <pre>array([[7, 5],\n       [6, 8]])</pre> In\u00a0[33]: Copied! <pre># Create a random array of numbers between 0 &amp; 10 and an array of ones\n# both of size (3, 5), save them both to variables\nrandom_array_5 = np.random.randint(1,10,size=(3,5))\nones = np.ones((3,5))\n</pre> # Create a random array of numbers between 0 &amp; 10 and an array of ones # both of size (3, 5), save them both to variables random_array_5 = np.random.randint(1,10,size=(3,5)) ones = np.ones((3,5)) In\u00a0[34]: Copied! <pre># Add the two arrays together\nrandom_array_5 + ones\n</pre> # Add the two arrays together random_array_5 + ones Out[34]: <pre>array([[ 2., 10.,  7.,  6.,  4.],\n       [ 9.,  3.,  4.,  3.,  2.],\n       [ 9.,  3., 10.,  2.,  9.]])</pre> In\u00a0[35]: Copied! <pre># Create another array of ones of shape (5, 3)\nones_1 = np.ones((5,3))\n</pre> # Create another array of ones of shape (5, 3) ones_1 = np.ones((5,3)) In\u00a0[41]: Copied! <pre># Try add the array of ones and the other most recent array together\nones + ones_1.T\n</pre> # Try add the array of ones and the other most recent array together ones + ones_1.T Out[41]: <pre>array([[2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.]])</pre> <p>When you try the last cell, it produces an error. Why do think this is?</p> <p>How would you fix it?</p> In\u00a0[37]: Copied! <pre># Create another array of ones of shape (3, 5)\nones_2 = np.ones((3,5))\n</pre> # Create another array of ones of shape (3, 5) ones_2 = np.ones((3,5)) In\u00a0[42]: Copied! <pre># Subtract the new array of ones from the other most recent array\nones - ones_2\n</pre> # Subtract the new array of ones from the other most recent array ones - ones_2 Out[42]: <pre>array([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])</pre> In\u00a0[43]: Copied! <pre># Multiply the ones array with the latest array\nones * ones_2\n</pre> # Multiply the ones array with the latest array ones * ones_2 Out[43]: <pre>array([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])</pre> In\u00a0[44]: Copied! <pre># Take the latest array to the power of 2 using '**'\nones_2 **2\n</pre> # Take the latest array to the power of 2 using '**' ones_2 **2 Out[44]: <pre>array([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])</pre> In\u00a0[45]: Copied! <pre># Do the same thing with np.square()\nnp.square(ones_2)\n</pre> # Do the same thing with np.square() np.square(ones_2) Out[45]: <pre>array([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])</pre> In\u00a0[46]: Copied! <pre># Find the mean of the latest array using np.mean()\nnp.mean(ones_2)\n</pre> # Find the mean of the latest array using np.mean() np.mean(ones_2) Out[46]: <pre>1.0</pre> In\u00a0[47]: Copied! <pre># Find the maximum of the latest array using np.max()\nnp.max(ones_2)\n</pre> # Find the maximum of the latest array using np.max() np.max(ones_2) Out[47]: <pre>1.0</pre> In\u00a0[48]: Copied! <pre># Find the minimum of the latest array using np.min()\nnp.min(ones_2)\n</pre> # Find the minimum of the latest array using np.min() np.min(ones_2) Out[48]: <pre>1.0</pre> In\u00a0[49]: Copied! <pre># Find the standard deviation of the latest array\nnp.std(ones_2)\n</pre> # Find the standard deviation of the latest array np.std(ones_2) Out[49]: <pre>0.0</pre> In\u00a0[50]: Copied! <pre># Find the variance of the latest array\nnp.var(ones_2)\n</pre> # Find the variance of the latest array np.var(ones_2) Out[50]: <pre>0.0</pre> In\u00a0[51]: Copied! <pre># Reshape the latest array to (3, 5, 1)\nones.reshape((3,5,1))\n</pre> # Reshape the latest array to (3, 5, 1) ones.reshape((3,5,1)) Out[51]: <pre>array([[[1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.]],\n\n       [[1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.]],\n\n       [[1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.]]])</pre> In\u00a0[53]: Copied! <pre># Transpose the latest array\nones_2.T\n</pre> # Transpose the latest array ones_2.T Out[53]: <pre>array([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])</pre> <p>What does the transpose do?</p> In\u00a0[54]: Copied! <pre># Create two arrays of random integers between 0 to 10\n# one of size (3, 3) the other of size (3, 2)\nnp.random.seed(0)\n\nrandom_ar1 = np.random.randint(10, size =(3,3))\nrandom_ar2 = np.random.randint(10, size =(3,2))\n</pre> # Create two arrays of random integers between 0 to 10 # one of size (3, 3) the other of size (3, 2) np.random.seed(0)  random_ar1 = np.random.randint(10, size =(3,3)) random_ar2 = np.random.randint(10, size =(3,2)) In\u00a0[55]: Copied! <pre># Perform a dot product on the two newest arrays you created\nrandom_ar1.dot(random_ar2)\n</pre> # Perform a dot product on the two newest arrays you created random_ar1.dot(random_ar2) Out[55]: <pre>array([[ 44,  38],\n       [126,  86],\n       [ 58,  63]])</pre> In\u00a0[56]: Copied! <pre># Create two arrays of random integers between 0 to 10\n# both of size (4, 3)\nrandom_ar3 = np.random.randint(10, size =(4,3))\nrandom_ar4 = np.random.randint(10, size =(4,3))\n</pre> # Create two arrays of random integers between 0 to 10 # both of size (4, 3) random_ar3 = np.random.randint(10, size =(4,3)) random_ar4 = np.random.randint(10, size =(4,3)) In\u00a0[59]: Copied! <pre># Perform a dot product on the two newest arrays you created\nrandom_ar3.dot(random_ar4)\n</pre> # Perform a dot product on the two newest arrays you created random_ar3.dot(random_ar4) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[59], line 2\n      1 # Perform a dot product on the two newest arrays you created\n----&gt; 2 random_ar3.dot(random_ar4)\n\nValueError: shapes (4,3) and (4,3) not aligned: 3 (dim 1) != 4 (dim 0)</pre> <p>It doesn't work. How would you fix it?</p> In\u00a0[60]: Copied! <pre># Take the latest two arrays, perform a transpose on one of them and then perform \n# a dot product on them both\nrandom_ar3.T.dot(random_ar4)\n</pre> # Take the latest two arrays, perform a transpose on one of them and then perform  # a dot product on them both random_ar3.T.dot(random_ar4) Out[60]: <pre>array([[ 55, 109,  91],\n       [ 40,  83,  32],\n       [ 40,  77,  67]])</pre> <p>Notice how performing a transpose allows the dot product to happen.</p> <p>Why is this?</p> <p>Checking out the documentation on <code>np.dot()</code> may help, as well as reading Math is Fun's guide on the dot product.</p> <p>Let's now compare arrays.</p> In\u00a0[61]: Copied! <pre># Create two arrays of random integers between 0 &amp; 10 of the same shape\n# and save them to variables\nrandom_ar5 = np.random.randint(10, size =(2,3))\nrandom_ar6 = np.random.randint(10, size =(2,3))\n</pre> # Create two arrays of random integers between 0 &amp; 10 of the same shape # and save them to variables random_ar5 = np.random.randint(10, size =(2,3)) random_ar6 = np.random.randint(10, size =(2,3)) In\u00a0[62]: Copied! <pre># Compare the two arrays with '&gt;'\nrandom_ar5 &gt; random_ar6\n</pre> # Compare the two arrays with '&gt;' random_ar5 &gt; random_ar6 Out[62]: <pre>array([[False,  True,  True],\n       [False,  True,  True]])</pre> <p>What happens when you compare the arrays with <code>&gt;</code>?</p> In\u00a0[63]: Copied! <pre># Compare the two arrays with '&gt;='\nrandom_ar5 &gt;= random_ar6\n</pre> # Compare the two arrays with '&gt;=' random_ar5 &gt;= random_ar6 Out[63]: <pre>array([[False,  True,  True],\n       [False,  True,  True]])</pre> In\u00a0[64]: Copied! <pre># Find which elements of the first array are greater than 7\nrandom_ar5 &gt; 7\n</pre> # Find which elements of the first array are greater than 7 random_ar5 &gt; 7 Out[64]: <pre>array([[False,  True,  True],\n       [False, False, False]])</pre> In\u00a0[65]: Copied! <pre># Which parts of each array are equal? (try using '==')\nrandom_ar5 == random_ar6\n</pre> # Which parts of each array are equal? (try using '==') random_ar5 == random_ar6 Out[65]: <pre>array([[False, False, False],\n       [False, False, False]])</pre> In\u00a0[66]: Copied! <pre># Sort one of the arrays you just created in ascending order\nnp.sort(random_ar5)\n</pre> # Sort one of the arrays you just created in ascending order np.sort(random_ar5) Out[66]: <pre>array([[1, 9, 9],\n       [0, 4, 7]])</pre> In\u00a0[67]: Copied! <pre># Sort the indexes of one of the arrays you just created\nnp.argsort(random_ar5)\n</pre> # Sort the indexes of one of the arrays you just created np.argsort(random_ar5) Out[67]: <pre>array([[0, 1, 2],\n       [0, 1, 2]], dtype=int64)</pre> In\u00a0[70]: Copied! <pre># Find the index with the maximum value in one of the arrays you've created\nnp.argmax(random_ar5)\n</pre> # Find the index with the maximum value in one of the arrays you've created np.argmax(random_ar5) Out[70]: <pre>1</pre> In\u00a0[71]: Copied! <pre># Find the index with the minimum value in one of the arrays you've created\nnp.argmin(random_ar5)\n</pre> # Find the index with the minimum value in one of the arrays you've created np.argmin(random_ar5) Out[71]: <pre>3</pre> In\u00a0[72]: Copied! <pre># Find the indexes with the maximum values down the 1st axis (axis=1)\n# of one of the arrays you created\nnp.argmax(random_ar5, axis = 1)\n</pre> # Find the indexes with the maximum values down the 1st axis (axis=1) # of one of the arrays you created np.argmax(random_ar5, axis = 1) Out[72]: <pre>array([1, 2], dtype=int64)</pre> In\u00a0[73]: Copied! <pre># Find the indexes with the minimum values across the 0th axis (axis=0)\n# of one of the arrays you created\nnp.argmin(random_ar5, axis = 0)\n</pre> # Find the indexes with the minimum values across the 0th axis (axis=0) # of one of the arrays you created np.argmin(random_ar5, axis = 0) Out[73]: <pre>array([1, 1, 1], dtype=int64)</pre> In\u00a0[76]: Copied! <pre># Create an array of normally distributed random numbers\nnp.random.normal(size = 5)\n</pre> # Create an array of normally distributed random numbers np.random.normal(size = 5) Out[76]: <pre>array([-0.44265324, -0.5409163 , -1.32322737, -0.11279892,  0.90734594])</pre> In\u00a0[74]: Copied! <pre># Create an array with 10 evenly spaced numbers between 1 and 100\nnp.linspace(1,100,10)\n</pre> # Create an array with 10 evenly spaced numbers between 1 and 100 np.linspace(1,100,10) Out[74]: <pre>array([  1.,  12.,  23.,  34.,  45.,  56.,  67.,  78.,  89., 100.])</pre>"},{"location":"chapter_12_data_analysis/exercises/numpy-exercises/#numpy-practice","title":"NumPy Practice\u00b6","text":"<p>This notebook offers a set of exercises for different tasks with NumPy.</p> <p>It should be noted there may be more than one different way to answer a question or complete an exercise.</p> <p>Different tasks will be detailed by comments or text.</p> <p>For further reference and resources, it's advised to check out the NumPy documentation.</p> <p>And if you get stuck, try searching for a question in the following format: \"how to do XYZ with numpy\", where XYZ is the function you want to leverage from NumPy.</p>"},{"location":"chapter_12_data_analysis/exercises/numpy-exercises/#extensions","title":"Extensions\u00b6","text":"<p>For more exercises, check out the NumPy quickstart tutorial. A good practice would be to read through it and for the parts you find interesting, add them into the end of this notebook.</p> <p>Pay particular attention to the section on broadcasting. And most importantly, get hands-on with the code as much as possible. If in dobut, run the code, see what it does.</p> <p>The next place you could go is the Stack Overflow page for the top questions and answers for NumPy. Often, you'll find some of the most common and useful NumPy functions here. Don't forget to play around with the filters! You'll likely find something helpful here.</p> <p>Finally, as always, remember, the best way to learn something new is to try it. And try it relentlessly. If you get interested in some kind of NumPy function, asking yourself, \"I wonder if NumPy could do that?\", go and find out.</p>"},{"location":"chapter_12_data_analysis/exercises/pandas-exercises/","title":"Pandas Practice","text":"In\u00a0[1]: Copied! <pre># Import pandas\nimport pandas as pd\n</pre> # Import pandas import pandas as pd In\u00a0[2]: Copied! <pre># Create a series of three different colours\ncolours = pd.Series(['Red','Black','Blue'])\n</pre> # Create a series of three different colours colours = pd.Series(['Red','Black','Blue']) In\u00a0[3]: Copied! <pre># View the series of different colours\ncolours\n</pre> # View the series of different colours colours Out[3]: <pre>0      Red\n1    Black\n2     Blue\ndtype: object</pre> In\u00a0[4]: Copied! <pre># Create a series of three different car types and view it\ncars = pd.Series(['BMW', 'Honda', 'Ferari'])\ncars\n</pre> # Create a series of three different car types and view it cars = pd.Series(['BMW', 'Honda', 'Ferari']) cars Out[4]: <pre>0       BMW\n1     Honda\n2    Ferari\ndtype: object</pre> In\u00a0[5]: Copied! <pre># Combine the Series of cars and colours into a DataFrame\ncars_type = pd.DataFrame({'Cars':cars, 'Colour':colours})\ncars_type\n</pre> # Combine the Series of cars and colours into a DataFrame cars_type = pd.DataFrame({'Cars':cars, 'Colour':colours}) cars_type Out[5]: Cars Colour 0 BMW Red 1 Honda Black 2 Ferari Blue In\u00a0[6]: Copied! <pre># Import \"../data/car-sales.csv\" and turn it into a DataFrame\ncar_sales = pd.read_csv(\"data\\car-sales.csv\")\ncar_sales\n</pre> # Import \"../data/car-sales.csv\" and turn it into a DataFrame car_sales = pd.read_csv(\"data\\car-sales.csv\") car_sales Out[6]: Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 1 Honda Red 87899 4 $5,000.00 2 Toyota Blue 32549 3 $7,000.00 3 BMW Black 11179 5 $22,000.00 4 Nissan White 213095 4 $3,500.00 5 Toyota Green 99213 4 $4,500.00 6 Honda Blue 45698 4 $7,500.00 7 Honda Blue 54738 4 $7,000.00 8 Toyota White 60000 4 $6,250.00 9 Nissan White 31600 4 $9,700.00 <p>Note: Since you've imported <code>../data/car-sales.csv</code> as a DataFrame, we'll now refer to this DataFrame as 'the car sales DataFrame'.</p> In\u00a0[7]: Copied! <pre># Export the DataFrame you created to a .csv file\ncar_sales.to_csv('data\\Exported_car_sales.csv')\n</pre> # Export the DataFrame you created to a .csv file car_sales.to_csv('data\\Exported_car_sales.csv') In\u00a0[8]: Copied! <pre># Find the different datatypes of the car data DataFrame\ncar_sales.dtypes\n</pre> # Find the different datatypes of the car data DataFrame car_sales.dtypes Out[8]: <pre>Make             object\nColour           object\nOdometer (KM)     int64\nDoors             int64\nPrice            object\ndtype: object</pre> In\u00a0[9]: Copied! <pre># Describe your current car sales DataFrame using describe()\ncar_sales.describe()\n</pre> # Describe your current car sales DataFrame using describe() car_sales.describe() Out[9]: Odometer (KM) Doors count 10.000000 10.000000 mean 78601.400000 4.000000 std 61983.471735 0.471405 min 11179.000000 3.000000 25% 35836.250000 4.000000 50% 57369.000000 4.000000 75% 96384.500000 4.000000 max 213095.000000 5.000000 In\u00a0[10]: Copied! <pre># Get information about your DataFrame using info()\ncar_sales.info()\n</pre> # Get information about your DataFrame using info() car_sales.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10 entries, 0 to 9\nData columns (total 5 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   Make           10 non-null     object\n 1   Colour         10 non-null     object\n 2   Odometer (KM)  10 non-null     int64 \n 3   Doors          10 non-null     int64 \n 4   Price          10 non-null     object\ndtypes: int64(2), object(3)\nmemory usage: 528.0+ bytes\n</pre> <p>What does it show you?</p> In\u00a0[11]: Copied! <pre># Create a Series of different numbers and find the mean of them\nnum = pd.Series([4,5,6,7,8])\nnum.mean()\n</pre> # Create a Series of different numbers and find the mean of them num = pd.Series([4,5,6,7,8]) num.mean() Out[11]: <pre>6.0</pre> In\u00a0[12]: Copied! <pre># Create a Series of different numbers and find the sum of them\nnum.sum()\n</pre> # Create a Series of different numbers and find the sum of them num.sum() Out[12]: <pre>30</pre> In\u00a0[13]: Copied! <pre># List out all the column names of the car sales DataFrame\ncar_sales.columns\n</pre> # List out all the column names of the car sales DataFrame car_sales.columns Out[13]: <pre>Index(['Make', 'Colour', 'Odometer (KM)', 'Doors', 'Price'], dtype='object')</pre> In\u00a0[14]: Copied! <pre># Find the length of the car sales DataFrame\nlen(car_sales)\n</pre> # Find the length of the car sales DataFrame len(car_sales) Out[14]: <pre>10</pre> In\u00a0[15]: Copied! <pre># Show the first 5 rows of the car sales DataFrame\ncar_sales.head()\n</pre> # Show the first 5 rows of the car sales DataFrame car_sales.head() Out[15]: Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 1 Honda Red 87899 4 $5,000.00 2 Toyota Blue 32549 3 $7,000.00 3 BMW Black 11179 5 $22,000.00 4 Nissan White 213095 4 $3,500.00 In\u00a0[16]: Copied! <pre># Show the first 7 rows of the car sales DataFrame\ncar_sales.head(7)\n</pre> # Show the first 7 rows of the car sales DataFrame car_sales.head(7) Out[16]: Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 1 Honda Red 87899 4 $5,000.00 2 Toyota Blue 32549 3 $7,000.00 3 BMW Black 11179 5 $22,000.00 4 Nissan White 213095 4 $3,500.00 5 Toyota Green 99213 4 $4,500.00 6 Honda Blue 45698 4 $7,500.00 In\u00a0[17]: Copied! <pre># Show the bottom 5 rows of the car sales DataFrame\ncar_sales.tail()\n</pre> # Show the bottom 5 rows of the car sales DataFrame car_sales.tail() Out[17]: Make Colour Odometer (KM) Doors Price 5 Toyota Green 99213 4 $4,500.00 6 Honda Blue 45698 4 $7,500.00 7 Honda Blue 54738 4 $7,000.00 8 Toyota White 60000 4 $6,250.00 9 Nissan White 31600 4 $9,700.00 In\u00a0[18]: Copied! <pre># Use .loc to select the row at index 3 of the car sales DataFrame\ncar_sales.loc[3]\n</pre> # Use .loc to select the row at index 3 of the car sales DataFrame car_sales.loc[3] Out[18]: <pre>Make                    BMW\nColour                Black\nOdometer (KM)         11179\nDoors                     5\nPrice            $22,000.00\nName: 3, dtype: object</pre> In\u00a0[19]: Copied! <pre># Use .iloc to select the row at position 3 of the car sales DataFrame\ncar_sales.iloc[3]\n</pre> # Use .iloc to select the row at position 3 of the car sales DataFrame car_sales.iloc[3] Out[19]: <pre>Make                    BMW\nColour                Black\nOdometer (KM)         11179\nDoors                     5\nPrice            $22,000.00\nName: 3, dtype: object</pre> <p>Notice how they're the same? Why do you think this is?</p> <p>Check the pandas documentation for .loc and .iloc. Think about a different situation each could be used for and try them out.</p> In\u00a0[20]: Copied! <pre># Select the \"Odometer (KM)\" column from the car sales DataFrame\ncar_sales['Odometer (KM)']\n</pre> # Select the \"Odometer (KM)\" column from the car sales DataFrame car_sales['Odometer (KM)'] Out[20]: <pre>0    150043\n1     87899\n2     32549\n3     11179\n4    213095\n5     99213\n6     45698\n7     54738\n8     60000\n9     31600\nName: Odometer (KM), dtype: int64</pre> In\u00a0[21]: Copied! <pre># Find the mean of the \"Odometer (KM)\" column in the car sales DataFrame\ncar_sales['Odometer (KM)'].mean()\n</pre> # Find the mean of the \"Odometer (KM)\" column in the car sales DataFrame car_sales['Odometer (KM)'].mean() Out[21]: <pre>78601.4</pre> In\u00a0[22]: Copied! <pre># Select the rows with over 100,000 kilometers on the Odometer\ncar_sales[car_sales['Odometer (KM)']&gt;100000]\n</pre> # Select the rows with over 100,000 kilometers on the Odometer car_sales[car_sales['Odometer (KM)']&gt;100000] Out[22]: Make Colour Odometer (KM) Doors Price 0 Toyota White 150043 4 $4,000.00 4 Nissan White 213095 4 $3,500.00 In\u00a0[23]: Copied! <pre># Create a crosstab of the Make and Doors columns\npd.crosstab(car_sales['Make'], car_sales['Doors'])\n</pre> # Create a crosstab of the Make and Doors columns pd.crosstab(car_sales['Make'], car_sales['Doors']) Out[23]: Doors 3 4 5 Make BMW 0 0 1 Honda 0 3 0 Nissan 0 2 0 Toyota 1 3 0 In\u00a0[24]: Copied! <pre># Group columns of the car sales DataFrame by the Make column and find the average\ncar_sales.groupby(['Make']).mean()\n</pre> # Group columns of the car sales DataFrame by the Make column and find the average car_sales.groupby(['Make']).mean() <pre>C:\\Users\\Nirajan\\AppData\\Local\\Temp\\ipykernel_20428\\2652151491.py:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  car_sales.groupby(['Make']).mean()\n</pre> Out[24]: Odometer (KM) Doors Make BMW 11179.000000 5.00 Honda 62778.333333 4.00 Nissan 122347.500000 4.00 Toyota 85451.250000 3.75 In\u00a0[25]: Copied! <pre># Import Matplotlib and create a plot of the Odometer column\n# Don't forget to use %matplotlib inline\nimport matplotlib as plt\n%matplotlib inline\ncar_sales['Odometer (KM)'].plot()\n</pre> # Import Matplotlib and create a plot of the Odometer column # Don't forget to use %matplotlib inline import matplotlib as plt %matplotlib inline car_sales['Odometer (KM)'].plot() Out[25]: <pre>&lt;AxesSubplot: &gt;</pre> In\u00a0[26]: Copied! <pre># Create a histogram of the Odometer column using hist()\ncar_sales['Odometer (KM)'].hist()\n</pre> # Create a histogram of the Odometer column using hist() car_sales['Odometer (KM)'].hist() Out[26]: <pre>&lt;AxesSubplot: &gt;</pre> In\u00a0[27]: Copied! <pre># Try to plot the Price column using plot()\n# Remove the punctuation from price column\n# Remove the two extra zeros at the end of the price column\n# Change the datatype of Price column to integer\ncar_sales['Price'] = car_sales['Price'].str.replace('[\\.\\$\\,]','').astype(int)/100\n</pre> # Try to plot the Price column using plot() # Remove the punctuation from price column # Remove the two extra zeros at the end of the price column # Change the datatype of Price column to integer car_sales['Price'] = car_sales['Price'].str.replace('[\\.\\$\\,]','').astype(int)/100 <pre>C:\\Users\\Nirajan\\AppData\\Local\\Temp\\ipykernel_20428\\3402602744.py:5: FutureWarning: The default value of regex will change from True to False in a future version.\n  car_sales['Price'] = car_sales['Price'].str.replace('[\\.\\$\\,]','').astype(int)/100\n</pre> In\u00a0[28]: Copied! <pre>car_sales['Price'].plot()\n</pre> car_sales['Price'].plot() Out[28]: <pre>&lt;AxesSubplot: &gt;</pre> <p>Why didn't it work? Can you think of a solution?</p> <p>You might want to search for \"how to convert a pandas string column to numbers\".</p> <p>And if you're still stuck, check out this Stack Overflow question and answer on turning a price column into integers.</p> <p>See how you can provide the example code there to the problem here.</p> In\u00a0[29]: Copied! <pre># Lower the strings of the Make column\ncar_sales['Make'].str.lower()\n</pre> # Lower the strings of the Make column car_sales['Make'].str.lower() Out[29]: <pre>0    toyota\n1     honda\n2    toyota\n3       bmw\n4    nissan\n5    toyota\n6     honda\n7     honda\n8    toyota\n9    nissan\nName: Make, dtype: object</pre> <p>If you check the car sales DataFrame, you'll notice the Make column hasn't been lowered.</p> <p>How could you make these changes permanent?</p> <p>Try it out.</p> In\u00a0[30]: Copied! <pre># Make lowering the case of the Make column permanent\ncar_sales['Make'] = car_sales['Make'].str.lower()\n</pre> # Make lowering the case of the Make column permanent car_sales['Make'] = car_sales['Make'].str.lower() In\u00a0[31]: Copied! <pre># Check the car sales DataFrame\ncar_sales\n</pre> # Check the car sales DataFrame car_sales Out[31]: Make Colour Odometer (KM) Doors Price 0 toyota White 150043 4 4000.0 1 honda Red 87899 4 5000.0 2 toyota Blue 32549 3 7000.0 3 bmw Black 11179 5 22000.0 4 nissan White 213095 4 3500.0 5 toyota Green 99213 4 4500.0 6 honda Blue 45698 4 7500.0 7 honda Blue 54738 4 7000.0 8 toyota White 60000 4 6250.0 9 nissan White 31600 4 9700.0 <p>Notice how the Make column stays lowered after reassigning.</p> <p>Now let's deal with missing data.</p> In\u00a0[32]: Copied! <pre># Import the car sales DataFrame with missing data (\"../data/car-sales-missing-data.csv\")\ncar_sales_missing = pd.read_csv(\"data\\car-sales-missing-data.csv\")\n\n# Check out the new DataFrame\ncar_sales_missing\n</pre> # Import the car sales DataFrame with missing data (\"../data/car-sales-missing-data.csv\") car_sales_missing = pd.read_csv(\"data\\car-sales-missing-data.csv\")  # Check out the new DataFrame car_sales_missing Out[32]: Make Colour Odometer Doors Price 0 Toyota White 150043.0 4.0 $4,000 1 Honda Red 87899.0 4.0 $5,000 2 Toyota Blue NaN 3.0 $7,000 3 BMW Black 11179.0 5.0 $22,000 4 Nissan White 213095.0 4.0 $3,500 5 Toyota Green NaN 4.0 $4,500 6 Honda NaN NaN 4.0 $7,500 7 Honda Blue NaN 4.0 NaN 8 Toyota White 60000.0 NaN NaN 9 NaN White 31600.0 4.0 $9,700 <p>Notice the missing values are represented as <code>NaN</code> in pandas DataFrames.</p> <p>Let's try fill them.</p> In\u00a0[33]: Copied! <pre># Fill the Odometer column missing values with the mean of the column inplace\ncar_sales_missing['Odometer'].fillna(car_sales_missing['Odometer'].mean(), inplace = True)\n</pre> # Fill the Odometer column missing values with the mean of the column inplace car_sales_missing['Odometer'].fillna(car_sales_missing['Odometer'].mean(), inplace = True) In\u00a0[34]: Copied! <pre># View the car sales missing DataFrame and verify the changes\ncar_sales_missing\n</pre> # View the car sales missing DataFrame and verify the changes car_sales_missing Out[34]: Make Colour Odometer Doors Price 0 Toyota White 150043.000000 4.0 $4,000 1 Honda Red 87899.000000 4.0 $5,000 2 Toyota Blue 92302.666667 3.0 $7,000 3 BMW Black 11179.000000 5.0 $22,000 4 Nissan White 213095.000000 4.0 $3,500 5 Toyota Green 92302.666667 4.0 $4,500 6 Honda NaN 92302.666667 4.0 $7,500 7 Honda Blue 92302.666667 4.0 NaN 8 Toyota White 60000.000000 NaN NaN 9 NaN White 31600.000000 4.0 $9,700 In\u00a0[35]: Copied! <pre># Remove the rest of the missing data inplace\ncar_sales_missing = pd.read_csv(\"data\\car-sales-missing-data.csv\")\ncar_sales_missing = car_sales_missing.dropna()\n</pre> # Remove the rest of the missing data inplace car_sales_missing = pd.read_csv(\"data\\car-sales-missing-data.csv\") car_sales_missing = car_sales_missing.dropna() In\u00a0[36]: Copied! <pre># Verify the missing values are removed by viewing the DataFrame\ncar_sales_missing\n</pre> # Verify the missing values are removed by viewing the DataFrame car_sales_missing Out[36]: Make Colour Odometer Doors Price 0 Toyota White 150043.0 4.0 $4,000 1 Honda Red 87899.0 4.0 $5,000 3 BMW Black 11179.0 5.0 $22,000 4 Nissan White 213095.0 4.0 $3,500 <p>We'll now start to add columns to our DataFrame.</p> In\u00a0[37]: Copied! <pre># Create a \"Seats\" column where every row has a value of 5\ncar_sales['Seats'] = 5\ncar_sales\n</pre> # Create a \"Seats\" column where every row has a value of 5 car_sales['Seats'] = 5 car_sales Out[37]: Make Colour Odometer (KM) Doors Price Seats 0 toyota White 150043 4 4000.0 5 1 honda Red 87899 4 5000.0 5 2 toyota Blue 32549 3 7000.0 5 3 bmw Black 11179 5 22000.0 5 4 nissan White 213095 4 3500.0 5 5 toyota Green 99213 4 4500.0 5 6 honda Blue 45698 4 7500.0 5 7 honda Blue 54738 4 7000.0 5 8 toyota White 60000 4 6250.0 5 9 nissan White 31600 4 9700.0 5 In\u00a0[38]: Copied! <pre># Create a column called \"Engine Size\" with random values between 1.3 and 4.5\n# Remember: If you're doing it from a Python list, the list has to be the same length\n# as the DataFrame\nimport random\nEngine_size = [random.uniform(1.3,4.5) for x in range(10)]\ncar_sales['Engine Size'] = Engine_size\ncar_sales\n</pre> # Create a column called \"Engine Size\" with random values between 1.3 and 4.5 # Remember: If you're doing it from a Python list, the list has to be the same length # as the DataFrame import random Engine_size = [random.uniform(1.3,4.5) for x in range(10)] car_sales['Engine Size'] = Engine_size car_sales Out[38]: Make Colour Odometer (KM) Doors Price Seats Engine Size 0 toyota White 150043 4 4000.0 5 1.410199 1 honda Red 87899 4 5000.0 5 1.664922 2 toyota Blue 32549 3 7000.0 5 3.952899 3 bmw Black 11179 5 22000.0 5 4.112218 4 nissan White 213095 4 3500.0 5 1.686197 5 toyota Green 99213 4 4500.0 5 3.751928 6 honda Blue 45698 4 7500.0 5 3.921739 7 honda Blue 54738 4 7000.0 5 1.848965 8 toyota White 60000 4 6250.0 5 3.240494 9 nissan White 31600 4 9700.0 5 3.690848 In\u00a0[39]: Copied! <pre># Create a column which represents the price of a car per kilometer\n# Then view the DataFrame\ncar_sales['car per kilometer'] =car_sales['Price']/car_sales['Odometer (KM)'] \ncar_sales\n</pre> # Create a column which represents the price of a car per kilometer # Then view the DataFrame car_sales['car per kilometer'] =car_sales['Price']/car_sales['Odometer (KM)']  car_sales Out[39]: Make Colour Odometer (KM) Doors Price Seats Engine Size car per kilometer 0 toyota White 150043 4 4000.0 5 1.410199 0.026659 1 honda Red 87899 4 5000.0 5 1.664922 0.056883 2 toyota Blue 32549 3 7000.0 5 3.952899 0.215060 3 bmw Black 11179 5 22000.0 5 4.112218 1.967976 4 nissan White 213095 4 3500.0 5 1.686197 0.016425 5 toyota Green 99213 4 4500.0 5 3.751928 0.045357 6 honda Blue 45698 4 7500.0 5 3.921739 0.164121 7 honda Blue 54738 4 7000.0 5 1.848965 0.127882 8 toyota White 60000 4 6250.0 5 3.240494 0.104167 9 nissan White 31600 4 9700.0 5 3.690848 0.306962 In\u00a0[40]: Copied! <pre># Remove the last column you added using .drop()\ncar_sales.drop('car per kilometer',axis= 1,inplace = True)\ncar_sales\n</pre> # Remove the last column you added using .drop() car_sales.drop('car per kilometer',axis= 1,inplace = True) car_sales Out[40]: Make Colour Odometer (KM) Doors Price Seats Engine Size 0 toyota White 150043 4 4000.0 5 1.410199 1 honda Red 87899 4 5000.0 5 1.664922 2 toyota Blue 32549 3 7000.0 5 3.952899 3 bmw Black 11179 5 22000.0 5 4.112218 4 nissan White 213095 4 3500.0 5 1.686197 5 toyota Green 99213 4 4500.0 5 3.751928 6 honda Blue 45698 4 7500.0 5 3.921739 7 honda Blue 54738 4 7000.0 5 1.848965 8 toyota White 60000 4 6250.0 5 3.240494 9 nissan White 31600 4 9700.0 5 3.690848 In\u00a0[41]: Copied! <pre># Shuffle the DataFrame using sample() with the frac parameter set to 1\n# Save the the shuffled DataFrame to a new variable\ncar_sales_suffled = car_sales.sample(frac = 1)\ncar_sales_suffled\n</pre> # Shuffle the DataFrame using sample() with the frac parameter set to 1 # Save the the shuffled DataFrame to a new variable car_sales_suffled = car_sales.sample(frac = 1) car_sales_suffled Out[41]: Make Colour Odometer (KM) Doors Price Seats Engine Size 0 toyota White 150043 4 4000.0 5 1.410199 9 nissan White 31600 4 9700.0 5 3.690848 3 bmw Black 11179 5 22000.0 5 4.112218 4 nissan White 213095 4 3500.0 5 1.686197 7 honda Blue 54738 4 7000.0 5 1.848965 6 honda Blue 45698 4 7500.0 5 3.921739 1 honda Red 87899 4 5000.0 5 1.664922 8 toyota White 60000 4 6250.0 5 3.240494 2 toyota Blue 32549 3 7000.0 5 3.952899 5 toyota Green 99213 4 4500.0 5 3.751928 <p>Notice how the index numbers get moved around. The <code>sample()</code> function is a great way to get random samples from your DataFrame. It's also another great way to shuffle the rows by setting <code>frac=1</code>.</p> In\u00a0[42]: Copied! <pre># Reset the indexes of the shuffled DataFrame\ncar_sales_suffled.reset_index(drop = True, inplace = True)\ncar_sales_suffled\n</pre> # Reset the indexes of the shuffled DataFrame car_sales_suffled.reset_index(drop = True, inplace = True) car_sales_suffled Out[42]: Make Colour Odometer (KM) Doors Price Seats Engine Size 0 toyota White 150043 4 4000.0 5 1.410199 1 nissan White 31600 4 9700.0 5 3.690848 2 bmw Black 11179 5 22000.0 5 4.112218 3 nissan White 213095 4 3500.0 5 1.686197 4 honda Blue 54738 4 7000.0 5 1.848965 5 honda Blue 45698 4 7500.0 5 3.921739 6 honda Red 87899 4 5000.0 5 1.664922 7 toyota White 60000 4 6250.0 5 3.240494 8 toyota Blue 32549 3 7000.0 5 3.952899 9 toyota Green 99213 4 4500.0 5 3.751928 <p>Notice the index numbers have been changed to have order (start from 0).</p> In\u00a0[43]: Copied! <pre># Change the Odometer values from kilometers to miles using a Lambda function\n# Then view the DataFrame\ncar_sales_suffled['Odometer (KM)'] = car_sales_suffled['Odometer (KM)'].apply(lambda x: x/1.6)\ncar_sales_suffled\n</pre> # Change the Odometer values from kilometers to miles using a Lambda function # Then view the DataFrame car_sales_suffled['Odometer (KM)'] = car_sales_suffled['Odometer (KM)'].apply(lambda x: x/1.6) car_sales_suffled Out[43]: Make Colour Odometer (KM) Doors Price Seats Engine Size 0 toyota White 93776.875 4 4000.0 5 1.410199 1 nissan White 19750.000 4 9700.0 5 3.690848 2 bmw Black 6986.875 5 22000.0 5 4.112218 3 nissan White 133184.375 4 3500.0 5 1.686197 4 honda Blue 34211.250 4 7000.0 5 1.848965 5 honda Blue 28561.250 4 7500.0 5 3.921739 6 honda Red 54936.875 4 5000.0 5 1.664922 7 toyota White 37500.000 4 6250.0 5 3.240494 8 toyota Blue 20343.125 3 7000.0 5 3.952899 9 toyota Green 62008.125 4 4500.0 5 3.751928 In\u00a0[44]: Copied! <pre># Change the title of the Odometer (KM) to represent miles instead of kilometers\ncar_sales_suffled.rename(columns = {'Odometer (KM)':'Odometer (miles)'},inplace=True)\n</pre> # Change the title of the Odometer (KM) to represent miles instead of kilometers car_sales_suffled.rename(columns = {'Odometer (KM)':'Odometer (miles)'},inplace=True) In\u00a0[45]: Copied! <pre>car_sales_suffled\n</pre> car_sales_suffled Out[45]: Make Colour Odometer (miles) Doors Price Seats Engine Size 0 toyota White 93776.875 4 4000.0 5 1.410199 1 nissan White 19750.000 4 9700.0 5 3.690848 2 bmw Black 6986.875 5 22000.0 5 4.112218 3 nissan White 133184.375 4 3500.0 5 1.686197 4 honda Blue 34211.250 4 7000.0 5 1.848965 5 honda Blue 28561.250 4 7500.0 5 3.921739 6 honda Red 54936.875 4 5000.0 5 1.664922 7 toyota White 37500.000 4 6250.0 5 3.240494 8 toyota Blue 20343.125 3 7000.0 5 3.952899 9 toyota Green 62008.125 4 4500.0 5 3.751928"},{"location":"chapter_12_data_analysis/exercises/pandas-exercises/#pandas-practice","title":"Pandas Practice\u00b6","text":"<p>This notebook is dedicated to practicing different tasks with pandas. The solutions are available in a solutions notebook, however, you should always try to figure them out yourself first.</p> <p>It should be noted there may be more than one different way to answer a question or complete an exercise.</p> <p>Different tasks will be detailed by comments or text.</p> <p>For further reference and resources, it's advised to check out the pandas documentation.</p>"},{"location":"chapter_12_data_analysis/exercises/pandas-exercises/#extensions","title":"Extensions\u00b6","text":"<p>For more exercises, check out the pandas documentation, particularly the 10-minutes to pandas section.</p> <p>One great exercise would be to retype out the entire section into a Jupyter Notebook of your own.</p> <p>Get hands-on with the code and see what it does.</p> <p>The next place you should check out are the top questions and answers on Stack Overflow for pandas. Often, these contain some of the most useful and common pandas functions. Be sure to play around with the different filters!</p> <p>Finally, always remember, the best way to learn something new to is try it. Make mistakes. Ask questions, get things wrong, take note of the things you do most often. And don't worry if you keep making the same mistake, pandas has many ways to do the same thing and is a big library. So it'll likely take a while before you get the hang of it.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/","title":"Scikit-Learn Practice Exercises","text":"In\u00a0[\u00a0]: Copied! <pre># Setup matplotlib to plot inline (within the notebook)\n###\n\n# Import the pyplot module of Matplotlib as plt\n###\n\n# Import pandas under the abbreviation 'pd'\n###\n\n# Import NumPy under the abbreviation 'np'\n###\n</pre> # Setup matplotlib to plot inline (within the notebook) ###  # Import the pyplot module of Matplotlib as plt ###  # Import pandas under the abbreviation 'pd' ###  # Import NumPy under the abbreviation 'np' ### In\u00a0[\u00a0]: Copied! <pre># Import the heart disease dataset and save it to a variable\n# using pandas and read_csv()\n# Hint: You can directly pass the URL of a csv to read_csv()\nheart_disease = ###\n\n# Check the first 5 rows of the data\n###\n</pre> # Import the heart disease dataset and save it to a variable # using pandas and read_csv() # Hint: You can directly pass the URL of a csv to read_csv() heart_disease = ###  # Check the first 5 rows of the data ### <p>Our goal here is to build a machine learning model on all of the columns except <code>target</code> to predict <code>target</code>.</p> <p>In essence, the <code>target</code> column is our target variable (also called <code>y</code> or <code>labels</code>) and the rest of the other columns are our independent variables (also called <code>data</code> or <code>X</code>).</p> <p>And since our target variable is one thing or another (heart disease or not), we know our problem is a classification problem (classifying whether something is one thing or another).</p> <p>Knowing this, let's create <code>X</code> and <code>y</code> by splitting our dataframe up.</p> In\u00a0[\u00a0]: Copied! <pre># Create X (all columns except target)\nX = ###\n\n# Create y (only the target column)\ny = ###\n</pre> # Create X (all columns except target) X = ###  # Create y (only the target column) y = ### <p>Now we've split our data into <code>X</code> and <code>y</code>, we'll use Scikit-Learn to split it into training and test sets.</p> In\u00a0[\u00a0]: Copied! <pre># Import train_test_split from sklearn's model_selection module\n###\n\n# Use train_test_split to split X &amp; y into training and test sets\nX_train, X_test, y_train, y_test = ###\n</pre> # Import train_test_split from sklearn's model_selection module ###  # Use train_test_split to split X &amp; y into training and test sets X_train, X_test, y_train, y_test = ### In\u00a0[\u00a0]: Copied! <pre># View the different shapes of the training and test datasets\n###\n</pre> # View the different shapes of the training and test datasets ### <p>What do you notice about the different shapes of the data?</p> <p>Since our data is now in training and test sets, we'll build a machine learning model to fit patterns in the training data and then make predictions on the test data.</p> <p>To figure out which machine learning model we should use, you can refer to Scikit-Learn's machine learning map.</p> <p>After following the map, you decide to use the <code>RandomForestClassifier</code>.</p> In\u00a0[\u00a0]: Copied! <pre># Import the RandomForestClassifier from sklearn's ensemble module\n###\n\n# Instantiate an instance of RandomForestClassifier as clf\nclf = \n</pre> # Import the RandomForestClassifier from sklearn's ensemble module ###  # Instantiate an instance of RandomForestClassifier as clf clf =  <p>Now you've got a <code>RandomForestClassifier</code> instance, let's fit it to the training data.</p> <p>Once it's fit, we'll make predictions on the test data.</p> In\u00a0[\u00a0]: Copied! <pre># Fit the RandomForestClassifier to the training data\nclf.fit(###, ###)\n</pre> # Fit the RandomForestClassifier to the training data clf.fit(###, ###) In\u00a0[\u00a0]: Copied! <pre># Use the fitted model to make predictions on the test data and\n# save the predictions to a variable called y_preds\ny_preds = clf.predict(###)\n</pre> # Use the fitted model to make predictions on the test data and # save the predictions to a variable called y_preds y_preds = clf.predict(###) In\u00a0[\u00a0]: Copied! <pre># Evaluate the fitted model on the training set using the score() function\n###\n</pre> # Evaluate the fitted model on the training set using the score() function ### In\u00a0[\u00a0]: Copied! <pre># Evaluate the fitted model on the test set using the score() function\n###\n</pre> # Evaluate the fitted model on the test set using the score() function ### <ul> <li>How did you model go?</li> <li>What metric does <code>score()</code> return for classifiers?</li> <li>Did your model do better on the training dataset or test dataset?</li> </ul> In\u00a0[1]: Copied! <pre># Import LinearSVC from sklearn's svm module\n###\n\n# Import KNeighborsClassifier from sklearn's neighbors module\n###\n\n# Import SVC from sklearn's svm module\n###\n\n# Import LogisticRegression from sklearn's linear_model module\n###\n\n# Note: we don't have to import RandomForestClassifier, since we already have\n</pre> # Import LinearSVC from sklearn's svm module ###  # Import KNeighborsClassifier from sklearn's neighbors module ###  # Import SVC from sklearn's svm module ###  # Import LogisticRegression from sklearn's linear_model module ###  # Note: we don't have to import RandomForestClassifier, since we already have <p>Thanks to the consistency of Scikit-Learn's API design, we can use virtually the same code to fit, score and make predictions with each of our models.</p> <p>To see which model performs best, we'll do the following:</p> <ol> <li>Instantiate each model in a dictionary</li> <li>Create an empty results dictionary</li> <li>Fit each model on the training data</li> <li>Score each model on the test data</li> <li>Check the results</li> </ol> <p>If you're wondering what it means to instantiate each model in a dictionary, see the example below.</p> In\u00a0[\u00a0]: Copied! <pre># EXAMPLE: Instantiating a RandomForestClassifier() in a dictionary\nexample_dict = {\"RandomForestClassifier\": RandomForestClassifier()}\n\n# Create a dictionary called models which contains all of the classification models we've imported\n# Make sure the dictionary is in the same format as example_dict\n# The models dictionary should contain 5 models\nmodels = {\"LinearSVC\": ###,\n          \"KNN\": ###,\n          \"SVC\": ###,\n          \"LogisticRegression\": ###,\n          \"RandomForestClassifier\": ###}\n\n# Create an empty dictionary called results\nresults = ###\n</pre> # EXAMPLE: Instantiating a RandomForestClassifier() in a dictionary example_dict = {\"RandomForestClassifier\": RandomForestClassifier()}  # Create a dictionary called models which contains all of the classification models we've imported # Make sure the dictionary is in the same format as example_dict # The models dictionary should contain 5 models models = {\"LinearSVC\": ###,           \"KNN\": ###,           \"SVC\": ###,           \"LogisticRegression\": ###,           \"RandomForestClassifier\": ###}  # Create an empty dictionary called results results = ### <p>Since each model we're using has the same <code>fit()</code> and <code>score()</code> functions, we can loop through our models dictionary and, call <code>fit()</code> on the training data and then call <code>score()</code> with the test data.</p> In\u00a0[\u00a0]: Copied! <pre># EXAMPLE: Looping through example_dict fitting and scoring the model\nexample_results = {}\nfor model_name, model in example_dict.items():\n    model.fit(X_train, y_train)\n    example_results[model_name] = model.score(X_test, y_test)\n\n# EXAMPLE: View the results\nexample_results    \n</pre> # EXAMPLE: Looping through example_dict fitting and scoring the model example_results = {} for model_name, model in example_dict.items():     model.fit(X_train, y_train)     example_results[model_name] = model.score(X_test, y_test)  # EXAMPLE: View the results example_results     In\u00a0[\u00a0]: Copied! <pre># Loop through the models dictionary items, fitting the model on the training data\n# and appending the model name and model score on the test data to the results dictionary\nfor model_name, model in ###:\n    model.fit(###)\n    results[model_name] = model.score(###)\n\n# View the results\nresults\n</pre> # Loop through the models dictionary items, fitting the model on the training data # and appending the model name and model score on the test data to the results dictionary for model_name, model in ###:     model.fit(###)     results[model_name] = model.score(###)  # View the results results <ul> <li>Which model performed the best?</li> <li>Do the results change each time you run the cell?</li> <li>Why do you think this is?</li> </ul> <p>Due to the randomness of how each model finds patterns in the data, you might notice different results each time.</p> <p>Without manually setting the random state using the <code>random_state</code> parameter of some models or using a NumPy random seed, every time you run the cell, you'll get slightly different results.</p> <p>Let's see this in effect by running the same code as the cell above, except this time setting a NumPy random seed equal to 42.</p> In\u00a0[\u00a0]: Copied! <pre># Run the same code as the cell above, except this time set a NumPy random seed\n# equal to 42\nnp.random.seed(###)\n\nfor model_name, model in models.items():\n    model.fit(X_train, y_train)\n    results[model_name] = model.score(X_test, y_test)\n    \nresults\n</pre> # Run the same code as the cell above, except this time set a NumPy random seed # equal to 42 np.random.seed(###)  for model_name, model in models.items():     model.fit(X_train, y_train)     results[model_name] = model.score(X_test, y_test)      results <ul> <li>Run the cell above a few times, what do you notice about the results?</li> <li>Which model performs the best this time?</li> <li>What happens if you add a NumPy random seed to the cell where you called <code>train_test_split()</code> (towards the top of the notebook) and then rerun the cell above?</li> </ul> <p>Let's make our results a little more visual.</p> In\u00a0[\u00a0]: Copied! <pre># Create a pandas dataframe with the data as the values of the results dictionary,\n# the index as the keys of the results dictionary and a single column called accuracy.\n# Be sure to save the dataframe to a variable.\nresults_df = pd.DataFrame(results.###(), \n                          results.###(), \n                          columns=[####])\n\n# Create a bar plot of the results dataframe using plot.bar()\n###\n</pre> # Create a pandas dataframe with the data as the values of the results dictionary, # the index as the keys of the results dictionary and a single column called accuracy. # Be sure to save the dataframe to a variable. results_df = pd.DataFrame(results.###(),                            results.###(),                            columns=[####])  # Create a bar plot of the results dataframe using plot.bar() ### <p>Using <code>np.random.seed(42)</code> results in the <code>LogisticRegression</code> model perfoming the best (at least on my computer).</p> <p>Let's tune its hyperparameters and see if we can improve it.</p> In\u00a0[\u00a0]: Copied! <pre># Different LogisticRegression hyperparameters\nlog_reg_grid = {\"C\": np.logspace(-4, 4, 20),\n                \"solver\": [\"liblinear\"]}\n</pre> # Different LogisticRegression hyperparameters log_reg_grid = {\"C\": np.logspace(-4, 4, 20),                 \"solver\": [\"liblinear\"]} <p>Since we've got a set of hyperparameters we can import <code>RandomizedSearchCV</code>, pass it our dictionary of hyperparameters and let it search for the best combination.</p> In\u00a0[\u00a0]: Copied! <pre># Setup np random seed of 42\nnp.random.seed(###)\n\n# Import RandomizedSearchCV from sklearn's model_selection module\n\n\n# Setup an instance of RandomizedSearchCV with a LogisticRegression() estimator,\n# our log_reg_grid as the param_distributions, a cv of 5 and n_iter of 5.\nrs_log_reg = RandomizedSearchCV(estimator=###,\n                                param_distributions=###,\n                                cv=###,\n                                n_iter=###,\n                                verbose=###)\n\n# Fit the instance of RandomizedSearchCV\n###\n</pre> # Setup np random seed of 42 np.random.seed(###)  # Import RandomizedSearchCV from sklearn's model_selection module   # Setup an instance of RandomizedSearchCV with a LogisticRegression() estimator, # our log_reg_grid as the param_distributions, a cv of 5 and n_iter of 5. rs_log_reg = RandomizedSearchCV(estimator=###,                                 param_distributions=###,                                 cv=###,                                 n_iter=###,                                 verbose=###)  # Fit the instance of RandomizedSearchCV ### <p>Once <code>RandomizedSearchCV</code> has finished, we can find the best hyperparmeters it found using the <code>best_params_</code> attributes.</p> In\u00a0[\u00a0]: Copied! <pre># Find the best parameters of the RandomizedSearchCV instance using the best_params_ attribute\n###\n</pre> # Find the best parameters of the RandomizedSearchCV instance using the best_params_ attribute ### In\u00a0[\u00a0]: Copied! <pre># Score the instance of RandomizedSearchCV using the test data\n###\n</pre> # Score the instance of RandomizedSearchCV using the test data ### <p>After hyperparameter tuning, did the models score improve? What else could you try to improve it? Are there any other methods of hyperparameter tuning you can find for <code>LogisticRegression</code>?</p> In\u00a0[\u00a0]: Copied! <pre># Instantiate a LogisticRegression classifier using the best hyperparameters from RandomizedSearchCV\nclf = LogisticRegression(###)\n\n# Fit the new instance of LogisticRegression with the best hyperparameters on the training data \n###\n</pre> # Instantiate a LogisticRegression classifier using the best hyperparameters from RandomizedSearchCV clf = LogisticRegression(###)  # Fit the new instance of LogisticRegression with the best hyperparameters on the training data  ### <p>Now it's to import the relative Scikit-Learn methods for each of the classification evaluation metrics we're after.</p> In\u00a0[\u00a0]: Copied! <pre># Import confusion_matrix and classification_report from sklearn's metrics module\n###\n\n# Import precision_score, recall_score and f1_score from sklearn's metrics module\n###\n\n# Import plot_roc_curve from sklearn's metrics module\n###\n</pre> # Import confusion_matrix and classification_report from sklearn's metrics module ###  # Import precision_score, recall_score and f1_score from sklearn's metrics module ###  # Import plot_roc_curve from sklearn's metrics module ### <p>Evaluation metrics are very often comparing a model's predictions to some ground truth labels.</p> <p>Let's make some predictions on the test data using our latest model and save them to <code>y_preds</code>.</p> In\u00a0[\u00a0]: Copied! <pre># Make predictions on test data and save them\n###\n</pre> # Make predictions on test data and save them ### <p>Time to use the predictions our model has made to evaluate it beyond accuracy.</p> In\u00a0[\u00a0]: Copied! <pre># Create a confusion matrix using the confusion_matrix function\n###\n</pre> # Create a confusion matrix using the confusion_matrix function ### <p>Challenge: The in-built <code>confusion_matrix</code> function in Scikit-Learn produces something not too visual, how could you make your confusion matrix more visual?</p> <p>You might want to search something like \"how to plot a confusion matrix\". Note: There may be more than one way to do this.</p> In\u00a0[\u00a0]: Copied! <pre># Create a more visual confusion matrix\n###\n</pre> # Create a more visual confusion matrix ### <p>How about a classification report?</p> In\u00a0[\u00a0]: Copied! <pre># Create a classification report using the classification_report function\n###\n</pre> # Create a classification report using the classification_report function ### <p>Challenge: Write down what each of the columns in this classification report are.</p> <ul> <li>Precision - Indicates the proportion of positive identifications (model predicted class 1) which were actually correct. A model which produces no false positives has a precision of 1.0.</li> <li>Recall - Indicates the proportion of actual positives which were correctly classified. A model which produces no false negatives has a recall of 1.0.</li> <li>F1 score - A combination of precision and recall. A perfect model achieves an F1 score of 1.0.</li> <li>Support - The number of samples each metric was calculated on.</li> <li>Accuracy - The accuracy of the model in decimal form. Perfect accuracy is equal to 1.0.</li> <li>Macro avg - Short for macro average, the average precision, recall and F1 score between classes. Macro avg doesn\u2019t class imbalance into effort, so if you do have class imbalances, pay attention to this metric.</li> <li>Weighted avg - Short for weighted average, the weighted average precision, recall and F1 score between classes. Weighted means each metric is calculated with respect to how many samples there are in each class. This metric will favour the majority class (e.g. will give a high value when one class out performs another due to having more samples).</li> </ul> <p>The classification report gives us a range of values for precision, recall and F1 score, time to find these metrics using Scikit-Learn functions.</p> In\u00a0[\u00a0]: Copied! <pre># Find the precision score of the model using precision_score()\n###\n</pre> # Find the precision score of the model using precision_score() ### In\u00a0[\u00a0]: Copied! <pre># Find the recall score\n###\n</pre> # Find the recall score ### In\u00a0[\u00a0]: Copied! <pre># Find the F1 score\n###\n</pre> # Find the F1 score ### <p>Confusion matrix: done. Classification report: done. ROC (receiver operator characteristic) curve &amp; AUC (area under curve) score: not done.</p> <p>Let's fix this.</p> <p>If you're unfamiliar with what a ROC curve, that's your first challenge, to read up on what one is.</p> <p>In a sentence, a ROC curve is a plot of the true positive rate versus the false positive rate.</p> <p>And the AUC score is the area behind the ROC curve.</p> <p>Scikit-Learn provides a handy function for creating both of these called <code>plot_roc_curve()</code>.</p> In\u00a0[\u00a0]: Copied! <pre># Plot a ROC curve using our current machine learning model using plot_roc_curve\n###\n</pre> # Plot a ROC curve using our current machine learning model using plot_roc_curve ### <p>Beautiful! We've gone far beyond accuracy with a plethora extra classification evaluation metrics.</p> <p>If you're not sure about any of these, don't worry, they can take a while to understand. That could be an optional extension, reading up on a classification metric you're not sure of.</p> <p>The thing to note here is all of these metrics have been calculated using a single training set and a single test set. Whilst this is okay, a more robust way is to calculate them using cross-validation.</p> <p>We can calculate various evaluation metrics using cross-validation using Scikit-Learn's <code>cross_val_score()</code> function along with the <code>scoring</code> parameter.</p> In\u00a0[\u00a0]: Copied! <pre># Import cross_val_score from sklearn's model_selection module\n###\n</pre> # Import cross_val_score from sklearn's model_selection module ### In\u00a0[\u00a0]: Copied! <pre># EXAMPLE: By default cross_val_score returns 5 values (cv=5).\ncross_val_score(clf, \n                X, \n                y, \n                scoring=\"accuracy\",\n                cv=5)\n</pre> # EXAMPLE: By default cross_val_score returns 5 values (cv=5). cross_val_score(clf,                  X,                  y,                  scoring=\"accuracy\",                 cv=5) In\u00a0[\u00a0]: Copied! <pre># EXAMPLE: Taking the mean of the returned values from cross_val_score \n# gives a cross-validated version of the scoring metric.\ncross_val_acc = np.mean(cross_val_score(clf,\n                                        X,\n                                        y,\n                                        scoring=\"accuracy\",\n                                        cv=5))\n\ncross_val_acc\n</pre> # EXAMPLE: Taking the mean of the returned values from cross_val_score  # gives a cross-validated version of the scoring metric. cross_val_acc = np.mean(cross_val_score(clf,                                         X,                                         y,                                         scoring=\"accuracy\",                                         cv=5))  cross_val_acc <p>In the examples, the cross-validated accuracy is found by taking the mean of the array returned by <code>cross_val_score()</code>.</p> <p>Now it's time to find the same for precision, recall and F1 score.</p> In\u00a0[\u00a0]: Copied! <pre># Find the cross-validated precision\n###\n</pre> # Find the cross-validated precision ### In\u00a0[\u00a0]: Copied! <pre># Find the cross-validated recall\n###\n</pre> # Find the cross-validated recall ### In\u00a0[\u00a0]: Copied! <pre># Find the cross-validated F1 score\n###\n</pre> # Find the cross-validated F1 score ### In\u00a0[\u00a0]: Copied! <pre># Import the dump and load functions from the joblib library\n###\n</pre> # Import the dump and load functions from the joblib library ### In\u00a0[\u00a0]: Copied! <pre># Use the dump function to export the trained model to file\n###\n</pre> # Use the dump function to export the trained model to file ### In\u00a0[\u00a0]: Copied! <pre># Use the load function to import the trained model you just exported\n# Save it to a different variable name to the origial trained model\n###\n\n# Evaluate the loaded trained model on the test data\n###\n</pre> # Use the load function to import the trained model you just exported # Save it to a different variable name to the origial trained model ###  # Evaluate the loaded trained model on the test data ### <p>What do you notice about the loaded trained model results versus the original (pre-exported) model results?</p> In\u00a0[\u00a0]: Copied! <pre># Read in the car sales data\ncar_sales = pd.read_csv(\"https://raw.githubusercontent.com/mrdbourke/zero-to-mastery-ml/master/data/car-sales-extended-missing-data.csv\")\n\n# View the first 5 rows of the car sales data\n###\n</pre> # Read in the car sales data car_sales = pd.read_csv(\"https://raw.githubusercontent.com/mrdbourke/zero-to-mastery-ml/master/data/car-sales-extended-missing-data.csv\")  # View the first 5 rows of the car sales data ### In\u00a0[\u00a0]: Copied! <pre># Get information about the car sales DataFrame\n###\n</pre> # Get information about the car sales DataFrame ### <p>Looking at the output of <code>info()</code>,</p> <ul> <li>How many rows are there total?</li> <li>What datatypes are in each column?</li> <li>How many missing values are there in each column?</li> </ul> In\u00a0[\u00a0]: Copied! <pre># Find number of missing values in each column\n###\n</pre> # Find number of missing values in each column ### In\u00a0[\u00a0]: Copied! <pre># Find the datatypes of each column of car_sales\n###\n</pre> # Find the datatypes of each column of car_sales ### <p>Knowing this information, what would happen if we tried to model our data as it is?</p> <p>Let's see.</p> In\u00a0[\u00a0]: Copied! <pre># EXAMPLE: This doesn't work because our car_sales data isn't all numerical\nfrom sklearn.ensemble import RandomForestRegressor\ncar_sales_X, car_sales_y = car_sales.drop(\"Price\", axis=1), car_sales.Price\nrf_regressor = RandomForestRegressor().fit(car_sales_X, car_sales_y)\n</pre> # EXAMPLE: This doesn't work because our car_sales data isn't all numerical from sklearn.ensemble import RandomForestRegressor car_sales_X, car_sales_y = car_sales.drop(\"Price\", axis=1), car_sales.Price rf_regressor = RandomForestRegressor().fit(car_sales_X, car_sales_y) <p>As we see, the cell above breaks because our data contains non-numerical values as well as missing data.</p> <p>To take care of some of the missing data, we'll remove the rows which have no labels (all the rows with missing values in the <code>Price</code> column).</p> In\u00a0[\u00a0]: Copied! <pre># Remove rows with no labels (NaN's in the Price column)\n###\n</pre> # Remove rows with no labels (NaN's in the Price column) ### In\u00a0[\u00a0]: Copied! <pre># Import Pipeline from sklearn's pipeline module\n###\n\n# Import ColumnTransformer from sklearn's compose module\n###\n\n# Import SimpleImputer from sklearn's impute module\n###\n\n# Import OneHotEncoder from sklearn's preprocessing module\n###\n\n# Import train_test_split from sklearn's model_selection module\n###\n</pre> # Import Pipeline from sklearn's pipeline module ###  # Import ColumnTransformer from sklearn's compose module ###  # Import SimpleImputer from sklearn's impute module ###  # Import OneHotEncoder from sklearn's preprocessing module ###  # Import train_test_split from sklearn's model_selection module ### <p>Now we've got the necessary tools we need to create our preprocessing <code>Pipeline</code> which fills missing values along with turning all non-numerical data into numbers.</p> <p>Let's start with the categorical features.</p> In\u00a0[\u00a0]: Copied! <pre># Define different categorical features \ncategorical_features = [\"Make\", \"Colour\"]\n\n# Create categorical transformer Pipeline\ncategorical_transformer = Pipeline(steps=[\n    # Set SimpleImputer strategy to \"constant\" and fill value to \"missing\"\n    (\"imputer\", SimpleImputer(strategy=###, fill_value=###)),\n    # Set OneHotEncoder to ignore the unknowns\n    (\"onehot\", OneHotEncoder(handle_unknown=###))])\n</pre> # Define different categorical features  categorical_features = [\"Make\", \"Colour\"]  # Create categorical transformer Pipeline categorical_transformer = Pipeline(steps=[     # Set SimpleImputer strategy to \"constant\" and fill value to \"missing\"     (\"imputer\", SimpleImputer(strategy=###, fill_value=###)),     # Set OneHotEncoder to ignore the unknowns     (\"onehot\", OneHotEncoder(handle_unknown=###))]) <p>It would be safe to treat <code>Doors</code> as a categorical feature as well, however since we know the vast majority of cars have 4 doors, we'll impute the missing <code>Doors</code> values as 4.</p> In\u00a0[\u00a0]: Copied! <pre># Define Doors features\ndoor_feature = [\"Doors\"]\n\n# Create Doors transformer Pipeline\ndoor_transformer = Pipeline(steps=[\n    # Set SimpleImputer strategy to \"constant\" and fill value to 4\n    (\"imputer\", SimpleImputer(strategy=###, fill_value=###))])\n</pre> # Define Doors features door_feature = [\"Doors\"]  # Create Doors transformer Pipeline door_transformer = Pipeline(steps=[     # Set SimpleImputer strategy to \"constant\" and fill value to 4     (\"imputer\", SimpleImputer(strategy=###, fill_value=###))]) <p>Now onto the numeric features. In this case, the only numeric feature is the <code>Odometer (KM)</code> column. Let's fill its missing values with the median.</p> In\u00a0[\u00a0]: Copied! <pre># Define numeric features (only the Odometer (KM) column)\nnumeric_features = [\"Odometer (KM)\"]\n\n# Crearte numeric transformer Pipeline\nnumeric_transformer = ###(steps=[\n    # Set SimpleImputer strategy to fill missing values with the \"Median\"\n    (\"imputer\", ###(strategy=###))])\n</pre> # Define numeric features (only the Odometer (KM) column) numeric_features = [\"Odometer (KM)\"]  # Crearte numeric transformer Pipeline numeric_transformer = ###(steps=[     # Set SimpleImputer strategy to fill missing values with the \"Median\"     (\"imputer\", ###(strategy=###))]) <p>Time to put all of our individual transformer <code>Pipeline</code>'s into a single <code>ColumnTransformer</code> instance.</p> In\u00a0[\u00a0]: Copied! <pre># Setup preprocessing steps (fill missing values, then convert to numbers)\npreprocessor = ColumnTransformer(\n    transformers=[\n        # Use the categorical_transformer to transform the categorical_features\n        (\"cat\", categorical_transformer, ###),\n        # Use the door_transformer to transform the door_feature\n        (\"door\", ###, door_feature),\n        # Use the numeric_transformer to transform the numeric_features\n        (\"num\", ###, ###)])\n</pre> # Setup preprocessing steps (fill missing values, then convert to numbers) preprocessor = ColumnTransformer(     transformers=[         # Use the categorical_transformer to transform the categorical_features         (\"cat\", categorical_transformer, ###),         # Use the door_transformer to transform the door_feature         (\"door\", ###, door_feature),         # Use the numeric_transformer to transform the numeric_features         (\"num\", ###, ###)]) <p>Boom! Now our <code>preprocessor</code> is ready, time to import some regression models to try out.</p> <p>Comparing our data to the Scikit-Learn machine learning map, we can see there's a handful of different regression models we can try.</p> <ul> <li>RidgeRegression</li> <li>SVR(kernel=\"linear\") - short for Support Vector Regressor, a form form of support vector machine.</li> <li>SVR(kernel=\"rbf\") - short for Support Vector Regressor, a form of support vector machine.</li> <li>RandomForestRegressor - the regression version of RandomForestClassifier.</li> </ul> In\u00a0[\u00a0]: Copied! <pre># Import Ridge from sklearn's linear_model module\n\n\n# Import SVR from sklearn's svm module\n\n\n# Import RandomForestRegressor from sklearn's ensemble module\n</pre> # Import Ridge from sklearn's linear_model module   # Import SVR from sklearn's svm module   # Import RandomForestRegressor from sklearn's ensemble module  <p>Again, thanks to the design of the Scikit-Learn library, we're able to use very similar code for each of these models.</p> <p>To test them all, we'll create a dictionary of regression models and an empty dictionary for regression model results.</p> In\u00a0[\u00a0]: Copied! <pre># Create dictionary of model instances, there should be 4 total key, value pairs\n# in the form {\"model_name\": model_instance}.\n# Don't forget there's two versions of SVR, one with a \"linear\" kernel and the\n# other with kernel set to \"rbf\".\nregression_models = {\"Ridge\": ###,\n                     \"SVR_linear\": ###,\n                     \"SVR_rbf\": ###,\n                     \"RandomForestRegressor\": ###}\n\n# Create an empty dictionary for the regression results\nregression_results = ###\n</pre> # Create dictionary of model instances, there should be 4 total key, value pairs # in the form {\"model_name\": model_instance}. # Don't forget there's two versions of SVR, one with a \"linear\" kernel and the # other with kernel set to \"rbf\". regression_models = {\"Ridge\": ###,                      \"SVR_linear\": ###,                      \"SVR_rbf\": ###,                      \"RandomForestRegressor\": ###}  # Create an empty dictionary for the regression results regression_results = ### <p>Our regression model dictionary is prepared as well as an empty dictionary to append results to, time to get the data split into <code>X</code> (feature variables) and <code>y</code> (target variable) as well as training and test sets.</p> <p>In our car sales problem, we're trying to use the different characteristics of a car (<code>X</code>) to predict its sale price (<code>y</code>).</p> In\u00a0[\u00a0]: Copied! <pre># Create car sales X data (every column of car_sales except Price)\ncar_sales_X = ###\n\n# Create car sales y data (the Price column of car_sales)\ncar_sales_y = ###\n</pre> # Create car sales X data (every column of car_sales except Price) car_sales_X = ###  # Create car sales y data (the Price column of car_sales) car_sales_y = ### In\u00a0[\u00a0]: Copied! <pre># Use train_test_split to split the car_sales_X and car_sales_y data into \n# training and test sets.\n# Give the test set 20% of the data using the test_size parameter.\n# For reproducibility set the random_state parameter to 42.\ncar_X_train, car_X_test, car_y_train, car_y_test = train_test_split(###,\n                                                                    ###,\n                                                                    test_size=###,\n                                                                    random_state=###)\n\n# Check the shapes of the training and test datasets\n###\n</pre> # Use train_test_split to split the car_sales_X and car_sales_y data into  # training and test sets. # Give the test set 20% of the data using the test_size parameter. # For reproducibility set the random_state parameter to 42. car_X_train, car_X_test, car_y_train, car_y_test = train_test_split(###,                                                                     ###,                                                                     test_size=###,                                                                     random_state=###)  # Check the shapes of the training and test datasets ### <ul> <li>How many rows are in each set?</li> <li>How many columns are in each set?</li> </ul> <p>Alright, our data is split into training and test sets, time to build a small loop which is going to:</p> <ol> <li>Go through our <code>regression_models</code> dictionary</li> <li>Create a <code>Pipeline</code> which contains our <code>preprocessor</code> as well as one of the models in the dictionary</li> <li>Fits the <code>Pipeline</code> to the car sales training data</li> <li>Evaluates the target model on the car sales test data and appends the results to our <code>regression_results</code> dictionary</li> </ol> In\u00a0[\u00a0]: Copied! <pre># Loop through the items in the regression_models dictionary\nfor model_name, model in regression_models.items():\n    \n    # Create a model Pipeline with a preprocessor step and model step\n    model_pipeline = Pipeline(steps=[(\"preprocessor\", ###),\n                                      (\"model\", ###)])\n    \n    # Fit the model Pipeline to the car sales training data\n    print(f\"Fitting {model_name}...\")\n    model_pipeline.###(###, ###)\n    \n    # Score the model Pipeline on the test data appending the model_name to the \n    # results dictionary\n    print(f\"Scoring {model_name}...\")\n    regression_results[model_name] = model_pipeline.score(###, \n                                                          ###)\n</pre> # Loop through the items in the regression_models dictionary for model_name, model in regression_models.items():          # Create a model Pipeline with a preprocessor step and model step     model_pipeline = Pipeline(steps=[(\"preprocessor\", ###),                                       (\"model\", ###)])          # Fit the model Pipeline to the car sales training data     print(f\"Fitting {model_name}...\")     model_pipeline.###(###, ###)          # Score the model Pipeline on the test data appending the model_name to the      # results dictionary     print(f\"Scoring {model_name}...\")     regression_results[model_name] = model_pipeline.score(###,                                                            ###) <p>Our regression models have been fit, let's see how they did!</p> In\u00a0[\u00a0]: Copied! <pre># Check the results of each regression model by printing the regression_results\n# dictionary\n###\n</pre> # Check the results of each regression model by printing the regression_results # dictionary ### <ul> <li>Which model did the best?</li> <li>How could you improve its results?</li> <li>What metric does the <code>score()</code> method of a regression model return by default?</li> </ul> <p>Since we've fitted some models but only compared them via the default metric contained in the <code>score()</code> method (R^2 score or coefficient of determination), let's take the <code>RidgeRegression</code> model and evaluate it with a few other regression metrics.</p> <p>Specifically, let's find:</p> <ol> <li>R^2 (pronounced r-squared) or coefficient of determination - Compares your models predictions to the mean of the targets. Values can range from negative infinity (a very poor model) to 1. For example, if all your model does is predict the mean of the targets, its R^2 value would be 0. And if your model perfectly predicts a range of numbers it's R^2 value would be 1.</li> <li>Mean absolute error (MAE) - The average of the absolute differences between predictions and actual values. It gives you an idea of how wrong your predictions were.</li> <li>Mean squared error (MSE) - The average squared differences between predictions and actual values. Squaring the errors removes negative errors. It also amplifies outliers (samples which have larger errors).</li> </ol> <p>Scikit-Learn has a few classes built-in which are going to help us with these, namely, <code>mean_absolute_error</code>, <code>mean_squared_error</code> and <code>r2_score</code>.</p> In\u00a0[\u00a0]: Copied! <pre># Import mean_absolute_error from sklearn's metrics module\n###\n\n# Import mean_squared_error from sklearn's metrics module\n###\n\n# Import r2_score from sklearn's metrics module\n###\n</pre> # Import mean_absolute_error from sklearn's metrics module ###  # Import mean_squared_error from sklearn's metrics module ###  # Import r2_score from sklearn's metrics module ### <p>All the evaluation metrics we're concerned with compare a model's predictions with the ground truth labels. Knowing this, we'll have to make some predictions.</p> <p>Let's create a <code>Pipeline</code> with the <code>preprocessor</code> and a <code>Ridge()</code> model, fit it on the car sales training data and then make predictions on the car sales test data.</p> In\u00a0[\u00a0]: Copied! <pre># Create RidgeRegression Pipeline with preprocessor as the \"preprocessor\" and\n# Ridge() as the \"model\".\nridge_pipeline = ###(steps=[(\"preprocessor\", ###),\n                                 (\"model\", Ridge())])\n\n# Fit the RidgeRegression Pipeline to the car sales training data\nridge_pipeline.fit(###, ###)\n\n# Make predictions on the car sales test data using the RidgeRegression Pipeline\ncar_y_preds = ridge_pipeline.###(###)\n\n# View the first 50 predictions\n###\n</pre> # Create RidgeRegression Pipeline with preprocessor as the \"preprocessor\" and # Ridge() as the \"model\". ridge_pipeline = ###(steps=[(\"preprocessor\", ###),                                  (\"model\", Ridge())])  # Fit the RidgeRegression Pipeline to the car sales training data ridge_pipeline.fit(###, ###)  # Make predictions on the car sales test data using the RidgeRegression Pipeline car_y_preds = ridge_pipeline.###(###)  # View the first 50 predictions ### <p>Nice! Now we've got some predictions, time to evaluate them. We'll find the mean squared error (MSE), mean absolute error (MAE) and R^2 score (coefficient of determination) of our model.</p> In\u00a0[\u00a0]: Copied! <pre># EXAMPLE: Find the MSE by comparing the car sales test labels to the car sales predictions\nmse = mean_squared_error(car_y_test, car_y_preds)\n# Return the MSE\nmse\n</pre> # EXAMPLE: Find the MSE by comparing the car sales test labels to the car sales predictions mse = mean_squared_error(car_y_test, car_y_preds) # Return the MSE mse In\u00a0[\u00a0]: Copied! <pre># Find the MAE by comparing the car sales test labels to the car sales predictions\n###\n# Return the MAE\n###\n</pre> # Find the MAE by comparing the car sales test labels to the car sales predictions ### # Return the MAE ### In\u00a0[\u00a0]: Copied! <pre># Find the R^2 score by comparing the car sales test labels to the car sales predictions\n###\n# Return the R^2 score\n###\n</pre> # Find the R^2 score by comparing the car sales test labels to the car sales predictions ### # Return the R^2 score ### <p>Boom! Our model could potentially do with some hyperparameter tuning (this would be a great extension). And we could probably do with finding some more data on our problem, 1000 rows doesn't seem to be sufficient.</p> <ul> <li>How would you export the trained regression model?</li> </ul>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#scikit-learn-practice-exercises","title":"Scikit-Learn Practice Exercises\u00b6","text":"<p>This notebook offers a set of excercises for different tasks with Scikit-Learn.</p> <p>Notes:</p> <ul> <li>There may be more than one different way to answer a question or complete an exercise.</li> <li>Some skeleton code has been implemented for you.</li> <li>Exercises are based off (and directly taken from) the quick introduction to Scikit-Learn notebook.</li> <li>Different tasks will be detailed by comments or text. Places to put your own code are defined by <code>###</code> (don't remove anything other than <code>###</code>).</li> </ul> <p>For further reference and resources, it's advised to check out the Scikit-Learn documnetation.</p> <p>And if you get stuck, try searching for a question in the following format: \"how to do XYZ with Scikit-Learn\", where XYZ is the function you want to leverage from Scikit-Learn.</p> <p>Since we'll be working with data, we'll import Scikit-Learn's counterparts, Matplotlib, NumPy and pandas.</p> <p>Let's get started.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#end-to-end-scikit-learn-classification-workflow","title":"End-to-end Scikit-Learn classification workflow\u00b6","text":"<p>Let's start with an end to end Scikit-Learn workflow.</p> <p>More specifically, we'll:</p> <ol> <li>Get a dataset ready</li> <li>Prepare a machine learning model to make predictions</li> <li>Fit the model to the data and make a prediction</li> <li>Evaluate the model's predictions</li> </ol> <p>The data we'll be using is stored on GitHub. We'll start with <code>heart-disease.csv</code>, a dataset which contains anonymous patient data and whether or not they have heart disease.</p> <p>Note: When viewing a <code>.csv</code> on GitHub, make sure it's in the raw format. For example, the URL should look like: https://raw.githubusercontent.com/mrdbourke/zero-to-mastery-ml/master/data/heart-disease.csv</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#1-getting-a-dataset-ready","title":"1. Getting a dataset ready\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#2-preparing-a-machine-learning-model","title":"2. Preparing a machine learning model\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#3-fitting-a-model-and-making-predictions","title":"3. Fitting a model and making predictions\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#4-evaluating-a-models-predictions","title":"4. Evaluating a model's predictions\u00b6","text":"<p>Evaluating predictions is as important making them. Let's check how our model did by calling the <code>score()</code> method on it and passing it the training (<code>X_train, y_train</code>) and testing data (<code>X_test, y_test</code>).</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#experimenting-with-different-classification-models","title":"Experimenting with different classification models\u00b6","text":"<p>Now we've quickly covered an end-to-end Scikit-Learn workflow and since experimenting is a large part of machine learning, we'll now try a series of different machine learning models and see which gets the best results on our dataset.</p> <p>Going through the Scikit-Learn machine learning map, we see there are a number of different classification models we can try (different models are in the green boxes).</p> <p>For this exercise, the models we're going to try and compare are:</p> <ul> <li>LinearSVC</li> <li>KNeighborsClassifier (also known as K-Nearest Neighbors or KNN)</li> <li>SVC (also known as support vector classifier, a form of support vector machine)</li> <li>LogisticRegression (despite the name, this is actually a classifier)</li> <li>RandomForestClassifier (an ensemble method and what we used above)</li> </ul> <p>We'll follow the same workflow we used above (except this time for multiple models):</p> <ol> <li>Import a machine learning model</li> <li>Get it ready</li> <li>Fit it to the data and make predictions</li> <li>Evaluate the fitted model</li> </ol> <p>Note: Since we've already got the data ready, we can reuse it in this section.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#hyperparameter-tuning","title":"Hyperparameter Tuning\u00b6","text":"<p>Remember, if you're ever trying to tune a machine learning models hyperparameters and you're not sure where to start, you can always search something like \"MODEL_NAME hyperparameter tuning\".</p> <p>In the case of LogisticRegression, you might come across articles, such as Hyperparameter Tuning Using Grid Search by Chris Albon.</p> <p>The article uses <code>GridSearchCV</code> but we're going to be using <code>RandomizedSearchCV</code>.</p> <p>The different hyperparameters to search over have been setup for you in <code>log_reg_grid</code> but feel free to change them.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#classifier-model-evaluation","title":"Classifier Model Evaluation\u00b6","text":"<p>We've tried to find the best hyperparameters on our model using <code>RandomizedSearchCV</code> and so far we've only been evaluating our model using the <code>score()</code> function which returns accuracy.</p> <p>But when it comes to classification, you'll likely want to use a few more evaluation metrics, including:</p> <ul> <li>Confusion matrix - Compares the predicted values with the true values in a tabular way, if 100% correct, all values in the matrix will be top left to bottom right (diagnol line).</li> <li>Cross-validation - Splits your dataset into multiple parts and train and tests your model on each part and evaluates performance as an average.</li> <li>Precision - Proportion of true positives over total number of samples. Higher precision leads to less false positives.</li> <li>Recall - Proportion of true positives over total number of true positives and false positives. Higher recall leads to less false negatives.</li> <li>F1 score - Combines precision and recall into one metric. 1 is best, 0 is worst.</li> <li>Classification report - Sklearn has a built-in function called <code>classification_report()</code> which returns some of the main classification metrics such as precision, recall and f1-score.</li> <li>ROC Curve - Receiver Operating Characterisitc is a plot of true positive rate versus false positive rate.</li> <li>Area Under Curve (AUC) - The area underneath the ROC curve. A perfect model achieves a score of 1.0.</li> </ul> <p>Before we get to these, we'll instantiate a new instance of our model using the best hyerparameters found by <code>RandomizedSearchCV</code>.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#exporting-and-importing-a-trained-model","title":"Exporting and importing a trained model\u00b6","text":"<p>Once you've trained a model, you may want to export it and save it to file so you can share it or use it elsewhere.</p> <p>One method of exporting and importing models is using the joblib library.</p> <p>In Scikit-Learn, exporting and importing a trained model is known as model persistence.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#scikit-learn-regression-practice","title":"Scikit-Learn Regression Practice\u00b6","text":"<p>For the next few exercises, we're going to be working on a regression problem, in other words, using some data to predict a number.</p> <p>Our dataset is a table of car sales, containing different car characteristics as well as a sale price.</p> <p>We'll use Scikit-Learn's built-in regression machine learning models to try and learn the patterns in the car characteristics and their prices on a certain group of the dataset before trying to predict the sale price of a group of cars the model has never seen before.</p> <p>To begin, we'll import the data from GitHub into a pandas DataFrame, check out some details about it and try to build a model as soon as possible.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#building-a-pipeline","title":"Building a pipeline\u00b6","text":"<p>Since our <code>car_sales</code> data has missing numerical values as well as the data isn't all numerical, we'll have to fix these things before we can fit a machine learning model on it.</p> <p>There are ways we could do this with pandas but since we're practicing Scikit-Learn, we'll see how we might do it with the <code>Pipeline</code> class.</p> <p>Because we're modifying columns in our dataframe (filling missing values, converting non-numerical data to numbers) we'll need the <code>ColumnTransformer</code>, <code>SimpleImputer</code> and <code>OneHotEncoder</code> classes as well.</p> <p>Finally, because we'll need to split our data into training and test sets, we'll import <code>train_test_split</code> as well.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises%20%28R%29/#extensions","title":"Extensions\u00b6","text":"<p>You should be proud. Getting this far means you've worked through a classification problem and regression problem using pure (mostly) Scikit-Learn (no easy feat!).</p> <p>For more exercises, check out the Scikit-Learn getting started documentation. A good practice would be to read through it and for the parts you find interesting, add them into the end of this notebook.</p> <p>Finally, as always, remember, the best way to learn something new is to try it. And try it relentlessly. If you're unsure of how to do something, never be afraid to ask a question or search for something such as, \"how to tune the hyperparmaters of a scikit-learn ridge regression model\".</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/","title":"Scikit-Learn Practice Exercises","text":"In\u00a0[1]: Copied! <pre># Setup matplotlib to plot inline (within the notebook)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Import pandas under the abbreviation 'pd'\nimport pandas as pd\n\n# Import NumPy under the abbreviation 'np'\nimport numpy as np\n</pre> # Setup matplotlib to plot inline (within the notebook) import matplotlib.pyplot as plt %matplotlib inline  # Import pandas under the abbreviation 'pd' import pandas as pd  # Import NumPy under the abbreviation 'np' import numpy as np In\u00a0[2]: Copied! <pre># Import the heart disease dataset and save it to a variable\n# using pandas and read_csv()\n# Hint: You can directly pass the URL of a csv to read_csv()\nheart_disease = pd.read_csv(\"data/heart-disease.csv\")\n\n# Check the first 5 rows of the data\nheart_disease.head()\n</pre> # Import the heart disease dataset and save it to a variable # using pandas and read_csv() # Hint: You can directly pass the URL of a csv to read_csv() heart_disease = pd.read_csv(\"data/heart-disease.csv\")  # Check the first 5 rows of the data heart_disease.head() Out[2]: age sex cp trestbps chol fbs restecg thalach exang oldpeak slope ca thal target 0 63 1 3 145 233 1 0 150 0 2.3 0 0 1 1 1 37 1 2 130 250 0 1 187 0 3.5 0 0 2 1 2 41 0 1 130 204 0 0 172 0 1.4 2 0 2 1 3 56 1 1 120 236 0 1 178 0 0.8 2 0 2 1 4 57 0 0 120 354 0 1 163 1 0.6 2 0 2 1 <p>Our goal here is to build a machine learning model on all of the columns except <code>target</code> to predict <code>target</code>.</p> <p>In essence, the <code>target</code> column is our target variable (also called <code>y</code> or <code>labels</code>) and the rest of the other columns are our independent variables (also called <code>data</code> or <code>X</code>).</p> <p>And since our target variable is one thing or another (heart disease or not), we know our problem is a classification problem (classifying whether something is one thing or another).</p> <p>Knowing this, let's create <code>X</code> and <code>y</code> by splitting our dataframe up.</p> In\u00a0[3]: Copied! <pre># Create X (all columns except target)\nX = heart_disease.drop('target', axis = 1)\n\n# Create y (only the target column)\ny = heart_disease['target']\n</pre> # Create X (all columns except target) X = heart_disease.drop('target', axis = 1)  # Create y (only the target column) y = heart_disease['target'] <p>Now we've split our data into <code>X</code> and <code>y</code>, we'll use Scikit-Learn to split it into training and test sets.</p> In\u00a0[4]: Copied! <pre># Import train_test_split from sklearn's model_selection module\nfrom sklearn.model_selection import train_test_split\n\n# Use train_test_split to split X &amp; y into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n</pre> # Import train_test_split from sklearn's model_selection module from sklearn.model_selection import train_test_split  # Use train_test_split to split X &amp; y into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2) In\u00a0[5]: Copied! <pre># View the different shapes of the training and test datasets\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n</pre> # View the different shapes of the training and test datasets X_train.shape, X_test.shape, y_train.shape, y_test.shape Out[5]: <pre>((242, 13), (61, 13), (242,), (61,))</pre> <p>What do you notice about the different shapes of the data?</p> <p>Since our data is now in training and test sets, we'll build a machine learning model to fit patterns in the training data and then make predictions on the test data.</p> <p>To figure out which machine learning model we should use, you can refer to Scikit-Learn's machine learning map.</p> <p>After following the map, you decide to use the <code>RandomForestClassifier</code>.</p> In\u00a0[6]: Copied! <pre># Import the RandomForestClassifier from sklearn's ensemble module\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Instantiate an instance of RandomForestClassifier as clf\nclf = RandomForestClassifier()\n</pre> # Import the RandomForestClassifier from sklearn's ensemble module from sklearn.ensemble import RandomForestClassifier  # Instantiate an instance of RandomForestClassifier as clf clf = RandomForestClassifier() <p>Now you've got a <code>RandomForestClassifier</code> instance, let's fit it to the training data.</p> <p>Once it's fit, we'll make predictions on the test data.</p> In\u00a0[8]: Copied! <pre># Fit the RandomForestClassifier to the training data\nclf.fit(X_train, y_train);\n</pre> # Fit the RandomForestClassifier to the training data clf.fit(X_train, y_train); In\u00a0[9]: Copied! <pre># Use the fitted model to make predictions on the test data and\n# save the predictions to a variable called y_preds\ny_preds = clf.predict(X_test)\n</pre> # Use the fitted model to make predictions on the test data and # save the predictions to a variable called y_preds y_preds = clf.predict(X_test) In\u00a0[11]: Copied! <pre># Evaluate the fitted model on the training set using the score() function\nclf.score(X_train, y_train)\n</pre> # Evaluate the fitted model on the training set using the score() function clf.score(X_train, y_train) Out[11]: <pre>1.0</pre> In\u00a0[12]: Copied! <pre># Evaluate the fitted model on the test set using the score() function\nclf.score(X_test, y_test)\n</pre> # Evaluate the fitted model on the test set using the score() function clf.score(X_test, y_test) Out[12]: <pre>0.819672131147541</pre> <ul> <li>How did you model go?</li> <li>What metric does <code>score()</code> return for classifiers?</li> <li>Did your model do better on the training dataset or test dataset?</li> </ul> In\u00a0[13]: Copied! <pre># Import LinearSVC from sklearn's svm module\nfrom sklearn.svm import LinearSVC\n\n# Import KNeighborsClassifier from sklearn's neighbors module\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Import SVC from sklearn's svm module\nfrom sklearn.svm import SVC\n\n# Import LogisticRegression from sklearn's linear_model module\nfrom sklearn.linear_model import LogisticRegression\n\n# Note: we don't have to import RandomForestClassifier, since we already have\n</pre> # Import LinearSVC from sklearn's svm module from sklearn.svm import LinearSVC  # Import KNeighborsClassifier from sklearn's neighbors module from sklearn.neighbors import KNeighborsClassifier  # Import SVC from sklearn's svm module from sklearn.svm import SVC  # Import LogisticRegression from sklearn's linear_model module from sklearn.linear_model import LogisticRegression  # Note: we don't have to import RandomForestClassifier, since we already have <p>Thanks to the consistency of Scikit-Learn's API design, we can use virtually the same code to fit, score and make predictions with each of our models.</p> <p>To see which model performs best, we'll do the following:</p> <ol> <li>Instantiate each model in a dictionary</li> <li>Create an empty results dictionary</li> <li>Fit each model on the training data</li> <li>Score each model on the test data</li> <li>Check the results</li> </ol> <p>If you're wondering what it means to instantiate each model in a dictionary, see the example below.</p> In\u00a0[23]: Copied! <pre># EXAMPLE: Instantiating a RandomForestClassifier() in a dictionary\nexample_dict = {\"RandomForestClassifier\": RandomForestClassifier()}\n\n# Create a dictionary called models which contains all of the classification models we've imported\n# Make sure the dictionary is in the same format as example_dict\n# The models dictionary should contain 5 models\nmodels = {\"LinearSVC\": LinearSVC(),\n          \"KNN\": KNeighborsClassifier(),\n          \"SVC\": SVC(),\n          \"LogisticRegression\": LogisticRegression(),\n          \"RandomForestClassifier\": RandomForestClassifier()}\n\n# Create an empty dictionary called results\nresults = {}\n</pre> # EXAMPLE: Instantiating a RandomForestClassifier() in a dictionary example_dict = {\"RandomForestClassifier\": RandomForestClassifier()}  # Create a dictionary called models which contains all of the classification models we've imported # Make sure the dictionary is in the same format as example_dict # The models dictionary should contain 5 models models = {\"LinearSVC\": LinearSVC(),           \"KNN\": KNeighborsClassifier(),           \"SVC\": SVC(),           \"LogisticRegression\": LogisticRegression(),           \"RandomForestClassifier\": RandomForestClassifier()}  # Create an empty dictionary called results results = {} <p>Since each model we're using has the same <code>fit()</code> and <code>score()</code> functions, we can loop through our models dictionary and, call <code>fit()</code> on the training data and then call <code>score()</code> with the test data.</p> In\u00a0[24]: Copied! <pre># EXAMPLE: Looping through example_dict fitting and scoring the model\nexample_results = {}\nfor model_name, model in example_results.items():\n    model.fit(X_train, y_train)\n    example_results[model_name] = model.score(X_test, y_test)\n\n# EXAMPLE: View the results\nexample_results    \n</pre> # EXAMPLE: Looping through example_dict fitting and scoring the model example_results = {} for model_name, model in example_results.items():     model.fit(X_train, y_train)     example_results[model_name] = model.score(X_test, y_test)  # EXAMPLE: View the results example_results     Out[24]: <pre>{}</pre> In\u00a0[27]: Copied! <pre># Loop through the models dictionary items, fitting the model on the training data\n# and appending the model name and model score on the test data to the results dictionary\nfor model_name, model in models.items():\n    model.fit(X_train, y_train)\n    results[model_name] = model.score(X_test, y_test)\n\n# View the results\nresults\n</pre> # Loop through the models dictionary items, fitting the model on the training data # and appending the model name and model score on the test data to the results dictionary for model_name, model in models.items():     model.fit(X_train, y_train)     results[model_name] = model.score(X_test, y_test)  # View the results results <pre>C:\\Users\\Nirajan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\svm\\_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  warnings.warn(\nC:\\Users\\Nirajan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n</pre> Out[27]: <pre>{'LinearSVC': 0.8360655737704918,\n 'KNN': 0.6229508196721312,\n 'SVC': 0.5573770491803278,\n 'LogisticRegression': 0.819672131147541,\n 'RandomForestClassifier': 0.8032786885245902}</pre> <ul> <li>Which model performed the best?</li> <li>Do the results change each time you run the cell?</li> <li>Why do you think this is?</li> </ul> <p>Due to the randomness of how each model finds patterns in the data, you might notice different results each time.</p> <p>Without manually setting the random state using the <code>random_state</code> parameter of some models or using a NumPy random seed, every time you run the cell, you'll get slightly different results.</p> <p>Let's see this in effect by running the same code as the cell above, except this time setting a NumPy random seed equal to 42.</p> In\u00a0[28]: Copied! <pre># Run the same code as the cell above, except this time set a NumPy random seed\n# equal to 42\nnp.random.seed(42)\n\nfor model_name, model in models.items():\n    model.fit(X_train, y_train)\n    results[model_name] = model.score(X_test, y_test)\n    \nresults\n</pre> # Run the same code as the cell above, except this time set a NumPy random seed # equal to 42 np.random.seed(42)  for model_name, model in models.items():     model.fit(X_train, y_train)     results[model_name] = model.score(X_test, y_test)      results <pre>C:\\Users\\Nirajan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\svm\\_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  warnings.warn(\nC:\\Users\\Nirajan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n</pre> Out[28]: <pre>{'LinearSVC': 0.7213114754098361,\n 'KNN': 0.6229508196721312,\n 'SVC': 0.5573770491803278,\n 'LogisticRegression': 0.819672131147541,\n 'RandomForestClassifier': 0.8032786885245902}</pre> <ul> <li>Run the cell above a few times, what do you notice about the results?</li> <li>Which model performs the best this time?</li> <li>What happens if you add a NumPy random seed to the cell where you called <code>train_test_split()</code> (towards the top of the notebook) and then rerun the cell above?</li> </ul> <p>Let's make our results a little more visual.</p> In\u00a0[37]: Copied! <pre># Create a pandas dataframe with the data as the values of the results dictionary,\n# the index as the keys of the results dictionary and a single column called accuracy.\n# Be sure to save the dataframe to a variable.\nresults_df = pd.DataFrame(results.values(), \n                          results.keys(), \n                          columns=['accuracy'])\n\n# Create a bar plot of the results dataframe using plot.bar()\nresults_df.plot.bar();\n</pre> # Create a pandas dataframe with the data as the values of the results dictionary, # the index as the keys of the results dictionary and a single column called accuracy. # Be sure to save the dataframe to a variable. results_df = pd.DataFrame(results.values(),                            results.keys(),                            columns=['accuracy'])  # Create a bar plot of the results dataframe using plot.bar() results_df.plot.bar(); <p>Using <code>np.random.seed(42)</code> results in the <code>LogisticRegression</code> model perfoming the best (at least on my computer).</p> <p>Let's tune its hyperparameters and see if we can improve it.</p> In\u00a0[38]: Copied! <pre># Different LogisticRegression hyperparameters\nlog_reg_grid = {\"C\": np.logspace(-4, 4, 20),\n                \"solver\": [\"liblinear\"]}\n</pre> # Different LogisticRegression hyperparameters log_reg_grid = {\"C\": np.logspace(-4, 4, 20),                 \"solver\": [\"liblinear\"]} <p>Since we've got a set of hyperparameters we can import <code>RandomizedSearchCV</code>, pass it our dictionary of hyperparameters and let it search for the best combination.</p> In\u00a0[40]: Copied! <pre># Setup np random seed of 42\nnp.random.seed(42)\n\n# Import RandomizedSearchCV from sklearn's model_selection module\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Setup an instance of RandomizedSearchCV with a LogisticRegression() estimator,\n# our log_reg_grid as the param_distributions, a cv of 5 and n_iter of 5.\nrs_log_reg = RandomizedSearchCV(estimator=LogisticRegression(),\n                                param_distributions=log_reg_grid,\n                                cv=5,\n                                n_iter=5,\n                                verbose=2)\n\n# Fit the instance of RandomizedSearchCV\nrs_log_reg.fit(X_train, y_train);\n</pre> # Setup np random seed of 42 np.random.seed(42)  # Import RandomizedSearchCV from sklearn's model_selection module from sklearn.model_selection import RandomizedSearchCV  # Setup an instance of RandomizedSearchCV with a LogisticRegression() estimator, # our log_reg_grid as the param_distributions, a cv of 5 and n_iter of 5. rs_log_reg = RandomizedSearchCV(estimator=LogisticRegression(),                                 param_distributions=log_reg_grid,                                 cv=5,                                 n_iter=5,                                 verbose=2)  # Fit the instance of RandomizedSearchCV rs_log_reg.fit(X_train, y_train); <pre>Fitting 5 folds for each of 5 candidates, totalling 25 fits\n[CV] END .........................C=0.0001, solver=liblinear; total time=   0.0s\n[CV] END .........................C=0.0001, solver=liblinear; total time=   0.0s\n[CV] END .........................C=0.0001, solver=liblinear; total time=   0.0s\n[CV] END .........................C=0.0001, solver=liblinear; total time=   0.0s\n[CV] END .........................C=0.0001, solver=liblinear; total time=   0.0s\n[CV] END ...............C=1438.44988828766, solver=liblinear; total time=   0.0s\n[CV] END ...............C=1438.44988828766, solver=liblinear; total time=   0.0s\n[CV] END ...............C=1438.44988828766, solver=liblinear; total time=   0.0s\n[CV] END ...............C=1438.44988828766, solver=liblinear; total time=   0.0s\n[CV] END ...............C=1438.44988828766, solver=liblinear; total time=   0.0s\n[CV] END ...............C=206.913808111479, solver=liblinear; total time=   0.0s\n[CV] END ...............C=206.913808111479, solver=liblinear; total time=   0.0s\n[CV] END ...............C=206.913808111479, solver=liblinear; total time=   0.0s\n[CV] END ...............C=206.913808111479, solver=liblinear; total time=   0.0s\n[CV] END ...............C=206.913808111479, solver=liblinear; total time=   0.0s\n[CV] END .........C=0.00026366508987303583, solver=liblinear; total time=   0.0s\n[CV] END .........C=0.00026366508987303583, solver=liblinear; total time=   0.0s\n[CV] END .........C=0.00026366508987303583, solver=liblinear; total time=   0.0s\n[CV] END .........C=0.00026366508987303583, solver=liblinear; total time=   0.0s\n[CV] END .........C=0.00026366508987303583, solver=liblinear; total time=   0.0s\n[CV] END ............C=0.23357214690901212, solver=liblinear; total time=   0.0s\n[CV] END ............C=0.23357214690901212, solver=liblinear; total time=   0.0s\n[CV] END ............C=0.23357214690901212, solver=liblinear; total time=   0.0s\n[CV] END ............C=0.23357214690901212, solver=liblinear; total time=   0.0s\n[CV] END ............C=0.23357214690901212, solver=liblinear; total time=   0.0s\n</pre> <p>Once <code>RandomizedSearchCV</code> has finished, we can find the best hyperparmeters it found using the <code>best_params_</code> attributes.</p> In\u00a0[41]: Copied! <pre># Find the best parameters of the RandomizedSearchCV instance using the best_params_ attribute\nrs_log_reg.best_params_\n</pre> # Find the best parameters of the RandomizedSearchCV instance using the best_params_ attribute rs_log_reg.best_params_ Out[41]: <pre>{'solver': 'liblinear', 'C': 206.913808111479}</pre> In\u00a0[45]: Copied! <pre># Score the instance of RandomizedSearchCV using the test data\nrs_log_reg.score(X_test, y_test)\n</pre> # Score the instance of RandomizedSearchCV using the test data rs_log_reg.score(X_test, y_test) Out[45]: <pre>0.8032786885245902</pre> <p>After hyperparameter tuning, did the models score improve? What else could you try to improve it? Are there any other methods of hyperparameter tuning you can find for <code>LogisticRegression</code>?</p> In\u00a0[49]: Copied! <pre># Instantiate a LogisticRegression classifier using the best hyperparameters from RandomizedSearchCV\nclf = LogisticRegression(solver = 'liblinear', C = 206.913808111479)\n\n# Fit the new instance of LogisticRegression with the best hyperparameters on the training data \nclf.fit(X_train, y_train);\n</pre> # Instantiate a LogisticRegression classifier using the best hyperparameters from RandomizedSearchCV clf = LogisticRegression(solver = 'liblinear', C = 206.913808111479)  # Fit the new instance of LogisticRegression with the best hyperparameters on the training data  clf.fit(X_train, y_train); <p>Now it's to import the relative Scikit-Learn methods for each of the classification evaluation metrics we're after.</p> In\u00a0[85]: Copied! <pre># Import confusion_matrix and classification_report from sklearn's metrics module\nfrom sklearn.metrics import classification_report\n\n# Import precision_score, recall_score and f1_score from sklearn's metrics module\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n\n# Import plot_roc_curve from sklearn's metrics module\nfrom sklearn.metrics import plot_roc_curve\n</pre> # Import confusion_matrix and classification_report from sklearn's metrics module from sklearn.metrics import classification_report  # Import precision_score, recall_score and f1_score from sklearn's metrics module from sklearn.metrics import precision_score, recall_score, f1_score  # Import plot_roc_curve from sklearn's metrics module from sklearn.metrics import plot_roc_curve <pre>\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nCell In[85], line 8\n      5 from sklearn.metrics import precision_score, recall_score, f1_score\n      7 # Import plot_roc_curve from sklearn's metrics module\n----&gt; 8 from sklearn.metrics import plot_roc_curve\n\nImportError: cannot import name 'plot_roc_curve' from 'sklearn.metrics' (C:\\Users\\Nirajan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\metrics\\__init__.py)</pre> <p>Evaluation metrics are very often comparing a model's predictions to some ground truth labels.</p> <p>Let's make some predictions on the test data using our latest model and save them to <code>y_preds</code>.</p> In\u00a0[52]: Copied! <pre># Make predictions on test data and save them\ny_preds = clf.predict(X_test)\n</pre> # Make predictions on test data and save them y_preds = clf.predict(X_test) <p>Time to use the predictions our model has made to evaluate it beyond accuracy.</p> In\u00a0[56]: Copied! <pre># Create a confusion matrix using the confusion_matrix function\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_preds)\n</pre> # Create a confusion matrix using the confusion_matrix function from sklearn.metrics import confusion_matrix confusion_matrix(y_test, y_preds) Out[56]: <pre>array([[22, 10],\n       [ 2, 27]], dtype=int64)</pre> <p>Challenge: The in-built <code>confusion_matrix</code> function in Scikit-Learn produces something not too visual, how could you make your confusion matrix more visual?</p> <p>You might want to search something like \"how to plot a confusion matrix\". Note: There may be more than one way to do this.</p> In\u00a0[78]: Copied! <pre># Create a more visual confusion matrix\nimport seaborn as sn\ndf = pd.DataFrame(confusion_matrix(y_test, y_preds))\nfig, ax = plt.subplots()\nax = sn.heatmap(df, annot = True, cmap = 'summer', cbar = False)\nax.set(xlabel = 'Predictions',\n       ylabel = 'True Value');\n</pre> # Create a more visual confusion matrix import seaborn as sn df = pd.DataFrame(confusion_matrix(y_test, y_preds)) fig, ax = plt.subplots() ax = sn.heatmap(df, annot = True, cmap = 'summer', cbar = False) ax.set(xlabel = 'Predictions',        ylabel = 'True Value'); <p>How about a classification report?</p> In\u00a0[80]: Copied! <pre># Create a classification report using the classification_report function\nprint(classification_report(y_test, y_preds))\n</pre> # Create a classification report using the classification_report function print(classification_report(y_test, y_preds)) <pre>              precision    recall  f1-score   support\n\n           0       0.92      0.69      0.79        32\n           1       0.73      0.93      0.82        29\n\n    accuracy                           0.80        61\n   macro avg       0.82      0.81      0.80        61\nweighted avg       0.83      0.80      0.80        61\n\n</pre> <p>Challenge: Write down what each of the columns in this classification report are.</p> <ul> <li>Precision - Indicates the proportion of positive identifications (model predicted class 1) which were actually correct. A model which produces no false positives has a precision of 1.0.</li> <li>Recall - Indicates the proportion of actual positives which were correctly classified. A model which produces no false negatives has a recall of 1.0.</li> <li>F1 score - A combination of precision and recall. A perfect model achieves an F1 score of 1.0.</li> <li>Support - The number of samples each metric was calculated on.</li> <li>Accuracy - The accuracy of the model in decimal form. Perfect accuracy is equal to 1.0.</li> <li>Macro avg - Short for macro average, the average precision, recall and F1 score between classes. Macro avg doesn\u2019t class imbalance into effort, so if you do have class imbalances, pay attention to this metric.</li> <li>Weighted avg - Short for weighted average, the weighted average precision, recall and F1 score between classes. Weighted means each metric is calculated with respect to how many samples there are in each class. This metric will favour the majority class (e.g. will give a high value when one class out performs another due to having more samples).</li> </ul> <p>The classification report gives us a range of values for precision, recall and F1 score, time to find these metrics using Scikit-Learn functions.</p> In\u00a0[82]: Copied! <pre># Find the precision score of the model using precision_score()\nprecision_score(y_test, y_preds)\n</pre> # Find the precision score of the model using precision_score() precision_score(y_test, y_preds) Out[82]: <pre>0.7297297297297297</pre> In\u00a0[83]: Copied! <pre># Find the recall score\nrecall_score(y_test, y_preds)\n</pre> # Find the recall score recall_score(y_test, y_preds) Out[83]: <pre>0.9310344827586207</pre> In\u00a0[84]: Copied! <pre># Find the F1 score\nf1_score(y_test, y_preds)\n</pre> # Find the F1 score f1_score(y_test, y_preds) Out[84]: <pre>0.8181818181818181</pre> <p>Confusion matrix: done. Classification report: done. ROC (receiver operator characteristic) curve &amp; AUC (area under curve) score: not done.</p> <p>Let's fix this.</p> <p>If you're unfamiliar with what a ROC curve, that's your first challenge, to read up on what one is.</p> <p>In a sentence, a ROC curve is a plot of the true positive rate versus the false positive rate.</p> <p>And the AUC score is the area behind the ROC curve.</p> <p>Scikit-Learn provides a handy function for creating both of these called <code>plot_roc_curve()</code>.</p> In\u00a0[101]: Copied! <pre># Plot a ROC curve using our current machine learning model using plot_roc_curve\ny_preds_prob = clf.predict_proba(X_test)\ny_preds_positive = y_preds_prob[:,1]\ny_preds_positive\nfpr, tpr, threshold = roc_curve(y_test, y_preds_positive)\nplt.plot(fpr, tpr);\n</pre> # Plot a ROC curve using our current machine learning model using plot_roc_curve y_preds_prob = clf.predict_proba(X_test) y_preds_positive = y_preds_prob[:,1] y_preds_positive fpr, tpr, threshold = roc_curve(y_test, y_preds_positive) plt.plot(fpr, tpr); <p>Beautiful! We've gone far beyond accuracy with a plethora extra classification evaluation metrics.</p> <p>If you're not sure about any of these, don't worry, they can take a while to understand. That could be an optional extension, reading up on a classification metric you're not sure of.</p> <p>The thing to note here is all of these metrics have been calculated using a single training set and a single test set. Whilst this is okay, a more robust way is to calculate them using cross-validation.</p> <p>We can calculate various evaluation metrics using cross-validation using Scikit-Learn's <code>cross_val_score()</code> function along with the <code>scoring</code> parameter.</p> In\u00a0[102]: Copied! <pre># Import cross_val_score from sklearn's model_selection module\nfrom sklearn.model_selection import cross_val_score\n</pre> # Import cross_val_score from sklearn's model_selection module from sklearn.model_selection import cross_val_score In\u00a0[103]: Copied! <pre># EXAMPLE: By default cross_val_score returns 5 values (cv=5).\ncross_val_score(clf, \n                X, \n                y, \n                scoring=\"accuracy\",\n                cv=5)\n</pre> # EXAMPLE: By default cross_val_score returns 5 values (cv=5). cross_val_score(clf,                  X,                  y,                  scoring=\"accuracy\",                 cv=5) Out[103]: <pre>array([0.80327869, 0.8852459 , 0.83606557, 0.86666667, 0.76666667])</pre> In\u00a0[104]: Copied! <pre># EXAMPLE: Taking the mean of the returned values from cross_val_score \n# gives a cross-validated version of the scoring metric.\ncross_val_acc = np.mean(cross_val_score(clf,\n                                        X,\n                                        y,\n                                        scoring=\"accuracy\",\n                                        cv=5))\n\ncross_val_acc\n</pre> # EXAMPLE: Taking the mean of the returned values from cross_val_score  # gives a cross-validated version of the scoring metric. cross_val_acc = np.mean(cross_val_score(clf,                                         X,                                         y,                                         scoring=\"accuracy\",                                         cv=5))  cross_val_acc Out[104]: <pre>0.831584699453552</pre> <p>In the examples, the cross-validated accuracy is found by taking the mean of the array returned by <code>cross_val_score()</code>.</p> <p>Now it's time to find the same for precision, recall and F1 score.</p> In\u00a0[106]: Copied! <pre># Find the cross-validated precision\ncross_val_precision = cross_val_score(clf, X, y, cv = 5, scoring = 'precision')\ncross_val_precision\n</pre> # Find the cross-validated precision cross_val_precision = cross_val_score(clf, X, y, cv = 5, scoring = 'precision') cross_val_precision Out[106]: <pre>array([0.78378378, 0.90625   , 0.84848485, 0.83783784, 0.74358974])</pre> In\u00a0[107]: Copied! <pre># Find the cross-validated recall\ncross_val_recall = cross_val_score(clf, X, y, cv = 5, scoring = 'recall')\ncross_val_recall\n</pre> # Find the cross-validated recall cross_val_recall = cross_val_score(clf, X, y, cv = 5, scoring = 'recall') cross_val_recall Out[107]: <pre>array([0.87878788, 0.87878788, 0.84848485, 0.93939394, 0.87878788])</pre> In\u00a0[108]: Copied! <pre># Find the cross-validated F1 score\ncross_val_f1 = cross_val_score(clf, X, y, cv = 5, scoring = 'f1')\ncross_val_f1\n</pre> # Find the cross-validated F1 score cross_val_f1 = cross_val_score(clf, X, y, cv = 5, scoring = 'f1') cross_val_f1 Out[108]: <pre>array([0.82857143, 0.89230769, 0.84848485, 0.88571429, 0.80555556])</pre> In\u00a0[109]: Copied! <pre># Import the dump and load functions from the joblib library\nimport joblib\njoblib.dump(clf, filename = \"testing.joblib\")\n</pre> # Import the dump and load functions from the joblib library import joblib joblib.dump(clf, filename = \"testing.joblib\") Out[109]: <pre>['testing.joblib']</pre> In\u00a0[110]: Copied! <pre># Use the load function to import the trained model you just exported\n# Save it to a different variable name to the origial trained model\nloaded_model = joblib.load(filename = 'testing.joblib')\n\n# Evaluate the loaded trained model on the test data\nloaded_model.score(X_test, y_test)\n</pre> # Use the load function to import the trained model you just exported # Save it to a different variable name to the origial trained model loaded_model = joblib.load(filename = 'testing.joblib')  # Evaluate the loaded trained model on the test data loaded_model.score(X_test, y_test) Out[110]: <pre>0.8032786885245902</pre> <p>What do you notice about the loaded trained model results versus the original (pre-exported) model results?</p> In\u00a0[112]: Copied! <pre># Read in the car sales data\ncar_sales = pd.read_csv(\"https://raw.githubusercontent.com/mrdbourke/zero-to-mastery-ml/master/data/car-sales-extended-missing-data.csv\")\n\n# View the first 5 rows of the car sales data\ncar_sales.head()\n</pre> # Read in the car sales data car_sales = pd.read_csv(\"https://raw.githubusercontent.com/mrdbourke/zero-to-mastery-ml/master/data/car-sales-extended-missing-data.csv\")  # View the first 5 rows of the car sales data car_sales.head() Out[112]: Make Colour Odometer (KM) Doors Price 0 Honda White 35431.0 4.0 15323.0 1 BMW Blue 192714.0 5.0 19943.0 2 Honda White 84714.0 4.0 28343.0 3 Toyota White 154365.0 4.0 13434.0 4 Nissan Blue 181577.0 3.0 14043.0 In\u00a0[113]: Copied! <pre># Get information about the car sales DataFrame\ncar_sales.info()\n</pre> # Get information about the car sales DataFrame car_sales.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1000 entries, 0 to 999\nData columns (total 5 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Make           951 non-null    object \n 1   Colour         950 non-null    object \n 2   Odometer (KM)  950 non-null    float64\n 3   Doors          950 non-null    float64\n 4   Price          950 non-null    float64\ndtypes: float64(3), object(2)\nmemory usage: 39.2+ KB\n</pre> <p>Looking at the output of <code>info()</code>,</p> <ul> <li>How many rows are there total?</li> <li>What datatypes are in each column?</li> <li>How many missing values are there in each column?</li> </ul> In\u00a0[114]: Copied! <pre># Find number of missing values in each column\ncar_sales.isna().sum()\n</pre> # Find number of missing values in each column car_sales.isna().sum() Out[114]: <pre>Make             49\nColour           50\nOdometer (KM)    50\nDoors            50\nPrice            50\ndtype: int64</pre> In\u00a0[124]: Copied! <pre># Find the datatypes of each column of car_sales\ncar_sales.dtypes\n</pre> # Find the datatypes of each column of car_sales car_sales.dtypes Out[124]: <pre>Make              object\nColour            object\nOdometer (KM)    float64\nDoors            float64\nPrice            float64\ndtype: object</pre> <p>Knowing this information, what would happen if we tried to model our data as it is?</p> <p>Let's see.</p> In\u00a0[125]: Copied! <pre># EXAMPLE: This doesn't work because our car_sales data isn't all numerical\nfrom sklearn.ensemble import RandomForestRegressor\ncar_sales_X, car_sales_y = car_sales.drop(\"Price\", axis=1), car_sales.Price\nrf_regressor = RandomForestRegressor().fit(car_sales_X, car_sales_y)\n</pre> # EXAMPLE: This doesn't work because our car_sales data isn't all numerical from sklearn.ensemble import RandomForestRegressor car_sales_X, car_sales_y = car_sales.drop(\"Price\", axis=1), car_sales.Price rf_regressor = RandomForestRegressor().fit(car_sales_X, car_sales_y) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[125], line 4\n      2 from sklearn.ensemble import RandomForestRegressor\n      3 car_sales_X, car_sales_y = car_sales.drop(\"Price\", axis=1), car_sales.Price\n----&gt; 4 rf_regressor = RandomForestRegressor().fit(car_sales_X, car_sales_y)\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\ensemble\\_forest.py:346, in BaseForest.fit(self, X, y, sample_weight)\n    344 if issparse(y):\n    345     raise ValueError(\"sparse multilabel-indicator for y is not supported.\")\n--&gt; 346 X, y = self._validate_data(\n    347     X, y, multi_output=True, accept_sparse=\"csc\", dtype=DTYPE\n    348 )\n    349 if sample_weight is not None:\n    350     sample_weight = _check_sample_weight(sample_weight, X)\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\base.py:554, in BaseEstimator._validate_data(self, X, y, reset, validate_separately, **check_params)\n    552         y = check_array(y, input_name=\"y\", **check_y_params)\n    553     else:\n--&gt; 554         X, y = check_X_y(X, y, **check_params)\n    555     out = X, y\n    557 if not no_val_X and check_params.get(\"ensure_2d\", True):\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\utils\\validation.py:1104, in check_X_y(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\n   1099         estimator_name = _check_estimator_name(estimator)\n   1100     raise ValueError(\n   1101         f\"{estimator_name} requires y to be passed, but the target y is None\"\n   1102     )\n-&gt; 1104 X = check_array(\n   1105     X,\n   1106     accept_sparse=accept_sparse,\n   1107     accept_large_sparse=accept_large_sparse,\n   1108     dtype=dtype,\n   1109     order=order,\n   1110     copy=copy,\n   1111     force_all_finite=force_all_finite,\n   1112     ensure_2d=ensure_2d,\n   1113     allow_nd=allow_nd,\n   1114     ensure_min_samples=ensure_min_samples,\n   1115     ensure_min_features=ensure_min_features,\n   1116     estimator=estimator,\n   1117     input_name=\"X\",\n   1118 )\n   1120 y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)\n   1122 check_consistent_length(X, y)\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\utils\\validation.py:877, in check_array(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\n    875         array = xp.astype(array, dtype, copy=False)\n    876     else:\n--&gt; 877         array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n    878 except ComplexWarning as complex_warning:\n    879     raise ValueError(\n    880         \"Complex data not supported\\n{}\\n\".format(array)\n    881     ) from complex_warning\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\utils\\_array_api.py:185, in _asarray_with_order(array, dtype, order, copy, xp)\n    182     xp, _ = get_namespace(array)\n    183 if xp.__name__ in {\"numpy\", \"numpy.array_api\"}:\n    184     # Use NumPy API to support order\n--&gt; 185     array = numpy.asarray(array, order=order, dtype=dtype)\n    186     return xp.asarray(array, copy=copy)\n    187 else:\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\generic.py:2070, in NDFrame.__array__(self, dtype)\n   2069 def __array__(self, dtype: npt.DTypeLike | None = None) -&gt; np.ndarray:\n-&gt; 2070     return np.asarray(self._values, dtype=dtype)\n\nValueError: could not convert string to float: 'Honda'</pre> <p>As we see, the cell above breaks because our data contains non-numerical values as well as missing data.</p> <p>To take care of some of the missing data, we'll remove the rows which have no labels (all the rows with missing values in the <code>Price</code> column).</p> In\u00a0[128]: Copied! <pre># Remove rows with no labels (NaN's in the Price column)\ncar_sales = car_sales.dropna(subset = ['Price'])\n</pre> # Remove rows with no labels (NaN's in the Price column) car_sales = car_sales.dropna(subset = ['Price']) In\u00a0[129]: Copied! <pre>car_sales.isna().sum()\n</pre> car_sales.isna().sum() Out[129]: <pre>Make             47\nColour           46\nOdometer (KM)    48\nDoors            47\nPrice             0\ndtype: int64</pre> In\u00a0[130]: Copied! <pre># Import Pipeline from sklearn's pipeline module\nfrom sklearn.pipeline import Pipeline\n\n# Import ColumnTransformer from sklearn's compose module\nfrom sklearn.compose import ColumnTransformer\n\n# Import SimpleImputer from sklearn's impute module\nfrom sklearn.impute import SimpleImputer\n\n# Import OneHotEncoder from sklearn's preprocessing module\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Import train_test_split from sklearn's model_selection module\nfrom sklearn.model_selection import train_test_split\n</pre> # Import Pipeline from sklearn's pipeline module from sklearn.pipeline import Pipeline  # Import ColumnTransformer from sklearn's compose module from sklearn.compose import ColumnTransformer  # Import SimpleImputer from sklearn's impute module from sklearn.impute import SimpleImputer  # Import OneHotEncoder from sklearn's preprocessing module from sklearn.preprocessing import OneHotEncoder  # Import train_test_split from sklearn's model_selection module from sklearn.model_selection import train_test_split <p>Now we've got the necessary tools we need to create our preprocessing <code>Pipeline</code> which fills missing values along with turning all non-numerical data into numbers.</p> <p>Let's start with the categorical features.</p> In\u00a0[131]: Copied! <pre># Define different categorical features \ncategorical_features = [\"Make\", \"Colour\"]\n\n# Create categorical transformer Pipeline\ncategorical_transformer = Pipeline(steps=[\n    # Set SimpleImputer strategy to \"constant\" and fill value to \"missing\"\n    (\"imputer\", SimpleImputer(strategy='constant', fill_value='missing')),\n    # Set OneHotEncoder to ignore the unknowns\n    (\"onehot\", OneHotEncoder(handle_unknown='ignore'))])\n</pre> # Define different categorical features  categorical_features = [\"Make\", \"Colour\"]  # Create categorical transformer Pipeline categorical_transformer = Pipeline(steps=[     # Set SimpleImputer strategy to \"constant\" and fill value to \"missing\"     (\"imputer\", SimpleImputer(strategy='constant', fill_value='missing')),     # Set OneHotEncoder to ignore the unknowns     (\"onehot\", OneHotEncoder(handle_unknown='ignore'))]) <p>It would be safe to treat <code>Doors</code> as a categorical feature as well, however since we know the vast majority of cars have 4 doors, we'll impute the missing <code>Doors</code> values as 4.</p> In\u00a0[132]: Copied! <pre># Define Doors features\ndoor_feature = [\"Doors\"]\n\n# Create Doors transformer Pipeline\ndoor_transformer = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'constant', fill_value = 4))\n])\n</pre> # Define Doors features door_feature = [\"Doors\"]  # Create Doors transformer Pipeline door_transformer = Pipeline(steps = [     ('imputer', SimpleImputer(strategy = 'constant', fill_value = 4)) ]) <p>Now onto the numeric features. In this case, the only numeric feature is the <code>Odometer (KM)</code> column. Let's fill its missing values with the median.</p> In\u00a0[135]: Copied! <pre># Define numeric features (only the Odometer (KM) column)\nnumeric_features = [\"Odometer (KM)\"]\n\n# Crearte numeric transformer Pipeline\nnumeric_transformer = Pipeline(steps=[\n    # Set SimpleImputer strategy to fill missing values with the \"Median\"\n    (\"imputer\", SimpleImputer(strategy='median'))])\n</pre> # Define numeric features (only the Odometer (KM) column) numeric_features = [\"Odometer (KM)\"]  # Crearte numeric transformer Pipeline numeric_transformer = Pipeline(steps=[     # Set SimpleImputer strategy to fill missing values with the \"Median\"     (\"imputer\", SimpleImputer(strategy='median'))]) <p>Time to put all of our individual transformer <code>Pipeline</code>'s into a single <code>ColumnTransformer</code> instance.</p> In\u00a0[136]: Copied! <pre># Setup preprocessing steps (fill missing values, then convert to numbers)\npreprocessor = ColumnTransformer(\n    transformers=[\n        # Use the categorical_transformer to transform the categorical_features\n        (\"cat\", categorical_transformer, categorical_features),\n        # Use the door_transformer to transform the door_feature\n        (\"door\", door_transformer, door_feature),\n        # Use the numeric_transformer to transform the numeric_features\n        (\"num\", numeric_transformer, numeric_features)])\n</pre> # Setup preprocessing steps (fill missing values, then convert to numbers) preprocessor = ColumnTransformer(     transformers=[         # Use the categorical_transformer to transform the categorical_features         (\"cat\", categorical_transformer, categorical_features),         # Use the door_transformer to transform the door_feature         (\"door\", door_transformer, door_feature),         # Use the numeric_transformer to transform the numeric_features         (\"num\", numeric_transformer, numeric_features)]) <p>Boom! Now our <code>preprocessor</code> is ready, time to import some regression models to try out.</p> <p>Comparing our data to the Scikit-Learn machine learning map, we can see there's a handful of different regression models we can try.</p> <ul> <li>RidgeRegression</li> <li>SVR(kernel=\"linear\") - short for Support Vector Regressor, a form form of support vector machine.</li> <li>SVR(kernel=\"rbf\") - short for Support Vector Regressor, a form of support vector machine.</li> <li>RandomForestRegressor - the regression version of RandomForestClassifier.</li> </ul> In\u00a0[137]: Copied! <pre># Import Ridge from sklearn's linear_model module\nfrom sklearn.linear_model import Ridge\n\n# Import SVR from sklearn's svm module\nfrom sklearn.svm import SVR\n\n# Import RandomForestRegressor from sklearn's ensemble module\nfrom sklearn.ensemble import RandomForestRegressor\n</pre> # Import Ridge from sklearn's linear_model module from sklearn.linear_model import Ridge  # Import SVR from sklearn's svm module from sklearn.svm import SVR  # Import RandomForestRegressor from sklearn's ensemble module from sklearn.ensemble import RandomForestRegressor <p>Again, thanks to the design of the Scikit-Learn library, we're able to use very similar code for each of these models.</p> <p>To test them all, we'll create a dictionary of regression models and an empty dictionary for regression model results.</p> In\u00a0[139]: Copied! <pre># Create dictionary of model instances, there should be 4 total key, value pairs\n# in the form {\"model_name\": model_instance}.\n# Don't forget there's two versions of SVR, one with a \"linear\" kernel and the\n# other with kernel set to \"rbf\".\nregression_models = {\"Ridge\": Ridge(),\n                     \"SVR_linear\": SVR(kernel = 'linear'),\n                     \"SVR_rbf\": SVR(kernel = 'rbf'),\n                     \"RandomForestRegressor\": RandomForestRegressor()}\n\n# Create an empty dictionary for the regression results\nregression_results = {}\n</pre> # Create dictionary of model instances, there should be 4 total key, value pairs # in the form {\"model_name\": model_instance}. # Don't forget there's two versions of SVR, one with a \"linear\" kernel and the # other with kernel set to \"rbf\". regression_models = {\"Ridge\": Ridge(),                      \"SVR_linear\": SVR(kernel = 'linear'),                      \"SVR_rbf\": SVR(kernel = 'rbf'),                      \"RandomForestRegressor\": RandomForestRegressor()}  # Create an empty dictionary for the regression results regression_results = {} <p>Our regression model dictionary is prepared as well as an empty dictionary to append results to, time to get the data split into <code>X</code> (feature variables) and <code>y</code> (target variable) as well as training and test sets.</p> <p>In our car sales problem, we're trying to use the different characteristics of a car (<code>X</code>) to predict its sale price (<code>y</code>).</p> In\u00a0[144]: Copied! <pre># Create car sales X data (every column of car_sales except Price)\ncar_sales_X = car_sales.drop('Price', axis = 1)\n\n# Create car sales y data (the Price column of car_sales)\ncar_sales_y = car_sales['Price']\n</pre> # Create car sales X data (every column of car_sales except Price) car_sales_X = car_sales.drop('Price', axis = 1)  # Create car sales y data (the Price column of car_sales) car_sales_y = car_sales['Price'] In\u00a0[147]: Copied! <pre># Use train_test_split to split the car_sales_X and car_sales_y data into \n# training and test sets.\n# Give the test set 20% of the data using the test_size parameter.\n# For reproducibility set the random_state parameter to 42.\ncar_X_train, car_X_test, car_y_train, car_y_test = train_test_split(car_sales_X,\n                                                                    car_sales_y,\n                                                                    test_size=0.2,\n                                                                    random_state=42)\n\n# Check the shapes of the training and test datasets\ncar_X_train.shape, car_X_test.shape, car_y_train.shape, car_y_test.shape\n</pre> # Use train_test_split to split the car_sales_X and car_sales_y data into  # training and test sets. # Give the test set 20% of the data using the test_size parameter. # For reproducibility set the random_state parameter to 42. car_X_train, car_X_test, car_y_train, car_y_test = train_test_split(car_sales_X,                                                                     car_sales_y,                                                                     test_size=0.2,                                                                     random_state=42)  # Check the shapes of the training and test datasets car_X_train.shape, car_X_test.shape, car_y_train.shape, car_y_test.shape Out[147]: <pre>((760, 4), (190, 4), (760,), (190,))</pre> <ul> <li>How many rows are in each set?</li> <li>How many columns are in each set?</li> </ul> <p>Alright, our data is split into training and test sets, time to build a small loop which is going to:</p> <ol> <li>Go through our <code>regression_models</code> dictionary</li> <li>Create a <code>Pipeline</code> which contains our <code>preprocessor</code> as well as one of the models in the dictionary</li> <li>Fits the <code>Pipeline</code> to the car sales training data</li> <li>Evaluates the target model on the car sales test data and appends the results to our <code>regression_results</code> dictionary</li> </ol> In\u00a0[148]: Copied! <pre># Loop through the items in the regression_models dictionary\nfor model_name, model in regression_models.items():\n    \n    # Create a model Pipeline with a preprocessor step and model step\n    model_pipeline = Pipeline(steps=[(\"preprocessor\", preprocessor),\n                                      (\"model\", model)])\n    \n    # Fit the model Pipeline to the car sales training data\n    print(f\"Fitting {model_name}...\")\n    model_pipeline.fit(car_X_train, car_y_train)\n    \n    # Score the model Pipeline on the test data appending the model_name to the \n    # results dictionary\n    print(f\"Scoring {model_name}...\")\n    regression_results[model_name] = model_pipeline.score(car_X_test, \n                                                          car_y_test)\n</pre> # Loop through the items in the regression_models dictionary for model_name, model in regression_models.items():          # Create a model Pipeline with a preprocessor step and model step     model_pipeline = Pipeline(steps=[(\"preprocessor\", preprocessor),                                       (\"model\", model)])          # Fit the model Pipeline to the car sales training data     print(f\"Fitting {model_name}...\")     model_pipeline.fit(car_X_train, car_y_train)          # Score the model Pipeline on the test data appending the model_name to the      # results dictionary     print(f\"Scoring {model_name}...\")     regression_results[model_name] = model_pipeline.score(car_X_test,                                                            car_y_test) <pre>Fitting Ridge...\nScoring Ridge...\nFitting SVR_linear...\nScoring SVR_linear...\nFitting SVR_rbf...\nScoring SVR_rbf...\nFitting RandomForestRegressor...\nScoring RandomForestRegressor...\n</pre> <p>Our regression models have been fit, let's see how they did!</p> In\u00a0[149]: Copied! <pre># Check the results of each regression model by printing the regression_results\n# dictionary\nregression_results\n</pre> # Check the results of each regression model by printing the regression_results # dictionary regression_results Out[149]: <pre>{'Ridge': 0.2540261105794389,\n 'SVR_linear': -0.489452821008145,\n 'SVR_rbf': 0.0018546241516633755,\n 'RandomForestRegressor': 0.2273216311503794}</pre> <ul> <li>Which model did the best?</li> <li>How could you improve its results?</li> <li>What metric does the <code>score()</code> method of a regression model return by default?</li> </ul> <p>Since we've fitted some models but only compared them via the default metric contained in the <code>score()</code> method (R^2 score or coefficient of determination), let's take the <code>RidgeRegression</code> model and evaluate it with a few other regression metrics.</p> <p>Specifically, let's find:</p> <ol> <li>R^2 (pronounced r-squared) or coefficient of determination - Compares your models predictions to the mean of the targets. Values can range from negative infinity (a very poor model) to 1. For example, if all your model does is predict the mean of the targets, its R^2 value would be 0. And if your model perfectly predicts a range of numbers it's R^2 value would be 1.</li> <li>Mean absolute error (MAE) - The average of the absolute differences between predictions and actual values. It gives you an idea of how wrong your predictions were.</li> <li>Mean squared error (MSE) - The average squared differences between predictions and actual values. Squaring the errors removes negative errors. It also amplifies outliers (samples which have larger errors).</li> </ol> <p>Scikit-Learn has a few classes built-in which are going to help us with these, namely, <code>mean_absolute_error</code>, <code>mean_squared_error</code> and <code>r2_score</code>.</p> In\u00a0[150]: Copied! <pre># Import mean_absolute_error from sklearn's metrics module\nfrom sklearn.metrics import mean_absolute_error\n\n# Import mean_squared_error from sklearn's metrics module\nfrom sklearn.metrics import mean_squared_error\n\n# Import r2_score from sklearn's metrics module\nfrom sklearn.metrics import r2_score\n</pre> # Import mean_absolute_error from sklearn's metrics module from sklearn.metrics import mean_absolute_error  # Import mean_squared_error from sklearn's metrics module from sklearn.metrics import mean_squared_error  # Import r2_score from sklearn's metrics module from sklearn.metrics import r2_score <p>All the evaluation metrics we're concerned with compare a model's predictions with the ground truth labels. Knowing this, we'll have to make some predictions.</p> <p>Let's create a <code>Pipeline</code> with the <code>preprocessor</code> and a <code>Ridge()</code> model, fit it on the car sales training data and then make predictions on the car sales test data.</p> In\u00a0[151]: Copied! <pre># Create RidgeRegression Pipeline with preprocessor as the \"preprocessor\" and\n# Ridge() as the \"model\".\nridge_pipeline = Pipeline(steps=[(\"preprocessor\", preprocessor),\n                                 (\"model\", Ridge())])\n\n# Fit the RidgeRegression Pipeline to the car sales training data\nridge_pipeline.fit(car_X_train, car_y_train)\n\n# Make predictions on the car sales test data using the RidgeRegression Pipeline\ncar_y_preds = ridge_pipeline.predict(car_X_test)\n\n# View the first 50 predictions\ncar_y_preds[:50]\n</pre> # Create RidgeRegression Pipeline with preprocessor as the \"preprocessor\" and # Ridge() as the \"model\". ridge_pipeline = Pipeline(steps=[(\"preprocessor\", preprocessor),                                  (\"model\", Ridge())])  # Fit the RidgeRegression Pipeline to the car sales training data ridge_pipeline.fit(car_X_train, car_y_train)  # Make predictions on the car sales test data using the RidgeRegression Pipeline car_y_preds = ridge_pipeline.predict(car_X_test)  # View the first 50 predictions car_y_preds[:50] Out[151]: <pre>array([18514.480873  , 22204.86580267, 11045.72092225,  6891.87687957,\n        8793.93970278, 10926.96786577, 15267.76229871, 13834.80312146,\n       20207.44377898, 14412.59968701,  6216.01228306, 16543.06707068,\n       11783.69374936, 13492.13284255, 14321.17899086, 16425.45131776,\n       15999.88230172,  9925.04252351, 11576.64865889, 11580.55130633,\n       10647.22402588, 13113.54464064, 17874.90033257, 23447.29246732,\n       11797.33019118, 14481.85336505, 18430.527126  , 14680.33044208,\n       20585.63901269, 19953.91395769, 18163.1170151 , 22366.43390174,\n       12435.69707467, 14265.25495748, 18351.62656383, 19564.58267503,\n       12213.05747919, 12479.20772529, 18677.93478691, 11284.89072638,\n       15278.54001605, 17378.81425165, 19247.77623181, 17343.90692672,\n       15048.12797569, 12724.44477165, 12389.86021752,  8475.63778401,\n       15255.49324105, 18602.79970861])</pre> <p>Nice! Now we've got some predictions, time to evaluate them. We'll find the mean squared error (MSE), mean absolute error (MAE) and R^2 score (coefficient of determination) of our model.</p> In\u00a0[152]: Copied! <pre># EXAMPLE: Find the MSE by comparing the car sales test labels to the car sales predictions\nmse = mean_squared_error(car_y_test, car_y_preds)\n# Return the MSE\nmse\n</pre> # EXAMPLE: Find the MSE by comparing the car sales test labels to the car sales predictions mse = mean_squared_error(car_y_test, car_y_preds) # Return the MSE mse Out[152]: <pre>49950182.63337459</pre> In\u00a0[153]: Copied! <pre># Find the MAE by comparing the car sales test labels to the car sales predictions\nMAE = mean_absolute_error(car_y_test, car_y_preds)\n# Return the MAE\nMAE\n</pre> # Find the MAE by comparing the car sales test labels to the car sales predictions MAE = mean_absolute_error(car_y_test, car_y_preds) # Return the MAE MAE Out[153]: <pre>5713.821520855157</pre> In\u00a0[\u00a0]: Copied! <pre># Find the R^2 score by comparing the car sales test labels to the car sales predictions\n###\n# Return the R^2 score\n###\n</pre> # Find the R^2 score by comparing the car sales test labels to the car sales predictions ### # Return the R^2 score ### <p>Boom! Our model could potentially do with some hyperparameter tuning (this would be a great extension). And we could probably do with finding some more data on our problem, 1000 rows doesn't seem to be sufficient.</p> <ul> <li>How would you export the trained regression model?</li> </ul>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#scikit-learn-practice-exercises","title":"Scikit-Learn Practice Exercises\u00b6","text":"<p>This notebook offers a set of excercises for different tasks with Scikit-Learn.</p> <p>Notes:</p> <ul> <li>There may be more than one different way to answer a question or complete an exercise.</li> <li>Some skeleton code has been implemented for you.</li> <li>Exercises are based off (and directly taken from) the quick introduction to Scikit-Learn notebook.</li> <li>Different tasks will be detailed by comments or text. Places to put your own code are defined by <code>###</code> (don't remove anything other than <code>###</code>).</li> </ul> <p>For further reference and resources, it's advised to check out the Scikit-Learn documnetation.</p> <p>And if you get stuck, try searching for a question in the following format: \"how to do XYZ with Scikit-Learn\", where XYZ is the function you want to leverage from Scikit-Learn.</p> <p>Since we'll be working with data, we'll import Scikit-Learn's counterparts, Matplotlib, NumPy and pandas.</p> <p>Let's get started.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#end-to-end-scikit-learn-classification-workflow","title":"End-to-end Scikit-Learn classification workflow\u00b6","text":"<p>Let's start with an end to end Scikit-Learn workflow.</p> <p>More specifically, we'll:</p> <ol> <li>Get a dataset ready</li> <li>Prepare a machine learning model to make predictions</li> <li>Fit the model to the data and make a prediction</li> <li>Evaluate the model's predictions</li> </ol> <p>The data we'll be using is stored on GitHub. We'll start with <code>heart-disease.csv</code>, a dataset which contains anonymous patient data and whether or not they have heart disease.</p> <p>Note: When viewing a <code>.csv</code> on GitHub, make sure it's in the raw format. For example, the URL should look like: https://raw.githubusercontent.com/mrdbourke/zero-to-mastery-ml/master/data/heart-disease.csv</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#1-getting-a-dataset-ready","title":"1. Getting a dataset ready\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#2-preparing-a-machine-learning-model","title":"2. Preparing a machine learning model\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#3-fitting-a-model-and-making-predictions","title":"3. Fitting a model and making predictions\u00b6","text":""},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#4-evaluating-a-models-predictions","title":"4. Evaluating a model's predictions\u00b6","text":"<p>Evaluating predictions is as important making them. Let's check how our model did by calling the <code>score()</code> method on it and passing it the training (<code>X_train, y_train</code>) and testing data (<code>X_test, y_test</code>).</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#experimenting-with-different-classification-models","title":"Experimenting with different classification models\u00b6","text":"<p>Now we've quickly covered an end-to-end Scikit-Learn workflow and since experimenting is a large part of machine learning, we'll now try a series of different machine learning models and see which gets the best results on our dataset.</p> <p>Going through the Scikit-Learn machine learning map, we see there are a number of different classification models we can try (different models are in the green boxes).</p> <p>For this exercise, the models we're going to try and compare are:</p> <ul> <li>LinearSVC</li> <li>KNeighborsClassifier (also known as K-Nearest Neighbors or KNN)</li> <li>SVC (also known as support vector classifier, a form of support vector machine)</li> <li>LogisticRegression (despite the name, this is actually a classifier)</li> <li>RandomForestClassifier (an ensemble method and what we used above)</li> </ul> <p>We'll follow the same workflow we used above (except this time for multiple models):</p> <ol> <li>Import a machine learning model</li> <li>Get it ready</li> <li>Fit it to the data and make predictions</li> <li>Evaluate the fitted model</li> </ol> <p>Note: Since we've already got the data ready, we can reuse it in this section.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#hyperparameter-tuning","title":"Hyperparameter Tuning\u00b6","text":"<p>Remember, if you're ever trying to tune a machine learning models hyperparameters and you're not sure where to start, you can always search something like \"MODEL_NAME hyperparameter tuning\".</p> <p>In the case of LogisticRegression, you might come across articles, such as Hyperparameter Tuning Using Grid Search by Chris Albon.</p> <p>The article uses <code>GridSearchCV</code> but we're going to be using <code>RandomizedSearchCV</code>.</p> <p>The different hyperparameters to search over have been setup for you in <code>log_reg_grid</code> but feel free to change them.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#classifier-model-evaluation","title":"Classifier Model Evaluation\u00b6","text":"<p>We've tried to find the best hyperparameters on our model using <code>RandomizedSearchCV</code> and so far we've only been evaluating our model using the <code>score()</code> function which returns accuracy.</p> <p>But when it comes to classification, you'll likely want to use a few more evaluation metrics, including:</p> <ul> <li>Confusion matrix - Compares the predicted values with the true values in a tabular way, if 100% correct, all values in the matrix will be top left to bottom right (diagnol line).</li> <li>Cross-validation - Splits your dataset into multiple parts and train and tests your model on each part and evaluates performance as an average.</li> <li>Precision - Proportion of true positives over total number of samples. Higher precision leads to less false positives.</li> <li>Recall - Proportion of true positives over total number of true positives and false positives. Higher recall leads to less false negatives.</li> <li>F1 score - Combines precision and recall into one metric. 1 is best, 0 is worst.</li> <li>Classification report - Sklearn has a built-in function called <code>classification_report()</code> which returns some of the main classification metrics such as precision, recall and f1-score.</li> <li>ROC Curve - Receiver Operating Characterisitc is a plot of true positive rate versus false positive rate.</li> <li>Area Under Curve (AUC) - The area underneath the ROC curve. A perfect model achieves a score of 1.0.</li> </ul> <p>Before we get to these, we'll instantiate a new instance of our model using the best hyerparameters found by <code>RandomizedSearchCV</code>.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#exporting-and-importing-a-trained-model","title":"Exporting and importing a trained model\u00b6","text":"<p>Once you've trained a model, you may want to export it and save it to file so you can share it or use it elsewhere.</p> <p>One method of exporting and importing models is using the joblib library.</p> <p>In Scikit-Learn, exporting and importing a trained model is known as model persistence.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#scikit-learn-regression-practice","title":"Scikit-Learn Regression Practice\u00b6","text":"<p>For the next few exercises, we're going to be working on a regression problem, in other words, using some data to predict a number.</p> <p>Our dataset is a table of car sales, containing different car characteristics as well as a sale price.</p> <p>We'll use Scikit-Learn's built-in regression machine learning models to try and learn the patterns in the car characteristics and their prices on a certain group of the dataset before trying to predict the sale price of a group of cars the model has never seen before.</p> <p>To begin, we'll import the data from GitHub into a pandas DataFrame, check out some details about it and try to build a model as soon as possible.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#building-a-pipeline","title":"Building a pipeline\u00b6","text":"<p>Since our <code>car_sales</code> data has missing numerical values as well as the data isn't all numerical, we'll have to fix these things before we can fit a machine learning model on it.</p> <p>There are ways we could do this with pandas but since we're practicing Scikit-Learn, we'll see how we might do it with the <code>Pipeline</code> class.</p> <p>Because we're modifying columns in our dataframe (filling missing values, converting non-numerical data to numbers) we'll need the <code>ColumnTransformer</code>, <code>SimpleImputer</code> and <code>OneHotEncoder</code> classes as well.</p> <p>Finally, because we'll need to split our data into training and test sets, we'll import <code>train_test_split</code> as well.</p>"},{"location":"chapter_12_data_analysis/exercises/scikit-learn-exercises/#extensions","title":"Extensions\u00b6","text":"<p>You should be proud. Getting this far means you've worked through a classification problem and regression problem using pure (mostly) Scikit-Learn (no easy feat!).</p> <p>For more exercises, check out the Scikit-Learn getting started documentation. A good practice would be to read through it and for the parts you find interesting, add them into the end of this notebook.</p> <p>Finally, as always, remember, the best way to learn something new is to try it. And try it relentlessly. If you're unsure of how to do something, never be afraid to ask a question or search for something such as, \"how to tune the hyperparmaters of a scikit-learn ridge regression model\".</p>"},{"location":"chapter_13_machine_learning/Machine_learning/","title":"Introduction to Machine Learning","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install pandas\n!pip install numpy\n!pip install scikit-learn\n!pip install streamlit\n</pre> !pip install pandas !pip install numpy !pip install scikit-learn !pip install streamlit In\u00a0[1]: Copied! <pre># Importing libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Setting random seed for reproducibility\nnp.random.seed(42)\n</pre> # Importing libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, confusion_matrix  import warnings warnings.filterwarnings('ignore')  # Setting random seed for reproducibility np.random.seed(42) In\u00a0[2]: Copied! <pre># Loading the dataset\ndata = pd.read_csv('heart-disease.csv')\n</pre> # Loading the dataset data = pd.read_csv('heart-disease.csv') In\u00a0[3]: Copied! <pre># Display first 5 rows\ndata.head()\n</pre> # Display first 5 rows data.head() Out[3]: age gender cp trestbps chol fbs restecg thalach exang oldpeak slope ca thal target 0 63 1 3 145 233 1 0 150 0 2.3 0 0 1 1 1 37 1 2 130 250 0 1 187 0 3.5 0 0 2 1 2 41 0 1 130 204 0 0 172 0 1.4 2 0 2 1 3 56 1 1 120 236 0 1 178 0 0.8 2 0 2 1 4 57 0 0 120 354 0 1 163 1 0.6 2 0 2 1 In\u00a0[4]: Copied! <pre># Check for missing values\nprint('\\nMissing values:')\ndata.isnull().sum()\n</pre> # Check for missing values print('\\nMissing values:') data.isnull().sum() <pre>\nMissing values:\n</pre> Out[4]: <pre>age         0\ngender      0\ncp          0\ntrestbps    0\nchol        0\nfbs         0\nrestecg     0\nthalach     0\nexang       0\noldpeak     0\nslope       0\nca          0\nthal        0\ntarget      0\ndtype: int64</pre> In\u00a0[5]: Copied! <pre># Separating features and target\nX = data.drop('target', axis=1)\ny = data['target']\n</pre> # Separating features and target X = data.drop('target', axis=1) y = data['target'] In\u00a0[6]: Copied! <pre># Splitting data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n</pre> # Splitting data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) In\u00a0[7]: Copied! <pre># Scaling features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n</pre> # Scaling features scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) In\u00a0[8]: Copied! <pre>print('Training set shape:', X_train_scaled.shape)\nprint('Testing set shape:', X_test_scaled.shape)\n</pre> print('Training set shape:', X_train_scaled.shape) print('Testing set shape:', X_test_scaled.shape) <pre>Training set shape: (242, 13)\nTesting set shape: (61, 13)\n</pre> In\u00a0[9]: Copied! <pre># Creating and training the model\nmodel = LogisticRegression(random_state=42)\nmodel.fit(X_train_scaled, y_train)\n</pre> # Creating and training the model model = LogisticRegression(random_state=42) model.fit(X_train_scaled, y_train) Out[9]: <pre>LogisticRegression(random_state=42)</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegression?Documentation for LogisticRegressioniFitted Parameters penalty\u00a0 'l2' dual\u00a0 False tol\u00a0 0.0001 C\u00a0 1.0 fit_intercept\u00a0 True intercept_scaling\u00a0 1 class_weight\u00a0 None random_state\u00a0 42 solver\u00a0 'lbfgs' max_iter\u00a0 100 multi_class\u00a0 'deprecated' verbose\u00a0 0 warm_start\u00a0 False n_jobs\u00a0 None l1_ratio\u00a0 None In\u00a0[10]: Copied! <pre># Making predictions\ny_pred = model.predict(X_test_scaled)\n</pre> # Making predictions y_pred = model.predict(X_test_scaled) In\u00a0[11]: Copied! <pre>model.predict_proba(X_test_scaled)[0][1]\n</pre> model.predict_proba(X_test_scaled)[0][1] Out[11]: <pre>np.float64(0.07927928894265697)</pre> In\u00a0[12]: Copied! <pre># Calculating accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy:', round(accuracy * 100, 2), '%')\n</pre> # Calculating accuracy accuracy = accuracy_score(y_test, y_pred) print('Accuracy:', round(accuracy * 100, 2), '%') <pre>Accuracy: 85.25 %\n</pre> In\u00a0[13]: Copied! <pre># Confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix:\\n', cm)\n</pre> # Confusion matrix cm = confusion_matrix(y_test, y_pred) print('Confusion Matrix:\\n', cm) <pre>Confusion Matrix:\n [[25  4]\n [ 5 27]]\n</pre> In\u00a0[14]: Copied! <pre>import joblib\n\n# Saving the model and scaler\njoblib.dump(model, 'heart_disease_model.pkl')\njoblib.dump(scaler, 'scaler.pkl')\n\nprint('Model and scaler saved')\n</pre> import joblib  # Saving the model and scaler joblib.dump(model, 'heart_disease_model.pkl') joblib.dump(scaler, 'scaler.pkl')  print('Model and scaler saved') <pre>Model and scaler saved\n</pre>"},{"location":"chapter_13_machine_learning/Machine_learning/#introduction-to-machine-learning","title":"Introduction to Machine Learning\u00b6","text":""},{"location":"chapter_13_machine_learning/Machine_learning/#what-is-machine-learning","title":"What is Machine Learning?\u00b6","text":"<p>Machine Learning (ML) is a subset of artificial intelligence where computers learn patterns from data to make predictions or decisions without being explicitly programmed. For example, ML can predict whether a patient has heart disease based on medical data.</p> <p>What actually ML does?</p> <ul> <li><code>[1, 2, 3] ------&gt; f(x) ------&gt; [2, 4, 6]</code></li> <li>Often our program is procedural: we give input, define a function, and get output. We write conditions as programmers (e.g., if this, then do this).</li> <li>Machine learning flips this idea. It says, give me the input and give me what the output to be i.e. give me all the data you have and tell me what the answer is.<ul> <li><code>[1, 2, 3] -------&gt; f(x)</code></li> <li><code>[2, 4, 6] -------&gt; f(x)</code></li> </ul> </li> <li>The machine figures out the function <code>f(x)</code>.</li> <li>ML is simply a:<ul> <li>Function</li> <li>Model</li> <li>Algorithm</li> <li>Bot</li> <li>Brain</li> </ul> </li> </ul>"},{"location":"chapter_13_machine_learning/Machine_learning/#why-do-we-need-machine-learning","title":"Why Do We Need Machine Learning?\u00b6","text":"<ul> <li>History and Motivation: ML began in the 1950s with simple pattern recognition. As data grew (e.g., medical records, images), traditional rule-based programming couldn't handle complex patterns. ML algorithms learn from data, improving accuracy in tasks like disease prediction.</li> <li>Applications: Fraud detection, image recognition, medical diagnosis, and more.</li> </ul>"},{"location":"chapter_13_machine_learning/Machine_learning/#types-of-machine-learning","title":"Types of Machine Learning\u00b6","text":"<ol> <li><p>Supervised Learning: The model is trained on labeled data, where inputs are paired with correct outputs. The goal is to learn a mapping from inputs to outputs.</p> <ul> <li>Examples: Classification (e.g., predicting heart disease: 0 or 1), Regression (e.g., predicting house prices).</li> <li>Use Case: Our heart disease dataset uses supervised learning, as we have inputs (features like age, cholesterol) and labels (target: heart disease or not).</li> </ul> </li> <li><p>Unsupervised Learning: The model works with unlabeled data to find hidden patterns or groupings.</p> <ul> <li>Examples: Clustering (e.g., grouping patients with similar symptoms), Dimensionality Reduction (e.g., simplifying data while retaining key information).</li> <li>Use Case: Identifying patient groups with similar risk factors without predefined labels.</li> </ul> </li> <li><p>Reinforcement Learning: The model learns by interacting with an environment, receiving rewards or penalties based on actions.</p> <ul> <li>Examples: Game playing (e.g., AlphaGo), Robotics (e.g., teaching a robot to walk).</li> <li>Use Case: Useful for sequential decision-making tasks.</li> </ul> </li> <li><p>Semi-Supervised Learning: Combines labeled and unlabeled data, useful when labeling is expensive or limited.</p> <ul> <li>Examples: Improving medical diagnosis with a small labeled dataset and a large unlabeled one.</li> <li>Use Case: Could be used if only some heart disease records have confirmed diagnoses.</li> </ul> </li> <li><p>Deep Learning: A subset of ML using neural networks with many layers to learn complex patterns.</p> <ul> <li>Examples: Image recognition (e.g., identifying tumors in scans), Natural Language Processing (e.g., chatbots).</li> <li>Use Case: Could be applied to heart disease data with more complex models.</li> </ul> </li> </ol>"},{"location":"chapter_13_machine_learning/Machine_learning/#ml-workflow","title":"ML Workflow\u00b6","text":"<ol> <li>Collect Data: Gather relevant data (e.g., heart disease dataset).</li> <li>Prepare Data: Clean and preprocess data (handle missing values, scale features).</li> <li>Split the data: Split the data into training and test set.</li> <li>Choose a Model: Select an algorithm (e.g., Logistic Regression).</li> <li>Train the Model: Use data to let the model learn patterns on training dataset.</li> <li>Evaluate the Model: Test its performance (e.g., accuracy) on both train and test set.</li> <li>Improve the Model: Improve the model to increase its performance.</li> <li>Make Predictions: Use the model to predict new cases.</li> </ol> <p>In this notebook, we'll train a simple model on the heart disease dataset to predict if a patient has heart disease.</p>"},{"location":"chapter_13_machine_learning/Machine_learning/#step-1-load-the-data","title":"Step 1: Load the Data\u00b6","text":"<p>We use the heart disease dataset, which contains features like age, cholesterol levels, and more to predict heart disease (target: 1 = disease, 0 = no disease).</p>"},{"location":"chapter_13_machine_learning/Machine_learning/#step-2-prepare-the-data","title":"Step 2: Prepare the Data\u00b6","text":"<ul> <li>Features (X): All columns except 'target'.</li> <li>Target (y): The 'target' column (1 or 0).</li> <li>Split data into training (80%) and testing (20%) sets.</li> <li>Scale features to ensure fair contribution to the model.</li> </ul>"},{"location":"chapter_13_machine_learning/Machine_learning/#step-3-choose-and-train-a-model","title":"Step 3: Choose and Train a Model\u00b6","text":"<p>We'll use Logistic Regression, a simple algorithm for binary classification (predicting 0 or 1).</p>"},{"location":"chapter_13_machine_learning/Machine_learning/#step-4-evaluate-the-model","title":"Step 4: Evaluate the Model\u00b6","text":"<p>We check the model's accuracy and confusion matrix to see how well it predicts.</p>"},{"location":"chapter_13_machine_learning/Machine_learning/#step-5-save-the-model-and-scaler","title":"Step 5: Save the Model and Scaler\u00b6","text":"<p>We save the trained model and scaler for use in the Streamlit app.</p>"},{"location":"chapter_13_machine_learning/Machine_learning/#whats-next","title":"What's Next?\u00b6","text":"<p>We've trained a model to predict heart disease! In the Streamlit app, we'll load this model and let users input patient data to get predictions.</p> <p>Key Takeaways:</p> <ul> <li>ML learns patterns from data.</li> <li>The workflow involves data preparation, model training, and evaluation.</li> <li>Logistic Regression is a simple yet effective algorithm for binary classification.</li> </ul>"},{"location":"chapter_13_machine_learning/ml_streamlit_app/","title":"Streamlit App","text":"<p>Run the following python script as</p> <pre><code>streamlit run streamlit_app.py\n</code></pre> <p>streamlit_app.py</p> In\u00a0[\u00a0]: Copied! <pre>import streamlit as st\nimport pandas as pd\nimport joblib\nimport numpy as np\n\nmodel = joblib.load('heart_disease_model.pkl')\nscaler = joblib.load('scaler.pkl')\n\nst.title(\"Heart Disease Prediction App\")\n\nst.write(\"Enter patient details to predict the likelihood of heart disease. This app uses a trained Logistic Regression model.\")\n\nst.header(\"Patient Information\")\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    age = st.number_input(\"Age (years)\", min_value=0, max_value=120, value=50)\n    gender = st.selectbox(\"Gender\", options=[1, 0], format_func=lambda x: \"Male\" if x == 1 else \"Female\")\n    cp = st.selectbox(\"Chest Pain Type (0-3)\", options=[0, 1, 2, 3])\n    trestbps = st.number_input(\"Resting Blood Pressure (mm Hg)\", min_value=0, max_value=200, value=120)\n    chol = st.number_input(\"Cholesterol (mg/dL)\", min_value=0, max_value=600, value=200)\n    fbs = st.selectbox(\"Fasting Blood Sugar &gt; 120 mg/dL\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")\n    restecg = st.selectbox(\"Resting ECG (0-2)\", options=[0, 1, 2])\n\nwith col2:\n    thalach = st.number_input(\"Max Heart Rate (bpm)\", min_value=0, max_value=220, value=150)\n    exang = st.selectbox(\"Exercise Induced Angina\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")\n    oldpeak = st.number_input(\"ST Depression (oldpeak)\", min_value=0.0, max_value=10.0, value=1.0, step=0.1)\n    slope = st.selectbox(\"Slope of ST Segment (0-2)\", options=[0, 1, 2])\n    ca = st.selectbox(\"Number of Major Vessels (0-4)\", options=[0, 1, 2, 3, 4])\n    thal = st.selectbox(\"Thalassemia (0-3)\", options=[0, 1, 2, 3])\n\n\nif st.button(\"Predict\"):\n    input_data = np.array([[age, gender, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])\n    \n    input_data_scaled = scaler.transform(input_data)\n    \n    prediction = model.predict(input_data_scaled)\n    probability = model.predict_proba(input_data_scaled)[0][1] * 100\n    \n    st.subheader(\"Prediction Result\")\n    if prediction[0] == 1:\n        st.error(f\"The model predicts a **high likelihood** of heart disease ({probability:.1f}% probability).\")\n    else:\n        st.success(f\"The model predicts a **low likelihood** of heart disease ({100 - probability:.1f}% probability of no disease).\")\n\n\nst.sidebar.header(\"How to Use\")\nst.sidebar.write(\"1. Enter patient details in the form.\")\nst.sidebar.write(\"2. Click the 'Predict' button to see the result.\")\nst.sidebar.write(\"3. The model predicts whether the patient is likely to have heart disease (1 = Yes, 0 = No).\")\n</pre> import streamlit as st import pandas as pd import joblib import numpy as np  model = joblib.load('heart_disease_model.pkl') scaler = joblib.load('scaler.pkl')  st.title(\"Heart Disease Prediction App\")  st.write(\"Enter patient details to predict the likelihood of heart disease. This app uses a trained Logistic Regression model.\")  st.header(\"Patient Information\")  col1, col2 = st.columns(2)  with col1:     age = st.number_input(\"Age (years)\", min_value=0, max_value=120, value=50)     gender = st.selectbox(\"Gender\", options=[1, 0], format_func=lambda x: \"Male\" if x == 1 else \"Female\")     cp = st.selectbox(\"Chest Pain Type (0-3)\", options=[0, 1, 2, 3])     trestbps = st.number_input(\"Resting Blood Pressure (mm Hg)\", min_value=0, max_value=200, value=120)     chol = st.number_input(\"Cholesterol (mg/dL)\", min_value=0, max_value=600, value=200)     fbs = st.selectbox(\"Fasting Blood Sugar &gt; 120 mg/dL\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")     restecg = st.selectbox(\"Resting ECG (0-2)\", options=[0, 1, 2])  with col2:     thalach = st.number_input(\"Max Heart Rate (bpm)\", min_value=0, max_value=220, value=150)     exang = st.selectbox(\"Exercise Induced Angina\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")     oldpeak = st.number_input(\"ST Depression (oldpeak)\", min_value=0.0, max_value=10.0, value=1.0, step=0.1)     slope = st.selectbox(\"Slope of ST Segment (0-2)\", options=[0, 1, 2])     ca = st.selectbox(\"Number of Major Vessels (0-4)\", options=[0, 1, 2, 3, 4])     thal = st.selectbox(\"Thalassemia (0-3)\", options=[0, 1, 2, 3])   if st.button(\"Predict\"):     input_data = np.array([[age, gender, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])          input_data_scaled = scaler.transform(input_data)          prediction = model.predict(input_data_scaled)     probability = model.predict_proba(input_data_scaled)[0][1] * 100          st.subheader(\"Prediction Result\")     if prediction[0] == 1:         st.error(f\"The model predicts a **high likelihood** of heart disease ({probability:.1f}% probability).\")     else:         st.success(f\"The model predicts a **low likelihood** of heart disease ({100 - probability:.1f}% probability of no disease).\")   st.sidebar.header(\"How to Use\") st.sidebar.write(\"1. Enter patient details in the form.\") st.sidebar.write(\"2. Click the 'Predict' button to see the result.\") st.sidebar.write(\"3. The model predicts whether the patient is likely to have heart disease (1 = Yes, 0 = No).\")"},{"location":"chapter_13_machine_learning/ml_streamlit_app/#streamlit-app-for-heart-disease-prediction","title":"Streamlit App for Heart Disease Prediction\u00b6","text":""},{"location":"chapter_13_machine_learning/streamlit_app/","title":"Streamlit app","text":"In\u00a0[\u00a0]: Copied! <pre>import streamlit as st\nimport pandas as pd\nimport joblib\nimport numpy as np\n</pre> import streamlit as st import pandas as pd import joblib import numpy as np In\u00a0[\u00a0]: Copied! <pre>model = joblib.load('heart_disease_model.pkl')\nscaler = joblib.load('scaler.pkl')\n</pre> model = joblib.load('heart_disease_model.pkl') scaler = joblib.load('scaler.pkl') In\u00a0[\u00a0]: Copied! <pre>st.title(\"Heart Disease Prediction App\")\n</pre> st.title(\"Heart Disease Prediction App\") In\u00a0[\u00a0]: Copied! <pre>st.write(\"Enter patient details to predict the likelihood of heart disease. This app uses a trained Logistic Regression model.\")\n</pre> st.write(\"Enter patient details to predict the likelihood of heart disease. This app uses a trained Logistic Regression model.\") In\u00a0[\u00a0]: Copied! <pre>st.header(\"Patient Information\")\n</pre> st.header(\"Patient Information\") In\u00a0[\u00a0]: Copied! <pre>col1, col2 = st.columns(2)\n</pre> col1, col2 = st.columns(2) In\u00a0[\u00a0]: Copied! <pre>with col1:\n    age = st.number_input(\"Age (years)\", min_value=0, max_value=120, value=50)\n    gender = st.selectbox(\"Gender\", options=[1, 0], format_func=lambda x: \"Male\" if x == 1 else \"Female\")\n    cp = st.selectbox(\"Chest Pain Type (0-3)\", options=[0, 1, 2, 3])\n    trestbps = st.number_input(\"Resting Blood Pressure (mm Hg)\", min_value=0, max_value=200, value=120)\n    chol = st.number_input(\"Cholesterol (mg/dL)\", min_value=0, max_value=600, value=200)\n    fbs = st.selectbox(\"Fasting Blood Sugar &gt; 120 mg/dL\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")\n    restecg = st.selectbox(\"Resting ECG (0-2)\", options=[0, 1, 2])\n</pre> with col1:     age = st.number_input(\"Age (years)\", min_value=0, max_value=120, value=50)     gender = st.selectbox(\"Gender\", options=[1, 0], format_func=lambda x: \"Male\" if x == 1 else \"Female\")     cp = st.selectbox(\"Chest Pain Type (0-3)\", options=[0, 1, 2, 3])     trestbps = st.number_input(\"Resting Blood Pressure (mm Hg)\", min_value=0, max_value=200, value=120)     chol = st.number_input(\"Cholesterol (mg/dL)\", min_value=0, max_value=600, value=200)     fbs = st.selectbox(\"Fasting Blood Sugar &gt; 120 mg/dL\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")     restecg = st.selectbox(\"Resting ECG (0-2)\", options=[0, 1, 2]) In\u00a0[\u00a0]: Copied! <pre>with col2:\n    thalach = st.number_input(\"Max Heart Rate (bpm)\", min_value=0, max_value=220, value=150)\n    exang = st.selectbox(\"Exercise Induced Angina\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")\n    oldpeak = st.number_input(\"ST Depression (oldpeak)\", min_value=0.0, max_value=10.0, value=1.0, step=0.1)\n    slope = st.selectbox(\"Slope of ST Segment (0-2)\", options=[0, 1, 2])\n    ca = st.selectbox(\"Number of Major Vessels (0-4)\", options=[0, 1, 2, 3, 4])\n    thal = st.selectbox(\"Thalassemia (0-3)\", options=[0, 1, 2, 3])\n</pre> with col2:     thalach = st.number_input(\"Max Heart Rate (bpm)\", min_value=0, max_value=220, value=150)     exang = st.selectbox(\"Exercise Induced Angina\", options=[0, 1], format_func=lambda x: \"Yes\" if x == 1 else \"No\")     oldpeak = st.number_input(\"ST Depression (oldpeak)\", min_value=0.0, max_value=10.0, value=1.0, step=0.1)     slope = st.selectbox(\"Slope of ST Segment (0-2)\", options=[0, 1, 2])     ca = st.selectbox(\"Number of Major Vessels (0-4)\", options=[0, 1, 2, 3, 4])     thal = st.selectbox(\"Thalassemia (0-3)\", options=[0, 1, 2, 3]) In\u00a0[\u00a0]: Copied! <pre>if st.button(\"Predict\"):\n    input_data = np.array([[age, gender, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])\n    \n    input_data_scaled = scaler.transform(input_data)\n    \n    prediction = model.predict(input_data_scaled)\n    probability = model.predict_proba(input_data_scaled)[0][1] * 100\n    \n    st.subheader(\"Prediction Result\")\n    if prediction[0] == 1:\n        st.error(f\"The model predicts a **high likelihood** of heart disease ({probability:.1f}% probability).\")\n    else:\n        st.success(f\"The model predicts a **low likelihood** of heart disease ({100 - probability:.1f}% probability of no disease).\")\n</pre> if st.button(\"Predict\"):     input_data = np.array([[age, gender, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])          input_data_scaled = scaler.transform(input_data)          prediction = model.predict(input_data_scaled)     probability = model.predict_proba(input_data_scaled)[0][1] * 100          st.subheader(\"Prediction Result\")     if prediction[0] == 1:         st.error(f\"The model predicts a **high likelihood** of heart disease ({probability:.1f}% probability).\")     else:         st.success(f\"The model predicts a **low likelihood** of heart disease ({100 - probability:.1f}% probability of no disease).\") In\u00a0[\u00a0]: Copied! <pre>st.sidebar.header(\"How to Use\")\nst.sidebar.write(\"1. Enter patient details in the form.\")\nst.sidebar.write(\"2. Click the 'Predict' button to see the result.\")\nst.sidebar.write(\"3. The model predicts whether the patient is likely to have heart disease (1 = Yes, 0 = No).\")\n</pre> st.sidebar.header(\"How to Use\") st.sidebar.write(\"1. Enter patient details in the form.\") st.sidebar.write(\"2. Click the 'Predict' button to see the result.\") st.sidebar.write(\"3. The model predicts whether the patient is likely to have heart disease (1 = Yes, 0 = No).\")"},{"location":"chapter_1_introduction/basic_syntax/","title":"Basic Syntax\\nThis page covers Python's basic syntax.","text":""},{"location":"chapter_1_introduction/introduction/","title":"Introduction to Python","text":"<p>Welcome to Python basics!</p>"},{"location":"chapter_1_introduction/introduction/#what-is-python","title":"What is Python?","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in web development, data science, automation, artificial intelligence, and more.</p>"},{"location":"chapter_1_introduction/introduction/#key-features-of-python","title":"Key Features of Python","text":"<ul> <li>Easy to Learn: Python has a clean and readable syntax.</li> <li>Versatile: Can be used for various applications, from web apps to machine learning.</li> <li>Extensive Libraries: Rich ecosystem of packages for every need.</li> <li>Cross-platform: Runs on Windows, macOS, and Linux.</li> </ul>"},{"location":"chapter_1_introduction/introduction/#basic-syntax-example","title":"Basic Syntax Example","text":"<p>```python</p>"},{"location":"chapter_1_introduction/introduction/#this-is-a-comment","title":"This is a comment","text":"<p>print(\"Hello, World!\")</p>"},{"location":"chapter_1_introduction/introduction/#variables","title":"Variables","text":"<p>name = \"Alice\" age = 25</p>"},{"location":"chapter_1_introduction/introduction/#conditional-statement","title":"Conditional statement","text":"<p>if age &gt; 18:     print(f\"{name} is an adult.\") else:     print(f\"{name} is not an adult.\")</p>"},{"location":"chapter_2_datatypes/1_variables/","title":"Data Types and Variables","text":"In\u00a0[1]: Copied! <pre># this is a comment \n'''\nthis is a\nmulti line \ncomment\n'''\n</pre> # this is a comment  ''' this is a multi line  comment ''' Out[1]: <pre>'\\nthis is a\\nmulti line \\ncomment\\n'</pre> In\u00a0[2]: Copied! <pre>\"\"\"\nThis is an example of \nmulti line comment.\n\nBelow shows the example of the CASE SENSTIVE in Python\n\"\"\"\ntemperature = 20\nTEMPerature = 30\n\nprint(temperature)\nprint(TEMPerature)\n</pre> \"\"\" This is an example of  multi line comment.  Below shows the example of the CASE SENSTIVE in Python \"\"\" temperature = 20 TEMPerature = 30  print(temperature) print(TEMPerature) <pre>20\n30\n</pre> In\u00a0[3]: Copied! <pre>print(TEMPERATURE)\n</pre> print(TEMPERATURE) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 print(TEMPERATURE)\n\nNameError: name 'TEMPERATURE' is not defined</pre> In\u00a0[5]: Copied! <pre>## input your name\nname = input('Enter your name : ')\nprint(name)\n</pre> ## input your name name = input('Enter your name : ') print(name) <pre>Nirajan\n</pre> In\u00a0[6]: Copied! <pre>PI = 3.14\n</pre> PI = 3.14 In\u00a0[7]: Copied! <pre>TEMPERATURE = 20\n</pre> TEMPERATURE = 20 In\u00a0[9]: Copied! <pre>abc = 10\n</pre> abc = 10 In\u00a0[9]: Copied! <pre>temperature = 2\nexhaust_temperature = 2\n</pre> temperature = 2 exhaust_temperature = 2 In\u00a0[\u00a0]: Copied! <pre>## special characters lik $, -, % cannot be used in the variable name.\nasdf$sdf = 10\n</pre> ## special characters lik $, -, % cannot be used in the variable name. asdf$sdf = 10 <pre>\n  Cell In[1], line 1\n    asdf$sdf = 10\n        ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[8]: Copied! <pre># python keywords cannot be used as variable name\nif = 10\n</pre> # python keywords cannot be used as variable name if = 10 <pre>\n  Cell In[8], line 2\n    if = 10\n       ^\nSyntaxError: invalid syntax\n</pre> Category Data Types Description Text Type <code>str</code> Stores text data (e.g., <code>\"Hello\"</code>) Numeric Types <code>int</code>, <code>float</code>, <code>complex</code> <code>int</code>: Integers (e.g., 5)  <code>float</code>: Decimals (e.g., 3.14)  <code>complex</code>: Complex numbers (e.g., 2 + 3j) Sequence Types <code>list</code>, <code>tuple</code>, <code>range</code> Ordered collections  <code>list</code> and <code>tuple</code> store multiple items  <code>range</code> represents a sequence of numbers Mapping Type <code>dict</code> Key-value pairs (e.g., <code>{\"name\": \"Alice\"}</code>) Set Types <code>set</code>, <code>frozenset</code> Unordered collections of unique items Boolean Type <code>bool</code> Represents truth values: <code>True</code> or <code>False</code> In\u00a0[10]: Copied! <pre>a = 2\nb = 5\nprint(a + b)\nprint(a - b)\n</pre> a = 2 b = 5 print(a + b) print(a - b) <pre>7\n-3\n</pre> In\u00a0[11]: Copied! <pre>a = 2+5j\nprint(a)\nprint(type(a))\n</pre> a = 2+5j print(a) print(type(a)) <pre>(2+5j)\n&lt;class 'complex'&gt;\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[25]: Copied! <pre>x = 5 + 2j\ny = 5 - 2j \nprint(x)\nprint(y)\nprint(x + y)\nprint(x - y)\nprint(x / y)\nprint(x * y)\nprint(x ** y)\n</pre> x = 5 + 2j y = 5 - 2j  print(x) print(y) print(x + y) print(x - y) print(x / y) print(x * y) print(x ** y)  <pre>(5+2j)\n(5-2j)\n(10+0j)\n4j\n(0.7241379310344828+0.6896551724137931j)\n(29+0j)\n(1025.9425992055105-9639.459628933018j)\n</pre> In\u00a0[12]: Copied! <pre>x_string = '10asdfa'\nx_int = int(x_string)\n\nprint(x_string)\nprint(x_int)\n</pre> x_string = '10asdfa' x_int = int(x_string)  print(x_string) print(x_int) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[12], line 2\n      1 x_string = '10asdfa'\n----&gt; 2 x_int = int(x_string)\n      4 print(x_string)\n      5 print(x_int)\n\nValueError: invalid literal for int() with base 10: '10asdfa'</pre> In\u00a0[27]: Copied! <pre>print(type(x_string))\nprint(type(x_int))\n</pre> print(type(x_string)) print(type(x_int)) <pre>&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n</pre> <p>Q. Take two numbers as an input from user and add them</p> In\u00a0[28]: Copied! <pre>a = 10\nb = str(a)\nprint(a)\nprint(b)\n\nprint(type(a), type(b))\n</pre> a = 10 b = str(a) print(a) print(b)  print(type(a), type(b)) <pre>10\n10\n&lt;class 'int'&gt; &lt;class 'str'&gt;\n</pre> In\u00a0[\u00a0]: Copied! <pre>a = 10\nprint(a)\nprint(type(a))\n\nb = float(a)\nprint(b)\nprint(type(b))\n</pre> a = 10 print(a) print(type(a))  b = float(a) print(b) print(type(b))  <pre>10\n&lt;class 'int'&gt;\n10.0\n&lt;class 'float'&gt;\n</pre> In\u00a0[3]: Copied! <pre>a = 10.123\nprint(a)\nprint(type(a))\n\nb = int(a)\nprint(b)\nprint(type(b))\n</pre> a = 10.123 print(a) print(type(a))  b = int(a) print(b) print(type(b)) <pre>10.123\n&lt;class 'float'&gt;\n10\n&lt;class 'int'&gt;\n</pre> In\u00a0[6]: Copied! <pre>a = '10'\nb = int(a)\n</pre> a = '10' b = int(a) In\u00a0[10]: Copied! <pre>\"\"\"\nIn python, data type is specified during the runtime.\n\"\"\"\na = 10\n</pre> \"\"\" In python, data type is specified during the runtime. \"\"\" a = 10 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_2_datatypes/1_variables/#data-types-and-variables","title":"Data Types and Variables\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#syntax","title":"Syntax\u00b6","text":"<p>Syntax refers to the guidelines that determine the structure of a language. If the syntax of a language is not followed, the code will not be understood by a compiler or interpreter.</p>"},{"location":"chapter_2_datatypes/1_variables/#key-features-of-python-syntax","title":"Key Features of Python Syntax:\u00b6","text":"<ul> <li><p>Comments:</p> <ul> <li>Single-line comment: <code>#</code></li> <li>Multi-line comment: <code>\"\"\" \"\"\"</code></li> </ul> </li> <li><p>Case Sensitivity:</p> <ul> <li>Python is case-sensitive.</li> </ul> </li> <li><p>Statements:</p> <ul> <li>Python executes statements line by line, i.e., one line at a time.</li> </ul> </li> <li><p>Input/Output:</p> <ul> <li><code>input()</code> is used to take user input.</li> <li><code>print()</code> is used to show the output.</li> </ul> </li> <li><p>Indentation:</p> <ul> <li>Python uses indentation to define code blocks instead of braces <code>{}</code>.</li> </ul> </li> </ul>"},{"location":"chapter_2_datatypes/1_variables/#variables","title":"Variables\u00b6","text":"<p>Variables are containers for storing data values.</p>"},{"location":"chapter_2_datatypes/1_variables/#rules-for-creating-variable-names","title":"Rules for Creating Variable Names\u00b6","text":"<ul> <li>Must start with a letter or the underscore (<code>_</code>) character</li> <li>Cannot start with a number</li> <li>Can only contain alphanumeric characters and underscores (<code>A-z</code>, <code>0-9</code>, and <code>_</code>)</li> <li>Case-sensitive \u2014 <code>mobile</code>, <code>Mobile</code>, and <code>MOBILE</code> are three different variables</li> <li>Cannot be any of the Python keywords</li> </ul> <p>Tip: Use meaningful variable names to make your code easier to understand.</p>"},{"location":"chapter_2_datatypes/1_variables/#data-types","title":"Data Types\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#perform-arithmetic-operations-using-float-variables","title":"Perform arithmetic operations using Float Variables\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#excercise-perform-arithmetic-operations-using-complex-number","title":"Excercise : Perform arithmetic operations using Complex Number\u00b6","text":""},{"location":"chapter_2_datatypes/1_variables/#type-casting","title":"Type Casting\u00b6","text":"<ul> <li>Type casting, also known as type conversion, is the process of changing the data type of a variable from one type to another.</li> </ul>"},{"location":"chapter_2_datatypes/1_variables/#dynamic-typing-in-python","title":"Dynamic Typing in Python\u00b6","text":"<p>In statically typed languages like C</p> <pre><code>int a = 10\n</code></pre> <p>The data type is explicitly declared at compile time, meaning a is known to be an integer before the program runs.</p>"},{"location":"chapter_2_datatypes/1_variables/#exercise-write-a-program-to-take-two-numbers-from-user-and-add-them","title":"Exercise:  Write a program to take two numbers from user and add them\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/","title":"Strings","text":"In\u00a0[1]: Copied! <pre># using single quotes\nfirst_name = 'Nirajan'\nprint(first_name)\n\n# using double quotes\nlast_name = \"Bekoju\"\nprint(last_name)\n\n# Triple quotes for multi-line\ntutorial = \"\"\"\nI am learning Python.\nPython is fun.\n\"\"\"\n\nprint(tutorial)\n</pre> # using single quotes first_name = 'Nirajan' print(first_name)  # using double quotes last_name = \"Bekoju\" print(last_name)  # Triple quotes for multi-line tutorial = \"\"\" I am learning Python. Python is fun. \"\"\"  print(tutorial) <pre>Nirajan\nBekoju\n\nI am learning Python.\nPython is fun.\n\n</pre> In\u00a0[2]: Copied! <pre>## index example\ntext = 'Python'\nprint(len(text))\nprint(text[0])\nprint(text[3])\n\n## index out of range\nprint(text[9])\n</pre> ## index example text = 'Python' print(len(text)) print(text[0]) print(text[3])  ## index out of range print(text[9]) <pre>6\nP\nh\n</pre> <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[2], line 8\n      5 print(text[3])\n      7 ## index out of range\n----&gt; 8 print(text[9])\n\nIndexError: string index out of range</pre> In\u00a0[3]: Copied! <pre>## index example using negative value\ntext = 'Python'\nprint(text[-1])\nprint(text[-2])\nprint(text[-3])\n\nprint(text[-11])\n</pre> ## index example using negative value text = 'Python' print(text[-1]) print(text[-2]) print(text[-3])  print(text[-11]) <pre>n\no\nh\n</pre> <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[3], line 7\n      4 print(text[-2])\n      5 print(text[-3])\n----&gt; 7 print(text[-11])\n\nIndexError: string index out of range</pre> In\u00a0[4]: Copied! <pre>### string slicing\ntext = 'Python'\nprint(text[0:4])\nprint(text[2:8])\nprint(text[2:])\nprint(text[:5])\n</pre> ### string slicing text = 'Python' print(text[0:4]) print(text[2:8]) print(text[2:]) print(text[:5]) <pre>Pyth\nthon\nthon\nPytho\n</pre> In\u00a0[6]: Copied! <pre>text = 'Python'\nprint(text[-3:])\nprint(text[-3:-5])\nprint(text[-4:-2])\n</pre> text = 'Python' print(text[-3:]) print(text[-3:-5]) print(text[-4:-2]) <pre>hon\n\nth\n</pre> In\u00a0[7]: Copied! <pre>text = 'abcdefghij'\nprint(len(text))\nprint(text[0:5])\nprint(text[0:5:2])\n</pre> text = 'abcdefghij' print(len(text)) print(text[0:5]) print(text[0:5:2]) <pre>10\nabcde\nace\n</pre> In\u00a0[9]: Copied! <pre>text = 'abcdefghij'\nprint(text[::-1])\nprint(text[::-2])\n</pre> text = 'abcdefghij' print(text[::-1]) print(text[::-2]) <pre>jihgfedcba\njhfdb\n</pre> In\u00a0[11]: Copied! <pre>first_name = 'Toni'\nlast_name = 'Kroos'\n\nconcatenated_word = first_name + ' ' + last_name\nprint(concatenated_word)\n\n## also calculate the length of the concatenated word\nprint(len(concatenated_word))\n</pre> first_name = 'Toni' last_name = 'Kroos'  concatenated_word = first_name + ' ' + last_name print(concatenated_word)  ## also calculate the length of the concatenated word print(len(concatenated_word)) <pre>Toni Kroos\n10\n</pre> In\u00a0[12]: Copied! <pre>a = 'Hello World'\nprint(id(a))\na[1] = 'b'\nprint()\n</pre> a = 'Hello World' print(id(a)) a[1] = 'b' print() <pre>131676183822896\n</pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[12], line 3\n      1 a = 'Hello World'\n      2 print(id(a))\n----&gt; 3 a[1] = 'b'\n      4 print()\n\nTypeError: 'str' object does not support item assignment</pre> In\u00a0[25]: Copied! <pre>a = 'random string 1'\nprint(id(a))\n</pre> a = 'random string 1' print(id(a)) <pre>123290813869040\n</pre> In\u00a0[26]: Copied! <pre>a = 'hello world'\nprint(id(a))\n</pre> a = 'hello world' print(id(a)) <pre>123290813873776\n</pre> Method Description Example <code>str.lower()</code> Converts to lowercase <code>\"Hello\".lower()</code> \u2192 <code>'hello'</code> <code>str.upper()</code> Converts to uppercase <code>\"hello\".upper()</code> \u2192 <code>'HELLO'</code> <code>str.title()</code> Capitalizes first letter of each word <code>\"hello world\".title()</code> -&gt; Hello World <code>str.capitalize()</code> Capitalizes the first character <code>\"hello\".capitalize()</code> \u2192 <code>'Hello'</code> <code>str.strip()</code> Removes leading/trailing spaces <code>\"  hello  \".strip()</code> <code>str.replace(old, new)</code> Replaces a substring <code>\"apple\".replace(\"a\", \"A\")</code> <code>str.find(sub)</code> Finds the first index of substring <code>\"hello\".find(\"l\")</code> \u2192 <code>2</code> <code>str.count(sub)</code> Counts occurrences of a substring <code>\"banana\".count(\"a\")</code> \u2192 <code>3</code> <code>str.split(sep)</code> Splits string into a list <code>\"a,b,c\".split(\",\")</code> <code>str.join(list)</code> Joins list into a string <code>\" \".join([\"I\", \"love\", \"Python\"])</code> <code>str.isalpha()</code> Checks if all characters are alphabetic <code>\"abc\".isalpha()</code> \u2192 <code>True</code> <code>str.isdigit()</code> Checks if all characters are digits <code>\"123\".isdigit()</code> \u2192 <code>True</code> <code>str.isalnum()</code> Checks if alphanumeric <code>\"abc123\".isalnum()</code> \u2192 <code>True</code> <code>str.startswith(prefix)</code> Checks if string starts with <code>prefix</code> <code>\"hello\".startswith(\"he\")</code> <code>str.endswith(suffix)</code> Checks if string ends with <code>suffix</code> <code>\"hello\".endswith(\"o\")</code> In\u00a0[15]: Copied! <pre>name = 'kroos toni abc sk'\ntitle_name = name.title()\nprint(title_name)\n</pre> name = 'kroos toni abc sk' title_name = name.title() print(title_name) <pre>Kroos Toni Abc Sk\n</pre> In\u00a0[14]: Copied! <pre>print(name)\n</pre> print(name) <pre>kroos toni abc sk\n</pre> In\u00a0[32]: Copied! <pre>name = 'Rejesh Hamal'\n# replace e with a\nname.replace('e', 'a', 1)\n</pre> name = 'Rejesh Hamal' # replace e with a name.replace('e', 'a', 1)  Out[32]: <pre>'Rajesh Hamal'</pre> In\u00a0[36]: Copied! <pre>a = name.lower()\nprint(a)\nprint(name)\n</pre> a = name.lower() print(a) print(name) <pre>rejesh hamal\nRejesh Hamal\n</pre> In\u00a0[37]: Copied! <pre>name.title()\n</pre> name.title() Out[37]: <pre>'Rejesh Hamal'</pre> In\u00a0[38]: Copied! <pre>'nirajan BEKOJU'.title()\n</pre> 'nirajan BEKOJU'.title() Out[38]: <pre>'Nirajan Bekoju'</pre> In\u00a0[39]: Copied! <pre>\"asdf\".isalnum()\n</pre> \"asdf\".isalnum() Out[39]: <pre>True</pre> In\u00a0[40]: Copied! <pre>print(\"Hello I am learning \\n Python\")\n</pre> print(\"Hello I am learning \\n Python\") <pre>Hello I am learning \n Python\n</pre> In\u00a0[44]: Copied! <pre>print(\"Hello I am learning \\\"python\\\"\")\n</pre> print(\"Hello I am learning \\\"python\\\"\") <pre>Hello I am learning \"python\"\n</pre> In\u00a0[51]: Copied! <pre>name = 'Rajesh Hamal'\nage = 50\ntemp = \"temporary\"\n\nnew_sentence = f\"my name is {name} and I am {age} year old.  {temp}\"\nprint(new_sentence)\n</pre> name = 'Rajesh Hamal' age = 50 temp = \"temporary\"  new_sentence = f\"my name is {name} and I am {age} year old.  {temp}\" print(new_sentence) <pre>my name is Rajesh Hamal and I am 50 year old.  temporary\n</pre> In\u00a0[53]: Copied! <pre>name = 'Rajesh Hamal'\nage = 50\ntemp = \"temporary\"\n\n\nnew_sentence = \"My name is {n} and I am {a} year old\".format(n = name, a = age)\nprint(new_sentence)\n</pre> name = 'Rajesh Hamal' age = 50 temp = \"temporary\"   new_sentence = \"My name is {n} and I am {a} year old\".format(n = name, a = age) print(new_sentence) <pre>My name is Rajesh Hamal and I am 50 year old\n</pre> <p>Note : f-string is faster than .format() and hence use it.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_2_datatypes/2_string/#string","title":"String\u00b6","text":"<p>A string is a sequence of characters enclosed in quotes.</p>"},{"location":"chapter_2_datatypes/2_string/#characteristics-1-strings-can-be-indexed-or-sliced","title":"Characteristics 1 : Strings can be indexed or sliced.\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/#string-concatenation","title":"String Concatenation\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/#characteristics-2-strings-are-immutable","title":"Characteristics 2 : Strings are immutable.\u00b6","text":"<ul> <li>Immutable means they cannot be changed after creation</li> </ul>"},{"location":"chapter_2_datatypes/2_string/#string-methods","title":"String Methods\u00b6","text":""},{"location":"chapter_2_datatypes/2_string/#string-method-exercise","title":"String Method Exercise\u00b6","text":"<ul> <li><p>Take a name from the user and print it in uppercase and lowercase.</p> </li> <li><p>Count how many times the letter \"a\" appears in the string \"banana\".</p> </li> <li><p>Check if a user-entered word starts with \"A\" or ends with \"z\".</p> </li> <li><p>Write a program that takes a full name and splits it into first and last name.</p> </li> <li><p>Take a input string from user and print its reverse</p> </li> </ul>"},{"location":"chapter_2_datatypes/2_string/#escape-characters","title":"Escape Characters\u00b6","text":"Character Description <code>\\n</code> New Line <code>\\t</code> Tab <code>\\\\</code> Backslash <code>\\'</code> Single Quote <code>\\\"</code> Double Quote"},{"location":"chapter_2_datatypes/2_string/#f-string-and-format","title":"F-String and Format\u00b6","text":""},{"location":"chapter_2_datatypes/3_operator/","title":"Operator","text":"In\u00a0[4]: Copied! <pre>a = 72\nb = 5\nprint(a % b)\n</pre> a = 72 b = 5 print(a % b) <pre>2\n</pre> In\u00a0[1]: Copied! <pre>a = 11.5\nb = 10\n\nprint(a == b)\nprint(a != b)\n</pre> a = 11.5 b = 10  print(a == b) print(a != b) <pre>False\nTrue\n</pre> In\u00a0[2]: Copied! <pre>a = True \nb = False \n\nprint(a and b)\nprint(a or b)\nprint(not a)\n</pre> a = True  b = False   print(a and b) print(a or b) print(not a) <pre>False\nTrue\nFalse\n</pre> In\u00a0[3]: Copied! <pre>num_1 = 10\nnum_2 = 20\n\n(num_1 &lt; 15) and (num_2 &gt;15)\n</pre> num_1 = 10 num_2 = 20  (num_1 &lt; 15) and (num_2 &gt;15) Out[3]: <pre>True</pre> In\u00a0[1]: Copied! <pre>a = 5\n-a\n</pre> a = 5 -a Out[1]: <pre>-5</pre> In\u00a0[\u00a0]: Copied! <pre>x = 5\ny = 10\nz = 15\n\n# Precedence: &gt; then and then not\nprint(not x &gt; 2 and y &lt; 20) \n\n# Use parentheses to control order\nprint(not (x &gt; 2 and y &lt; 20))  # not(True and True) \u2192 False\n</pre> x = 5 y = 10 z = 15  # Precedence: &gt; then and then not print(not x &gt; 2 and y &lt; 20)   # Use parentheses to control order print(not (x &gt; 2 and y &lt; 20))  # not(True and True) \u2192 False <pre>False\nFalse\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_2_datatypes/3_operator/#arithmetic-operator","title":"Arithmetic Operator\u00b6","text":"Operator Name Description Example Output <code>+</code> Addition Adds two numbers <code>5 + 3</code> <code>8</code> <code>-</code> Subtraction Subtracts the second from the first <code>10 - 4</code> <code>6</code> <code>*</code> Multiplication Multiplies two numbers <code>2 * 6</code> <code>12</code> <code>/</code> Division Divides the first by the second (float) <code>8 / 2</code> <code>4.0</code> <code>//</code> Floor Division Division with result rounded down <code>7 // 2</code> <code>3</code> <code>%</code> Modulus Remainder of the division <code>7 % 2</code> <code>1</code> <code>**</code> Exponentiation Raises to the power <code>2 ** 3</code> <code>8</code>"},{"location":"chapter_2_datatypes/3_operator/#comparison-operator","title":"Comparison Operator\u00b6","text":"Operator Meaning Example <code>==</code> Equal to <code>5 == 5 \u2192 True</code> <code>!=</code> Not equal to <code>5 != 3 \u2192 True</code> <code>&gt;</code> Greater than <code>5 &gt; 3 \u2192 True</code> <code>&lt;</code> Less than <code>5 &lt; 3 \u2192 False</code> <code>&gt;=</code> Greater than or equal <code>5 &gt;= 5 \u2192 True</code> <code>&lt;=</code> Less than or equal <code>3 &lt;= 5 \u2192 True</code>"},{"location":"chapter_2_datatypes/3_operator/#logical-operator","title":"Logical Operator\u00b6","text":"Operator Description Example <code>and</code> True if both are True <code>True and True \u2192 True</code> <code>or</code> True if any is True <code>True or False \u2192 True</code> <code>not</code> Inverts True/False <code>not True \u2192 False</code>"},{"location":"chapter_2_datatypes/3_operator/#operator-precedence","title":"Operator Precedence\u00b6","text":"Precedence Operator Type Operators Description 1 Parentheses <code>()</code> Overrides default precedence 2 Exponent <code>**</code> Power 3 Unary <code>+x</code>, <code>-x</code>, <code>~x</code> Unary plus, minus, bitwise NOT 4 Multiply/Divide <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code> Multiplication, division, etc. 5 Add/Subtract <code>+</code>, <code>-</code> Addition and subtraction 6 Comparison <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> Compare values 7 Logical NOT <code>not</code> Logical negation 8 Logical AND <code>and</code> Logical AND 9 Logical OR <code>or</code> Logical OR"},{"location":"chapter_3_data_structure/1_list/","title":"Lists","text":"In\u00a0[2]: Copied! <pre>## creating a list\nfruits_list = ['apple', 'banana', 'cherry', 10, 20, 30, 111.4]\nprint(fruits_list)\n</pre> ## creating a list fruits_list = ['apple', 'banana', 'cherry', 10, 20, 30, 111.4] print(fruits_list) <pre>['apple', 'banana', 'cherry', 10, 20, 30, 111.4]\n</pre> In\u00a0[3]: Copied! <pre>fruits_list = ['apple', 'banana', 'cherry']\nfruits_list[0] = 'mango'\nprint(fruits_list)\n</pre> fruits_list = ['apple', 'banana', 'cherry'] fruits_list[0] = 'mango' print(fruits_list) <pre>['mango', 'banana', 'cherry']\n</pre> In\u00a0[26]: Copied! <pre>## creating the list\nnumbers_list = [53, 93, 35, 1, 65, 26, 47, 3]\n\n## get the length of the list\nprint(len(numbers_list))\n</pre> ## creating the list numbers_list = [53, 93, 35, 1, 65, 26, 47, 3]  ## get the length of the list print(len(numbers_list)) <pre>8\n</pre> In\u00a0[13]: Copied! <pre>## indexing in list\nprint(numbers_list[0])\nprint(numbers_list[5])\nprint(numbers_list[-2])\n</pre> ## indexing in list print(numbers_list[0]) print(numbers_list[5]) print(numbers_list[-2]) <pre>53\n26\n47\n</pre> In\u00a0[4]: Copied! <pre>## slicing in list\nnumbers_list = [53, 93, 35, 1, 65, 26, 47, 3]\n\n## slicing with positive numbers\nprint('-----------------------------')\nprint('slicing with postive numbers')\nprint('-----------------------------')\nprint(numbers_list[1:4])     \nprint(numbers_list[:3])      \nprint(numbers_list[3:]) \n\n## slicing with negative numbers\nprint('-----------------------------')\nprint('slicing with negative numbers')\nprint('-----------------------------')\nprint(numbers_list[-5:-3])\n</pre> ## slicing in list numbers_list = [53, 93, 35, 1, 65, 26, 47, 3]  ## slicing with positive numbers print('-----------------------------') print('slicing with postive numbers') print('-----------------------------') print(numbers_list[1:4])      print(numbers_list[:3])       print(numbers_list[3:])   ## slicing with negative numbers print('-----------------------------') print('slicing with negative numbers') print('-----------------------------') print(numbers_list[-5:-3])  <pre>-----------------------------\nslicing with postive numbers\n-----------------------------\n[93, 35, 1]\n[53, 93, 35]\n[1, 65, 26, 47, 3]\n-----------------------------\nslicing with negative numbers\n-----------------------------\n[1, 65]\n</pre> In\u00a0[5]: Copied! <pre>## with steps\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers_list[::2])\n\n## reverse the list\nprint(numbers_list[::-1])   \n</pre> ## with steps numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] print(numbers_list[::2])  ## reverse the list print(numbers_list[::-1])    <pre>[1, 3, 5, 7, 9]\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n</pre> In\u00a0[6]: Copied! <pre>temp_list = ['apple', 1, 2]\n</pre> temp_list = ['apple', 1, 2] In\u00a0[10]: Copied! <pre>a = 2\nprint(type(temp_list))\n</pre> a = 2 print(type(temp_list)) <pre>&lt;class 'list'&gt;\n</pre> In\u00a0[25]: Copied! <pre># List of cities\ncities = [\n    \"Kathmandu\",\n    \"New York\",\n    \"Tokyo\",\n    \"Paris\",\n    \"London\",\n    \"Sydney\",\n    \"Dubai\",\n    \"Toronto\",\n    \"Rome\",\n]\n</pre> # List of cities cities = [     \"Kathmandu\",     \"New York\",     \"Tokyo\",     \"Paris\",     \"London\",     \"Sydney\",     \"Dubai\",     \"Toronto\",     \"Rome\", ] In\u00a0[26]: Copied! <pre>cities.sort()\nprint(cities)\n</pre> cities.sort() print(cities) <pre>['Dubai', 'Kathmandu', 'London', 'New York', 'Paris', 'Rome', 'Sydney', 'Tokyo', 'Toronto']\n</pre> In\u00a0[27]: Copied! <pre>cities.sort(reverse=True)\nprint(cities)\n</pre> cities.sort(reverse=True) print(cities) <pre>['Toronto', 'Tokyo', 'Sydney', 'Rome', 'Paris', 'New York', 'London', 'Kathmandu', 'Dubai']\n</pre> In\u00a0[19]: Copied! <pre>removed_element = cities.pop(1)\nprint(removed_element)\n</pre> removed_element = cities.pop(1) print(removed_element) <pre>New York\n</pre> In\u00a0[20]: Copied! <pre>print(cities)\n</pre> print(cities) <pre>['Kathmandu', 'Tokyo', 'Paris', 'London', 'Sydney', 'Dubai', 'Toronto', 'Rome']\n</pre> In\u00a0[12]: Copied! <pre>cities.append('Pokhara')\n</pre> cities.append('Pokhara') In\u00a0[13]: Copied! <pre>print(cities)\n</pre> print(cities) <pre>['Kathmandu', 'New York', 'Tokyo', 'Paris', 'London', 'Sydney', 'Dubai', 'Toronto', 'Rome', 'Pokhara']\n</pre> In\u00a0[29]: Copied! <pre># List of cities\ncities = [\n    \"Kathmandu\",\n    \"New York\",\n    \"Tokyo\",\n    \"Paris\",\n    \"London\",\n    \"Sydney\",\n    \"Dubai\",\n    \"Toronto\",\n    \"Rome\",\n]\n\nprint(cities.sort())\n</pre> # List of cities cities = [     \"Kathmandu\",     \"New York\",     \"Tokyo\",     \"Paris\",     \"London\",     \"Sydney\",     \"Dubai\",     \"Toronto\",     \"Rome\", ]  print(cities.sort()) <pre>None\n</pre> In\u00a0[30]: Copied! <pre>print(cities)\n</pre> print(cities) <pre>['Dubai', 'Kathmandu', 'London', 'New York', 'Paris', 'Rome', 'Sydney', 'Tokyo', 'Toronto']\n</pre> In\u00a0[31]: Copied! <pre>help(cities.sort)\n</pre> help(cities.sort) <pre>Help on built-in function sort:\n\nsort(*, key=None, reverse=False) method of builtins.list instance\n    Sort the list in ascending order and return None.\n\n    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n    order of two equal elements is maintained).\n\n    If a key function is given, apply it once to each list item and sort them,\n    ascending or descending, according to their function values.\n\n    The reverse flag can be set to sort in descending order.\n\n</pre> In\u00a0[16]: Copied! <pre>## insert\na = [1, 2, 3, 5]\na.insert(5,1)\nprint(a)\n</pre> ## insert a = [1, 2, 3, 5] a.insert(5,1) print(a) <pre>[1, 2, 3, 5, 1]\n</pre> In\u00a0[17]: Copied! <pre>help(list.insert)\n</pre> help(list.insert) <pre>Help on method_descriptor:\n\ninsert(self, index, object, /) unbound builtins.list method\n    Insert object before index.\n\n</pre> In\u00a0[12]: Copied! <pre>cities.sort(reverse=True)\nprint(cities)\n</pre> cities.sort(reverse=True) print(cities) <pre>['Toronto', 'Tokyo', 'Sydney', 'Rome', 'Pokhara', 'Paris', 'New York', 'London', 'Kathmandu', 'Dubai']\n</pre> In\u00a0[32]: Copied! <pre>original_list = [[1, 2], [3, 4], ['apple', 'mango', 'coconut']]\n\n## shallow copy of the list\ncopy_list = original_list.copy()\n\nprint(original_list)\nprint(copy_list)\n</pre> original_list = [[1, 2], [3, 4], ['apple', 'mango', 'coconut']]  ## shallow copy of the list copy_list = original_list.copy()  print(original_list) print(copy_list) <pre>[[1, 2], [3, 4], ['apple', 'mango', 'coconut']]\n[[1, 2], [3, 4], ['apple', 'mango', 'coconut']]\n</pre> In\u00a0[33]: Copied! <pre>copy_list[2][0]\n</pre> copy_list[2][0] Out[33]: <pre>'apple'</pre> In\u00a0[34]: Copied! <pre>copy_list[0][0] = 5\n\nprint(original_list)\nprint(copy_list)\n</pre> copy_list[0][0] = 5  print(original_list) print(copy_list) <pre>[[5, 2], [3, 4], ['apple', 'mango', 'coconut']]\n[[5, 2], [3, 4], ['apple', 'mango', 'coconut']]\n</pre> In\u00a0[35]: Copied! <pre>## an example of deep copy\nimport copy\noriginal_list = [[1, 2], [3, 4]]\n\ndeep_copy_list = copy.deepcopy(original_list)\ndeep_copy_list[0][0] = 5\n\nprint(original_list)\nprint(deep_copy_list)\n</pre> ## an example of deep copy import copy original_list = [[1, 2], [3, 4]]  deep_copy_list = copy.deepcopy(original_list) deep_copy_list[0][0] = 5  print(original_list) print(deep_copy_list)  <pre>[[1, 2], [3, 4]]\n[[5, 2], [3, 4]]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/1_list/#lists","title":"Lists\u00b6","text":"<ul> <li>Lists are used to store multiple items in a single variable.</li> <li>Lists can hold items of different data types such as string, integer, float</li> </ul>"},{"location":"chapter_3_data_structure/1_list/#list-is-mutable","title":"List is Mutable\u00b6","text":""},{"location":"chapter_3_data_structure/1_list/#indexing-and-slicing","title":"Indexing and Slicing\u00b6","text":""},{"location":"chapter_3_data_structure/1_list/#list-methods","title":"List Methods\u00b6","text":"Method Description Example Code Output <code>append()</code> Adds an item to the end of the list <code>lst = [1, 2]</code><code>lst.append(3)</code> <code>[1, 2, 3]</code> <code>extend()</code> Adds all elements of another list <code>lst = [1, 2]</code><code>lst.extend([3, 4])</code> <code>[1, 2, 3, 4]</code> <code>insert()</code> Inserts item at given index <code>lst = [1, 3]</code><code>lst.insert(1, 2)</code> <code>[1, 2, 3]</code> <code>remove()</code> Removes first occurrence of value <code>lst = [1, 2, 3]</code><code>lst.remove(2)</code> <code>[1, 3]</code> <code>pop()</code> Removes and returns item at index (default last) <code>lst = [1, 2, 3]</code><code>lst.pop()</code> <code>3</code>, list: <code>[1, 2]</code> <code>clear()</code> Removes all items from the list <code>lst = [1, 2, 3]</code><code>lst.clear()</code> <code>[]</code> <code>index()</code> Returns first index of value <code>lst = [10, 20, 30]</code><code>lst.index(20)</code> <code>1</code> <code>count()</code> Counts how many times value appears <code>lst = [1, 1, 2, 1]</code><code>lst.count(1)</code> <code>3</code> <code>sort()</code> Sorts the list in ascending order <code>lst = [3, 1, 2]</code><code>lst.sort()</code> <code>[1, 2, 3]</code> <code>reverse()</code> Reverses the order of the list <code>lst = [1, 2, 3]</code><code>lst.reverse()</code> <code>[3, 2, 1]</code> <code>copy()</code> Returns a shallow copy of the list <code>lst = [1, 2]</code><code>new = lst.copy()</code> <code>new = [1, 2]</code>"},{"location":"chapter_3_data_structure/1_list/#exercise-create-list-of-atleast-7-favorite-movies-or-series","title":"Exercise : Create list of atleast 7 favorite movies or series.\u00b6","text":"<ul> <li>Print the second and last movies.</li> <li>Print from second to second last movies</li> <li>Reverse the list.</li> <li>Add a new movie.</li> <li>Sort the list alphabetically.</li> <li>Remove the third movie</li> <li>clear all the list</li> </ul>"},{"location":"chapter_3_data_structure/1_list/#shallow-copy-vs-deep-copy","title":"Shallow Copy vs Deep Copy\u00b6","text":"<ul> <li><p>A shallow copy creates a new outer object, but doesn't copy nested objects inside it.</p> </li> <li><p>Both the original and the copy share references to the same inner objects.</p> </li> </ul>"},{"location":"chapter_3_data_structure/2_tuple/","title":"Tuples","text":"In\u00a0[1]: Copied! <pre>my_tuple = (1, 2, 3)\nmy_tuple[0] = 5\n# my_tuple[0] = 10  # This will raise an error\n</pre> my_tuple = (1, 2, 3) my_tuple[0] = 5 # my_tuple[0] = 10  # This will raise an error <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[1], line 2\n      1 my_tuple = (1, 2, 3)\n----&gt; 2 my_tuple[0] = 5\n      3 # my_tuple[0] = 10  # This will raise an error\n\nTypeError: 'tuple' object does not support item assignment</pre> In\u00a0[8]: Copied! <pre>t = ('a', 'b', 'c', 'd', 'e')\nprint(t[0])       # First element\nprint(t[-1])      # Last element\nprint(t[1:4])     # Slicing\nprint(t[::-1])    # Reversed\n</pre> t = ('a', 'b', 'c', 'd', 'e') print(t[0])       # First element print(t[-1])      # Last element print(t[1:4])     # Slicing print(t[::-1])    # Reversed <pre>a\ne\n('b', 'c', 'd')\n('e', 'd', 'c', 'b', 'a')\n</pre> In\u00a0[2]: Copied! <pre>my_tuple = ('apply', 'coco', 'sdfjh', 'mango')\nmy_tuple.index('coco')\n</pre> my_tuple = ('apply', 'coco', 'sdfjh', 'mango') my_tuple.index('coco') Out[2]: <pre>1</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[10]: Copied! <pre>country_1, country_2, country_3 = ('Nepal', 'Japan', 'India')\nprint(country_1)\nprint(country_2)\nprint(country_3)\n</pre> country_1, country_2, country_3 = ('Nepal', 'Japan', 'India') print(country_1) print(country_2) print(country_3) <pre>Nepal\nJapan\nIndia\n</pre> In\u00a0[11]: Copied! <pre>t = ('a', 'b', 'c', 'd', 'e')\n</pre> t = ('a', 'b', 'c', 'd', 'e')  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/2_tuple/#tuples","title":"Tuples\u00b6","text":"<ul> <li>Tuples are used to store multiple items in a single variable.</li> <li>Tuples are immutable, meaning once created, their elements cannot be changed.</li> </ul>"},{"location":"chapter_3_data_structure/2_tuple/#tuple-is-immutable","title":"Tuple is Immutable\u00b6","text":""},{"location":"chapter_3_data_structure/2_tuple/#indexing-and-slicing","title":"Indexing and Slicing\u00b6","text":""},{"location":"chapter_3_data_structure/2_tuple/#tuple-methods","title":"Tuple Methods\u00b6","text":"Method Description Example Code Output <code>count()</code> Returns the number of times a value appears <code>t = (1, 2, 1)</code><code>t.count(1)</code> <code>2</code> <code>index()</code> Returns the index of the first matching value <code>t = (10, 20, 30)</code><code>t.index(20)</code> <code>1</code>"},{"location":"chapter_3_data_structure/2_tuple/#exercise-create-a-tuple-of-5-artists","title":"Exercise : Create a tuple of 5 artists.\u00b6","text":"<ul> <li>Print the first and last artists.</li> <li>Print a slice from second to fourth artists.</li> <li>Count a particular artists (create some duplicate in the tuple for this).</li> <li>Try modifying an element (and observe the error).</li> </ul>"},{"location":"chapter_3_data_structure/2_tuple/#unpacking-a-tuple","title":"Unpacking a tuple\u00b6","text":""},{"location":"chapter_3_data_structure/2_tuple/#add-new-element-in-tuple","title":"Add new element in Tuple\u00b6","text":""},{"location":"chapter_3_data_structure/3_dictionary/","title":"Dictionaries","text":"In\u00a0[1]: Copied! <pre>person = {\n    'name': 'Alice', \n    'age': 25\n    }\nprint(person['name'])  # Accessing value by key\n</pre> person = {     'name': 'Alice',      'age': 25     } print(person['name'])  # Accessing value by key <pre>Alice\n</pre> In\u00a0[13]: Copied! <pre>## add city\nperson['city'] = 'Kathmandu'\n\n## update age\nperson['age'] = 50\nprint(person)\n</pre> ## add city person['city'] = 'Kathmandu'  ## update age person['age'] = 50 print(person) <pre>{'name': 'Alice', 'age': 50, 'city': 'Kathmandu'}\n</pre> In\u00a0[14]: Copied! <pre>## delete name\ndel person['name']\nprint(person)\n</pre> ## delete name del person['name'] print(person) <pre>{'age': 50, 'city': 'Kathmandu'}\n</pre> In\u00a0[2]: Copied! <pre>print(person)\n</pre> print(person) <pre>{'name': 'Alice', 'age': 25}\n</pre> In\u00a0[3]: Copied! <pre>person.keys()\n</pre> person.keys() Out[3]: <pre>dict_keys(['name', 'age'])</pre> In\u00a0[4]: Copied! <pre>person.values()\n</pre> person.values() Out[4]: <pre>dict_values(['Alice', 25])</pre> In\u00a0[5]: Copied! <pre>person.items()\n</pre> person.items() Out[5]: <pre>dict_items([('name', 'Alice'), ('age', 25)])</pre> In\u00a0[6]: Copied! <pre>person\n</pre> person Out[6]: <pre>{'name': 'Alice', 'age': 25}</pre> In\u00a0[7]: Copied! <pre>person['location']\n</pre> person['location'] <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 person['location']\n\nKeyError: 'location'</pre> In\u00a0[9]: Copied! <pre>person.get('name')\n</pre> person.get('name') Out[9]: <pre>'Alice'</pre> In\u00a0[11]: Copied! <pre>person.get('location', 'Kathmandu')\n</pre> person.get('location', 'Kathmandu') Out[11]: <pre>'Kathmandu'</pre> In\u00a0[12]: Copied! <pre>person.get('dsafaskhj', 'Kathmandu')\n</pre> person.get('dsafaskhj', 'Kathmandu') Out[12]: <pre>'Kathmandu'</pre> In\u00a0[14]: Copied! <pre>my_tuple = (1, 2, 3, 4)\nmy_list = list(my_tuple)\nmy_list.append(5)\nmy_tuple = tuple(my_list)\nprint(my_tuple)\n</pre> my_tuple = (1, 2, 3, 4) my_list = list(my_tuple) my_list.append(5) my_tuple = tuple(my_list) print(my_tuple) <pre>(1, 2, 3, 4, 5)\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/3_dictionary/#dictionaries","title":"Dictionaries\u00b6","text":"<ul> <li>Dictionaries are used to store data values in key:value pairs.</li> </ul>"},{"location":"chapter_3_data_structure/3_dictionary/#creating-and-accessing-dictionary","title":"Creating and Accessing Dictionary\u00b6","text":""},{"location":"chapter_3_data_structure/3_dictionary/#adding-updating-and-removing-elements","title":"Adding, Updating, and Removing Elements\u00b6","text":""},{"location":"chapter_3_data_structure/3_dictionary/#dictionary-methods","title":"Dictionary Methods\u00b6","text":"Method Description Example Code Output <code>keys()</code> Returns a list of dictionary keys <code>d = {'a': 1}</code><code>d.keys()</code> <code>dict_keys(['a'])</code> <code>values()</code> Returns a list of dictionary values <code>d = {'a': 1}</code><code>d.values()</code> <code>dict_values([1])</code> <code>items()</code> Returns a list of key-value tuple pairs <code>d = {'a': 1}</code><code>d.items()</code> <code>dict_items([('a', 1)])</code> <code>get()</code> Returns value for key if key exists <code>d = {'a': 1}</code><code>d.get('a')</code> <code>1</code> <code>update()</code> Updates dictionary with another dictionary <code>d.update({'b': 2})</code> <code>{'a': 1, 'b': 2}</code> <code>pop()</code> Removes and returns value for key <code>d.pop('a')</code> <code>1</code> and <code>{'b': 2}</code> <code>clear()</code> Removes all items <code>d.clear()</code> <code>{}</code>"},{"location":"chapter_3_data_structure/3_dictionary/#exercise-create-a-dictionary-with-movie-data-title-year-rating","title":"Exercise Create a dictionary with movie data (title, year, rating)\u00b6","text":"<p>Tasks:</p> <ul> <li>Access the title.</li> <li>Update the rating.</li> <li>Add a new key: 'actor'.</li> <li>Delete the year.</li> <li>Print all keys and values.</li> </ul>"},{"location":"chapter_3_data_structure/3_dictionary/#type-casting","title":"type casting\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/","title":"Sets","text":"In\u00a0[1]: Copied! <pre>## Creating a Set\nfruits_set = {'apple', 'banana', 'cherry'}\nprint(fruits_set)\n</pre> ## Creating a Set fruits_set = {'apple', 'banana', 'cherry'} print(fruits_set) <pre>{'cherry', 'banana', 'apple'}\n</pre> In\u00a0[3]: Copied! <pre>## Duplicate values will be removed automatically\nfruits_set = {'apple', 'banana', 'apple'}\nprint(fruits_set)\n</pre> ## Duplicate values will be removed automatically fruits_set = {'apple', 'banana', 'apple'} print(fruits_set) <pre>{'banana', 'apple'}\n</pre> In\u00a0[4]: Copied! <pre>fruits_set = {'apple', 'banana'}\nfruits_set.add('cherry')\nprint(fruits_set)\n</pre> fruits_set = {'apple', 'banana'} fruits_set.add('cherry') print(fruits_set) <pre>{'cherry', 'banana', 'apple'}\n</pre> In\u00a0[7]: Copied! <pre>fruits_set.update(['orange', 'grape'])\nprint(fruits_set)\n</pre> fruits_set.update(['orange', 'grape']) print(fruits_set) <pre>{'orange', 'apple', 'cherry', 'banana', 'grape'}\n</pre> In\u00a0[8]: Copied! <pre>fruits_set.remove('banana')\nprint(fruits_set)\n</pre> fruits_set.remove('banana') print(fruits_set) <pre>{'orange', 'apple', 'cherry', 'grape'}\n</pre> In\u00a0[9]: Copied! <pre>fruits_set.discard('pineapple')  # No error if not found\n# fruits_set.remove('pineapple') would raise an error\n</pre> fruits_set.discard('pineapple')  # No error if not found # fruits_set.remove('pineapple') would raise an error In\u00a0[\u00a0]: Copied! <pre># Union\nset1 = {'a', 'b'}\nset2 = {'b', 'c'}\nprint(set1.union(set2))\n</pre> # Union set1 = {'a', 'b'} set2 = {'b', 'c'} print(set1.union(set2)) In\u00a0[\u00a0]: Copied! <pre># Intersection\nprint(set1.intersection(set2))\n</pre> # Intersection print(set1.intersection(set2)) In\u00a0[\u00a0]: Copied! <pre># Difference\nprint(set1.difference(set2))\n</pre> # Difference print(set1.difference(set2)) In\u00a0[\u00a0]: Copied! <pre># Symmetric Difference\nprint(set1.symmetric_difference(set2))\n</pre> # Symmetric Difference print(set1.symmetric_difference(set2)) In\u00a0[10]: Copied! <pre>for fruit in fruits_set:\n    print(fruit)\n</pre> for fruit in fruits_set:     print(fruit) <pre>orange\napple\ncherry\ngrape\n</pre> In\u00a0[11]: Copied! <pre>'apple' in fruits_set\n</pre> 'apple' in fruits_set Out[11]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_3_data_structure/4_set/#sets","title":"Sets\u00b6","text":"<ul> <li>Sets are used to store multiple items in a single variable.</li> <li>Sets are unordered, unchangeable (but you can add/remove items), and do not allow duplicate values.</li> </ul>"},{"location":"chapter_3_data_structure/4_set/#note-since-set-is-unordered-there-is-no-indexing-and-slicing","title":"Note : Since Set is Unordered, there is no indexing and slicing\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#no-duplicates-allowed","title":"No Duplicates Allowed\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#add-items","title":"Add Items\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#add-multiple-items","title":"Add Multiple Items\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#remove-items","title":"Remove Items\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#discard-vs-remove","title":"Discard vs Remove\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#set-operations","title":"Set Operations\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#set-methods-in-python","title":"Set Methods in Python\u00b6","text":"Method Description Example <code>add(elem)</code> Adds a single element to the set <code>s.add(5)</code> <code>update(iterable)</code> Adds multiple elements from an iterable (like list, tuple) <code>s.update([1, 2])</code> <code>remove(elem)</code> Removes specified element; raises error if not found <code>s.remove(3)</code> <code>discard(elem)</code> Removes specified element; no error if element not found <code>s.discard(10)</code> <code>pop()</code> Removes and returns a random element <code>s.pop()</code> <code>clear()</code> Removes all elements from the set <code>s.clear()</code> <code>copy()</code> Returns a shallow copy of the set <code>s2 = s.copy()</code> <code>union(set2)</code> Returns a new set with all elements from both sets <code>s.union(s2)</code> <code>intersection(set2)</code> Returns common elements of both sets <code>s.intersection(s2)</code> <code>difference(set2)</code> Returns elements in the first set but not in the second <code>s.difference(s2)</code> <code>symmetric_difference(set2)</code> Returns elements in either set, but not in both <code>s.symmetric_difference(s2)</code> <code>issubset(set2)</code> Returns <code>True</code> if all elements of the set are in set2 <code>s.issubset(s2)</code> <code>issuperset(set2)</code> Returns <code>True</code> if set has all elements of set2 <code>s.issuperset(s2)</code> <code>isdisjoint(set2)</code> Returns <code>True</code> if sets have no elements in common <code>s.isdisjoint(s2)</code>"},{"location":"chapter_3_data_structure/4_set/#looping-through-a-set","title":"Looping Through a Set\u00b6","text":""},{"location":"chapter_3_data_structure/4_set/#check-if-item-exists","title":"Check if Item Exists\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/","title":"Conditionals and Loops","text":"In\u00a0[1]: Copied! <pre># 1. if, elif, else and Indentation\nx = 15\n\nif x &lt; 10:\n    print(\"Less than 10\")\nelif x == 10:\n    print(\"Equal to 10\")\nelse:\n    print(\"Greater than 10\")\n</pre> # 1. if, elif, else and Indentation x = 15  if x &lt; 10:     print(\"Less than 10\") elif x == 10:     print(\"Equal to 10\") else:     print(\"Greater than 10\") <pre>Greater than 10\n</pre> In\u00a0[2]: Copied! <pre>if x &lt; 10:\n    print('x less than 10')\nprint('x less than 10')\n</pre> if x &lt; 10:     print('x less than 10') print('x less than 10') <pre>x less than 10\n</pre> In\u00a0[3]: Copied! <pre># 2. Logical Operators: and, or, not\na = 5\nb = 10\n\nif a &lt; 10 and b &gt; 5:\n    print(\"Both conditions are True\")\n\nif a &gt; 10 or b &gt; 5:\n    print(\"At least one condition is True\")\n\nif not a &gt; 10:\n    print(\"a is not greater than 10\")\n</pre> # 2. Logical Operators: and, or, not a = 5 b = 10  if a &lt; 10 and b &gt; 5:     print(\"Both conditions are True\")  if a &gt; 10 or b &gt; 5:     print(\"At least one condition is True\")  if not a &gt; 10:     print(\"a is not greater than 10\") <pre>Both conditions are True\nAt least one condition is True\na is not greater than 10\n</pre> In\u00a0[4]: Copied! <pre># 3. is vs. == (Identity vs. Equality)\nx = [1, 2, 3]\ny = [1, 2, 3]\nz = x\n\nprint(x == y)  # True: Same content\nprint(x is y)  # False: Different objects\nprint(x is z)  # True: Same object\n</pre> # 3. is vs. == (Identity vs. Equality) x = [1, 2, 3] y = [1, 2, 3] z = x  print(x == y)  # True: Same content print(x is y)  # False: Different objects print(x is z)  # True: Same object <pre>True\nFalse\nTrue\n</pre> In\u00a0[5]: Copied! <pre>id(x), id(y), id(z)\n</pre> id(x), id(y), id(z) Out[5]: <pre>(136234817650112, 136234817650496, 136234817650112)</pre> In\u00a0[6]: Copied! <pre>n = 5\nres = \"Even\" if n % 2 == 0 else \"Odd\"\nprint(res)\n</pre> n = 5 res = \"Even\" if n % 2 == 0 else \"Odd\" print(res) <pre>Odd\n</pre> In\u00a0[7]: Copied! <pre>cities_list = ('Kathmandu', 'Lalitpur', 'Bhaktapur', 'asdf')\n\nfor city in cities_list:\n    print(city.lower())\n    print(city.upper())\n</pre> cities_list = ('Kathmandu', 'Lalitpur', 'Bhaktapur', 'asdf')  for city in cities_list:     print(city.lower())     print(city.upper())  <pre>kathmandu\nKATHMANDU\nlalitpur\nLALITPUR\nbhaktapur\nBHAKTAPUR\nasdf\nASDF\n</pre> In\u00a0[8]: Copied! <pre>word = 'Kathmandu'\n\nfor char in word:\n    print(char)\n</pre> word = 'Kathmandu'  for char in word:     print(char) <pre>K\na\nt\nh\nm\na\nn\nd\nu\n</pre> In\u00a0[9]: Copied! <pre># 4. Introduction to Loops: for and while\n# for loop\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</pre> # 4. Introduction to Loops: for and while # for loop fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits:     print(fruit) <pre>apple\nbanana\ncherry\n</pre> In\u00a0[10]: Copied! <pre># while loop\ncount = 0\nwhile count &lt; 3:\n    print(\"Count:\", count)\n    count += 1\n</pre> # while loop count = 0 while count &lt; 3:     print(\"Count:\", count)     count += 1 <pre>Count: 0\nCount: 1\nCount: 2\n</pre> In\u00a0[11]: Copied! <pre>for i in range(10):\n    print(i)\n</pre> for i in range(10):     print(i) <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre> In\u00a0[12]: Copied! <pre>for i in range(2, 10):\n    print(i)\n</pre> for i in range(2, 10):     print(i) <pre>2\n3\n4\n5\n6\n7\n8\n9\n</pre> In\u00a0[13]: Copied! <pre>for i in range(2, 10, 2):\n    print(i)\n</pre> for i in range(2, 10, 2):     print(i) <pre>2\n4\n6\n8\n</pre> In\u00a0[14]: Copied! <pre>for i in range(10, 1, -2):\n    print(i)\n</pre> for i in range(10, 1, -2):     print(i) <pre>10\n8\n6\n4\n2\n</pre> In\u00a0[15]: Copied! <pre>numbers_list = []\nfor i in range(1, 101):\n    numbers_list.append(i)\n</pre> numbers_list = [] for i in range(1, 101):     numbers_list.append(i) In\u00a0[16]: Copied! <pre>nums_list = list(range(1, 101))\n</pre> nums_list = list(range(1, 101)) In\u00a0[17]: Copied! <pre>numbers_list = [1, 2, 3, 4, 5, 6, 7,]\n</pre> numbers_list = [1, 2, 3, 4, 5, 6, 7,] In\u00a0[18]: Copied! <pre># 5. Loop control: break, continue, pass\n# break example\nfor i in range(5):\n    if i == 3:\n        break\n    print(f\"Break example: {i}\")\n</pre> # 5. Loop control: break, continue, pass # break example for i in range(5):     if i == 3:         break     print(f\"Break example: {i}\")  <pre>Break example: 0\nBreak example: 1\nBreak example: 2\n</pre> In\u00a0[19]: Copied! <pre># continue example\nfor i in range(5):\n    if i == 2:\n        continue\n    print(\"Continue example:\", i)\n</pre> # continue example for i in range(5):     if i == 2:         continue     print(\"Continue example:\", i)  <pre>Continue example: 0\nContinue example: 1\nContinue example: 3\nContinue example: 4\n</pre> In\u00a0[20]: Copied! <pre># range()\nfor i in range(1, 6):\n    print(i)\n</pre> # range() for i in range(1, 6):     print(i) <pre>1\n2\n3\n4\n5\n</pre> In\u00a0[21]: Copied! <pre>for i in range(1, 10, 2):\n    print(i)\n</pre> for i in range(1, 10, 2):     print(i) <pre>1\n3\n5\n7\n9\n</pre> In\u00a0[22]: Copied! <pre>for i in range(10, 1, -1):\n    print(i)\n</pre> for i in range(10, 1, -1):     print(i) <pre>10\n9\n8\n7\n6\n5\n4\n3\n2\n</pre> In\u00a0[23]: Copied! <pre>colors = [\"red\", \"green\", \"blue\"]\nfor index, color in enumerate(colors):\n    print(f\"{index} : {color}\")\n</pre> colors = [\"red\", \"green\", \"blue\"] for index, color in enumerate(colors):     print(f\"{index} : {color}\")  <pre>0 : red\n1 : green\n2 : blue\n</pre> In\u00a0[24]: Copied! <pre>colors = [\"red\", \"green\", \"blue\"]\nfor index, color in enumerate(colors, start=2):\n    print(f\"{index} : {color}\")\n</pre> colors = [\"red\", \"green\", \"blue\"] for index, color in enumerate(colors, start=2):     print(f\"{index} : {color}\")  <pre>2 : red\n3 : green\n4 : blue\n</pre> In\u00a0[25]: Copied! <pre># enumerate()\ncolors = [\"red\", \"green\", \"blue\"]\nfor index, color in enumerate(colors):\n    print(f\"Index {index} has color {color}\")\n</pre> # enumerate() colors = [\"red\", \"green\", \"blue\"] for index, color in enumerate(colors):     print(f\"Index {index} has color {color}\") <pre>Index 0 has color red\nIndex 1 has color green\nIndex 2 has color blue\n</pre> In\u00a0[26]: Copied! <pre>input_list = [1, 23, 983, 2923, 83, 85, 98, 20, 1]\noutput_list = []\nfor num in input_list:\n    if num % 2 == 0:\n        output_list.append(num)\n\nprint(output_list)\n</pre> input_list = [1, 23, 983, 2923, 83, 85, 98, 20, 1] output_list = [] for num in input_list:     if num % 2 == 0:         output_list.append(num)  print(output_list) <pre>[98, 20]\n</pre> In\u00a0[27]: Copied! <pre>word = 'banana'\ncounter_dictionary = {}\n\nfor char in word:\n    if char not in counter_dictionary:\n        counter_dictionary[char] = 1\n    elif char in counter_dictionary:\n        counter_dictionary[char] += 1\n\nprint(counter_dictionary)\n</pre> word = 'banana' counter_dictionary = {}  for char in word:     if char not in counter_dictionary:         counter_dictionary[char] = 1     elif char in counter_dictionary:         counter_dictionary[char] += 1  print(counter_dictionary) <pre>{'b': 1, 'a': 3, 'n': 2}\n</pre> In\u00a0[28]: Copied! <pre>'cocot' in ['apple', 'fruites', 'coco', 'mike']\n</pre> 'cocot' in ['apple', 'fruites', 'coco', 'mike'] Out[28]: <pre>False</pre> In\u00a0[29]: Copied! <pre>numbers = [3, 6, 8, 9, 2]\n\noutput_list = []\nfor number in numbers:\n    output_list.append(number ** 2)\n</pre> numbers = [3, 6, 8, 9, 2]  output_list = [] for number in numbers:     output_list.append(number ** 2) In\u00a0[30]: Copied! <pre>numbers = [3, 6, 8, 9, 2]\n\noutput_list = [number**2 for number in numbers]\nprint(output_list)\n</pre> numbers = [3, 6, 8, 9, 2]  output_list = [number**2 for number in numbers] print(output_list) <pre>[9, 36, 64, 81, 4]\n</pre> In\u00a0[31]: Copied! <pre>print(output_list)\n</pre> print(output_list) <pre>[9, 36, 64, 81, 4]\n</pre> In\u00a0[32]: Copied! <pre>input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]\n\noutput_list = []\nfor pair in input_list:\n    if pair[0] &lt; pair[1]:\n        output_list.append(pair)\n\nprint(output_list)\n</pre> input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]  output_list = [] for pair in input_list:     if pair[0] &lt; pair[1]:         output_list.append(pair)  print(output_list) <pre>[(2, 5), (3, 7)]\n</pre> In\u00a0[33]: Copied! <pre>input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]\n\n\n[pair for pair in input_list if pair[0] &lt; pair[1]]\n</pre> input_list = [(2, 5), (5, 2), (3, 7), (8, 2)]   [pair for pair in input_list if pair[0] &lt; pair[1]] Out[33]: <pre>[(2, 5), (3, 7)]</pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#conditionals-and-loops","title":"Conditionals and Loops\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#if-elif-and-else-and-indentation","title":"if, elif and else and Indentation\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#conditional-statement-using-logical-operator-and-or-not","title":"Conditional statement using logical operator (and, or, not)\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#identityis-vs-equality","title":"Identity(is) vs Equality(==)\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#ternary-operator","title":"Ternary Operator\u00b6","text":"<ul> <li>The ternary operator in Python allows us to perform conditional checks and assign values or perform operations on a single line.</li> </ul> <pre><code>x = a if condition else b\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#1-check-even-or-odd","title":"1. Check Even or Odd\u00b6","text":"<p>Write a program that takes an integer input from the user and checks if it is even or odd.</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#2-check-age-category","title":"2. Check Age Category\u00b6","text":"<p>Write a program that asks for a person's age and prints:</p> <ul> <li>\"Child\" if age &lt; 13</li> <li>\"Teenager\" if 13 &lt;= age &lt; 20</li> <li>\"Adult\" if age &gt;= 20</li> </ul>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#3-write-a-one-liner-using-a-ternary-operator-to-assign-a-grade-based-on-a-students-score","title":"3. Write a one-liner using a ternary operator to assign a grade based on a student's score.\u00b6","text":"<p>Given a variable score (an integer from 0 to 100), write a one-liner to assign:</p> <p>\"Pass\" if the score is 40 or above</p> <p>\"Fail\" if the score is below 40</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#loops","title":"Loops\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#range","title":"Range\u00b6","text":"<pre><code>range(start, stop, step)\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#enumerate","title":"Enumerate\u00b6","text":"<pre><code>enumerate(iterable, start) \n</code></pre> <p>default value for start = 0</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#3-print-multiplication-table-for-loop","title":"3. Print Multiplication Table (for loop)\u00b6","text":"<p>Print the multiplication table of a number entered by the user (from 1 to 10). Print in the following format. Use f-string in this case</p> <p>Input = 2</p> <p>Output:</p> <pre><code>2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n....\n...\n\n2 * 10 = 20\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#4-sum-of-first-n-numbers-while-loop","title":"4. Sum of First N Numbers (while loop)\u00b6","text":"<p>Ask the user for a number n and compute the sum of the first n natural numbers using a while loop.</p> <p>Input : 5</p> <p>Output : 15</p>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#5-write-a-program-that-takes-a-string-input-from-the-user-and-uses-a-dictionary-to-count-how-many-times-each-character-appears-in-the-string-use-a-loop-to-iterate-over-the-string","title":"5. Write a program that takes a string input from the user and uses a dictionary to count how many times each character appears in the string. Use a loop to iterate over the string.\u00b6","text":"<p>Example:</p> <p>Input: \"banana\"</p> <p>Output:</p> <pre><code>{'b': 1, 'a': 3, 'n': 2}\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#6-filter-out-all-even-numbers-in-a-list","title":"6. Filter out All Even Numbers in a List\u00b6","text":"<p>Write a program that takes a list of integers and uses a loop to create a new list containing only the even numbers from the original list. Then print the new list.</p> <p>Example:</p> <pre><code>Input: [1, 4, 7, 8, 10, 3, 6]\n</code></pre> <pre><code>\nOutput:\n[4, 8, 10, 6]\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#list-comprehension","title":"List Comprehension\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#1-given-a-list-of-words-create-a-list-with-each-word-capitalized-use-list-comprehension","title":"1. Given a list of words, create a list with each word capitalized. Use List Comprehension.\u00b6","text":"<p>Note: Use string.title() function to capitalize</p> <pre><code>input_word_list = ['apple', 'banana', 'coco']\n\noutput_word_list = ['Apple', 'Banana', 'Coco]\n</code></pre>"},{"location":"chapter_4_conditions_and_loops/4_conditionals_loops_2/#2-generate-pairs-of-numbers-i-j-where-i-and-j-are-from-1-to-10-but-only-where-i-j-use-list-comprehension","title":"2. Generate pairs of numbers (i, j) where i and j are from 1 to 10, but only where i &lt; j. Use List Comprehension\u00b6","text":"<p>Input: [(2, 5), (5, 2), (3, 7), (8, 2)]</p> <p>Output : [(2, 5), (3, 7)]</p>"},{"location":"chapter_5_functions/5_functions_tutorial/","title":"Python Functions Tutorial","text":"<ul> <li>Functions are defined using the <code>def</code> keyword.</li> <li>Parameters are inputs to functions.</li> <li><code>return</code> sends back a result from the function.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>def greet(name):\n    greeting_sentence = f\"Hello, {name}!\" \n    return greeting_sentence\n\ngreeting_sentence = greet(\"Alice\")\nprint(greeting_sentence)\n</pre> def greet(name):     greeting_sentence = f\"Hello, {name}!\"      return greeting_sentence  greeting_sentence = greet(\"Alice\") print(greeting_sentence) <pre>Hello, Alice!\n</pre> In\u00a0[4]: Copied! <pre>def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False \n\nnumber = 5\nis_even(number)\n</pre> def is_even(n):     if n % 2 == 0:         return True     else:         return False   number = 5 is_even(number) Out[4]: <pre>False</pre> In\u00a0[5]: Copied! <pre>def sqaure_cube(number_list):\n    print(number_list)\n\nnum_list = [1, 2, 6, 5, 8, 2]\nsqaure_cube(num_list)\n</pre> def sqaure_cube(number_list):     print(number_list)  num_list = [1, 2, 6, 5, 8, 2] sqaure_cube(num_list) <pre>[1, 2, 6, 5, 8, 2]\n</pre> In\u00a0[\u00a0]: Copied! <pre>grades_dictionary = {\n    'Alice': [85, 90, 78],\n    'Bob': [70, 80, 65],\n    'Charlie': [100, 95, 90]\n}\n\noutput_dictionary = {}\n\nfor grade in grades_dictionary.items():\n    student_name, students_grades = grade \n    student_average_grade = sum(students_grades) / len(students_grades)\n\n    output_dictionary[student_name] = student_average_grade\n\nprint(output_dictionary)\n</pre> grades_dictionary = {     'Alice': [85, 90, 78],     'Bob': [70, 80, 65],     'Charlie': [100, 95, 90] }  output_dictionary = {}  for grade in grades_dictionary.items():     student_name, students_grades = grade      student_average_grade = sum(students_grades) / len(students_grades)      output_dictionary[student_name] = student_average_grade  print(output_dictionary) <pre>{'Alice': 84.33333333333333, 'Bob': 71.66666666666667, 'Charlie': 95.0}\n</pre> In\u00a0[11]: Copied! <pre>def averageGrades(grades_dictionary):\n    output_dictionary = {}\n\n    for grade in grades_dictionary.items():\n        student_name, students_grades = grade \n        student_average_grade = sum(students_grades) / len(students_grades)\n\n        output_dictionary[student_name] = student_average_grade\n\n    return output_dictionary\n</pre> def averageGrades(grades_dictionary):     output_dictionary = {}      for grade in grades_dictionary.items():         student_name, students_grades = grade          student_average_grade = sum(students_grades) / len(students_grades)          output_dictionary[student_name] = student_average_grade      return output_dictionary In\u00a0[13]: Copied! <pre>grades_dictionary = {\n    'Alice': [85, 90, 78],\n    'Bob': [70, 80, 65],\n    'Charlie': [100, 95, 90]\n}\n\naverage_grades_dictionary = averageGrades(grades_dictionary)\nprint(average_grades_dictionary)\n</pre> grades_dictionary = {     'Alice': [85, 90, 78],     'Bob': [70, 80, 65],     'Charlie': [100, 95, 90] }  average_grades_dictionary = averageGrades(grades_dictionary) print(average_grades_dictionary) <pre>{'Alice': 84.33333333333333, 'Bob': 71.66666666666667, 'Charlie': 95.0}\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[5]: Copied! <pre>def wordCounter(words):\n    output_dictionary = {}\n\n    for w in words:\n        if w not in output_dictionary.keys():\n            output_dictionary[w] = 1\n        else:\n            output_dictionary[w] = output_dictionary[w] + 1\n    \n    return output_dictionary\n</pre> def wordCounter(words):     output_dictionary = {}      for w in words:         if w not in output_dictionary.keys():             output_dictionary[w] = 1         else:             output_dictionary[w] = output_dictionary[w] + 1          return output_dictionary In\u00a0[6]: Copied! <pre>words = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n\ncounter_dictionary = wordCounter(words)\nprint(counter_dictionary)\n</pre> words = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']  counter_dictionary = wordCounter(words) print(counter_dictionary) <pre>{'apple': 3, 'banana': 2, 'orange': 1}\n</pre> <ul> <li>Default parameters are used when an argument is not passed.</li> <li>Keyword arguments allow passing parameters by name.</li> <li>Docstrings are string literals used to describe functions.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>'''\nthis is a \nmultiline\nstring\n'''\n</pre> ''' this is a  multiline string ''' In\u00a0[\u00a0]: Copied! <pre>def power(base, exponent=2):\n    ''' \n    base is raised to the power of exponent\n\n    Input: \n        base : \n        exponent:\n    \n    Output:\n        base ** exponent is the output of the function\n    '''\n    return base ** exponent\n\nprint(power(3))\npower(2, 3)\noutup_number = power(\n    base = 10,\n    exponent=2\n)\nprint(outup_number)\n</pre> def power(base, exponent=2):     '''      base is raised to the power of exponent      Input:          base :          exponent:          Output:         base ** exponent is the output of the function     '''     return base ** exponent  print(power(3)) power(2, 3) outup_number = power(     base = 10,     exponent=2 ) print(outup_number) <pre>9\n100\n</pre> In\u00a0[28]: Copied! <pre>help(power)\n</pre> help(power) <pre>Help on function power in module __main__:\n\npower(base, exponent=2)\n    base is raised to the power of exponent\n\n    Input:\n        base :\n        exponent:\n\n    Output:\n        base ** exponent is the output of the function\n\n</pre> In\u00a0[\u00a0]: Copied! <pre>print(power.__doc__)\n</pre> print(power.__doc__) In\u00a0[3]: Copied! <pre>help(power)\n</pre> help(power) <pre>Help on function power in module __main__:\n\npower(base, exponent=2)\n    Returns the base raised to the power of exponent.\n\n</pre> In\u00a0[30]: Copied! <pre>def greet(name, message = 'Welcome!'):\n    greeting_sentence = f'{message} {name}'\n    print(greeting_sentence)\n\ngreet('Alice')\ngreet('Charlie', message = 'Thank You!')\n</pre> def greet(name, message = 'Welcome!'):     greeting_sentence = f'{message} {name}'     print(greeting_sentence)  greet('Alice') greet('Charlie', message = 'Thank You!') <pre>Welcome! Alice\nThank You! Charlie\n</pre> <ul> <li><code>*args</code> allows variable number of positional arguments.</li> <li><code>**kwargs</code> allows variable number of keyword arguments.</li> </ul> In\u00a0[31]: Copied! <pre>def tempFunction1(*args):\n    print(args)\n    print(type(args))\n\ntempFunction1(1, 2, 4, 5, 'Hello')\n</pre> def tempFunction1(*args):     print(args)     print(type(args))  tempFunction1(1, 2, 4, 5, 'Hello') <pre>(1, 2, 4, 5, 'Hello')\n&lt;class 'tuple'&gt;\n</pre> In\u00a0[8]: Copied! <pre>def tempFunction2(**kwargs):\n    print(kwargs)\n    print(kwargs['name'])\n\ntempFunction2(name = 'nirajan', location = 'bkt')        \n</pre> def tempFunction2(**kwargs):     print(kwargs)     print(kwargs['name'])  tempFunction2(name = 'nirajan', location = 'bkt')         <pre>{'name': 'nirajan', 'location': 'bkt'}\nnirajan\n</pre> In\u00a0[4]: Copied! <pre>def show_args(*args, **kwargs):\n    print(\"Positional arguments:\", args)\n    print(\"Keyword arguments:\", kwargs)\n\nshow_args(1, 2, 3, name=\"Alice\", age=25)\n</pre>  def show_args(*args, **kwargs):     print(\"Positional arguments:\", args)     print(\"Keyword arguments:\", kwargs)  show_args(1, 2, 3, name=\"Alice\", age=25)  <pre>Positional arguments: (1, 2, 3)\nKeyword arguments: {'name': 'Alice', 'age': 25}\n</pre> In\u00a0[20]: Copied! <pre>def func3(a, *args, **kwargs):\n    print(a)\n    print(args)\n    print(kwargs)\n\n\nfunc3(1, 'apple', 'mango', fruit = 'grapes', city = 'pokhara')\n</pre> def func3(a, *args, **kwargs):     print(a)     print(args)     print(kwargs)   func3(1, 'apple', 'mango', fruit = 'grapes', city = 'pokhara') <pre>1\n('apple', 'mango')\n{'fruit': 'grapes', 'city': 'pokhara'}\n</pre> In\u00a0[32]: Copied! <pre>def sum_all(*numbers):\n    print(sum(numbers))\n\nsum_all(1, 2, 3, 5, 2, 3)\n</pre> def sum_all(*numbers):     print(sum(numbers))  sum_all(1, 2, 3, 5, 2, 3) <pre>16\n</pre> <ul> <li>Local: Defined inside a function.</li> <li>Global: Defined at the top level.</li> </ul> In\u00a0[39]: Copied! <pre>x = 10\n</pre> x = 10 In\u00a0[41]: Copied! <pre>def func2():\n    global x\n    print(x)\n\nfunc2()\n</pre> def func2():     global x     print(x)  func2() <pre>10\n</pre> In\u00a0[38]: Copied! <pre>def func1():\n    x = 20\n    print('inside function : ', x)\n\nfunc1()\nprint('outside function : ', x)\n</pre> def func1():     x = 20     print('inside function : ', x)  func1() print('outside function : ', x)   <pre>inside function :  20\noutside function :  10\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[4]: Copied! <pre>x = 'this is a global variable'\n\ndef func1():\n    x = 'this is a local variable'\n    print(x) ## --&gt; local variable\n\n\nfunc1()\nprint(x) # --&gt; global variable\n</pre> x = 'this is a global variable'  def func1():     x = 'this is a local variable'     print(x) ## --&gt; local variable   func1() print(x) # --&gt; global variable  <pre>this is a local variable\nthis is a global variable\n</pre> <ul> <li>Functions are defined using <code>def</code> and are independent.</li> <li>Methods are functions associated with objects (e.g., strings, lists).</li> </ul> In\u00a0[\u00a0]: Copied! <pre># Function\ndef add(a, b):\n    return a + b\n\n# Method (associated with string object)\ntext = \"hello\"\nprint(text.upper())\n\nprint(add(5, 10))\n</pre> # Function def add(a, b):     return a + b  # Method (associated with string object) text = \"hello\" print(text.upper())  print(add(5, 10))  In\u00a0[42]: Copied! <pre>list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\nintersection_list = []\n\nfor number in list1:\n    if number in list2:\n        intersection_list.append(number)\n\nprint(intersection_list)\n</pre> list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8]  intersection_list = []  for number in list1:     if number in list2:         intersection_list.append(number)  print(intersection_list) <pre>[4, 5]\n</pre> In\u00a0[\u00a0]: Copied! <pre>lst = [1, 2, 3, 4, 5, 6, 7]\nk = 3\n</pre> lst = [1, 2, 3, 4, 5, 6, 7] k = 3   Out[\u00a0]: <pre>['mango', 'apple']</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#python-functions-tutorial","title":"Python Functions Tutorial\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#1-function-definition-parameters-and-return-statements","title":"1. Function Definition, Parameters, and Return Statements\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#exercise-1","title":"Exercise 1\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q1-write-a-function-area_of_rectanglelength-width-that-returns-the-area-of-a-rectangle","title":"Q1 : Write a function area_of_rectangle(length, width) that returns the area of a rectangle.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q2-create-a-function-is_evennumber-that-returns-true-if-the-number-is-even-otherwise-false","title":"Q2 : Create a function is_even(number) that returns True if the number is even, otherwise False.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q3-create-a-function-that-takes-a-list-of-number-as-parameter-and-return-the-list-with-sqaure-of-even-numbers-and-cube-of-odd-numbers-the-order-of-number-should-be-preserved","title":"Q3 : Create a function that takes a list of number as parameter, and return the list with sqaure of even numbers and cube of odd numbers. The order of number should be preserved.\u00b6","text":"<pre><code>Input : [5, 3, 6, 7, 1, 2]\n\nOutput : [125, 27, 36, 343, 1, 4]\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#q4-write-a-python-function-that-takes-a-list-of-words-as-input-and-returns-a-dictionary-showing-how-many-times-each-word-appears-in-the-list","title":"Q4 : Write a Python function that takes a list of words as input and returns a dictionary showing how many times each word appears in the list.\u00b6","text":"<pre><code>Input : \n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\n\nOutput : \n\n{'apple': 3, 'banana': 2, 'orange': 1}\n\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#q5-write-a-python-function-that-calculates-the-average-grade-for-each-student-given-a-dictionary-of-their-scores","title":"Q5 : Write a Python function that calculates the average grade for each student given a dictionary of their scores.\u00b6","text":"<p>Hint : sum([1, 2, 3]) provides sum of a list</p> <pre><code>input : \n\ngrades = {\n    'Alice': [85, 90, 78],\n    'Bob': [70, 80, 65],\n    'Charlie': [100, 95, 90]\n}\n\n\noutput : \n\n{\n    'Alice': 84.33,\n    'Bob': 71.67,\n    'Charlie': 95.0\n}\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#2-default-parameters-keyword-arguments-and-docstrings","title":"2. Default Parameters, Keyword Arguments, and Docstrings\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#exercise-2","title":"Exercise 2\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q3-write-a-function-greetname-messagewelcome-that-prints-a-greeting-demonstrate-it-with-default-and-keyword-arguments","title":"Q3 : Write a function greet(name, message=\"Welcome!\") that prints a greeting. Demonstrate it with default and keyword arguments.\u00b6","text":"<pre><code>Output : Welcome! Alice\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#q4-define-a-function-multiplya-b2-with-a-docstring-call-it-using-positional-and-keyword-arguments","title":"Q4 : Define a function multiply(a, b=2) with a docstring. Call it using positional and keyword arguments.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#3-args-and-kwargs","title":"3. *args and **kwargs\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q5-write-a-function-sum_allnumbers-that-returns-the-sum-of-all-arguments-passed-to-it","title":"Q5 : Write a function sum_all(*numbers) that returns the sum of all arguments passed to it.\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q6-create-a-function-print_student_detailsdetails-that-prints-each-key-value-pair-passed-as-keyword-arguments","title":"Q6 : Create a function print_student_details(**details) that prints each key-value pair passed as keyword arguments.\u00b6","text":"<p>Hint: Use dict.items() function</p> <p>Function call:</p> <pre><code>print_student_details(name=\"Sita\", age=20, grade=\"A\", address=\"Kathmandu\")\n</code></pre> <p>Output:</p> <pre><code>name: Sita\nage: 20\ngrade: A\naddress: Janakpur\n</code></pre>"},{"location":"chapter_5_functions/5_functions_tutorial/#4-scope-local-global-and-nonlocal","title":"4. Scope: Local, Global, and Nonlocal\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#5-methods-vs-functions","title":"5. Methods vs. Functions\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#problem-solving-exercise","title":"Problem Solving Exercise\u00b6","text":""},{"location":"chapter_5_functions/5_functions_tutorial/#q7-common-elements-between-two-lists","title":"Q7: Common Elements Between Two Lists\u00b6","text":"<p>Write a function common_elements(list1, list2) that returns a list of elements common to both lists.</p>"},{"location":"chapter_5_functions/5_functions_tutorial/#q8-second-largest-element","title":"Q8: Second Largest Element\u00b6","text":"<p>Write a function second_largest(lst) that returns the second largest number in a list.</p>"},{"location":"chapter_5_functions/5_functions_tutorial/#q9-rotate-list-elements","title":"Q9: Rotate List Elements\u00b6","text":"<p>Write a function rotate_list(lst, k) that rotates the list k steps to the right.</p> <p>Input:</p> <pre><code>lst = [1, 2, 3, 4, 5, 6, 7]\nk = 3\n</code></pre> <p>Output:</p> <pre><code>[5, 6, 7, 1, 2, 3, 4]\n</code></pre>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/","title":"Useful Functions","text":"In\u00a0[3]: Copied! <pre>def add(a, b):\n    return a + b\n\nprint(add(2, 3))  # 5\n</pre> def add(a, b):     return a + b  print(add(2, 3))  # 5 <pre>5\n</pre> In\u00a0[2]: Copied! <pre>### Non-Pure Function Example\n# - The following function modifies a global variable, which makes it **impure**:\n\ncount = 0\n\ndef increment():\n    global count\n    count += 1\n    return count\n\nprint(increment())  # 1\nprint(increment())  # 2\n</pre> ### Non-Pure Function Example # - The following function modifies a global variable, which makes it **impure**:  count = 0  def increment():     global count     count += 1     return count  print(increment())  # 1 print(increment())  # 2 <pre>1\n2\n</pre> In\u00a0[5]: Copied! <pre>multiply = lambda a, b, c : a * b *c\n\nresult = multiply(1, 2, 3)\nprint(result)\n</pre> multiply = lambda a, b, c : a * b *c  result = multiply(1, 2, 3) print(result) <pre>6\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[6]: Copied! <pre>add = lambda a, b, c: a + b + c\nprint(add(2, 3, 5))  # 5\n</pre> add = lambda a, b, c: a + b + c print(add(2, 3, 5))  # 5 <pre>10\n</pre> In\u00a0[9]: Copied! <pre>input_list = [1, 5, 6, 3]\n\noutpu_list = list(map(lambda x: x**3, input_list))\nprint(outpu_list)\n</pre>  input_list = [1, 5, 6, 3]  outpu_list = list(map(lambda x: x**3, input_list)) print(outpu_list) <pre>[1, 125, 216, 27]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[13]: Copied! <pre>nums = [1, 2, 3, 4, 5]\nsquares = list(map(lambda x: x**2, nums))\nprint(squares)\n</pre> nums = [1, 2, 3, 4, 5] squares = list(map(lambda x: x**2, nums)) print(squares) <pre>[1, 4, 9, 16, 25]\n</pre> In\u00a0[10]: Copied! <pre>nums = [5, 6, 7, 8]\n\ndef squareFunction(x):\n    '''\n    modify this function:\n        -return square if odd number else return same number'''\n    if x % 2 != 0:\n        return x ** 2\n    else:\n        return x\n\nsquares = list(map(squareFunction, nums))\nprint(squares)\n</pre> nums = [5, 6, 7, 8]  def squareFunction(x):     '''     modify this function:         -return square if odd number else return same number'''     if x % 2 != 0:         return x ** 2     else:         return x  squares = list(map(squareFunction, nums)) print(squares) <pre>[25, 6, 49, 8]\n</pre> In\u00a0[11]: Copied! <pre>### returns map object\nmap(squareFunction, nums)\n</pre> ### returns map object map(squareFunction, nums) Out[11]: <pre>&lt;map at 0x750c4426d7b0&gt;</pre> In\u00a0[12]: Copied! <pre>for i in map(squareFunction, nums):\n    print(i)\n</pre> for i in map(squareFunction, nums):     print(i) <pre>25\n6\n49\n8\n</pre> In\u00a0[13]: Copied! <pre>nums_list = [1, 2, 3, 4, 5, 6]\n\noutput_list = list(filter(lambda x : x % 2 == 0, nums_list))\nprint(output_list)\n</pre> nums_list = [1, 2, 3, 4, 5, 6]  output_list = list(filter(lambda x : x % 2 == 0, nums_list)) print(output_list) <pre>[2, 4, 6]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[14]: Copied! <pre>nums = [1, 2, 3, 4, 5, 6]\neven_nums = list(filter(lambda x: x % 2 == 0, nums))\nprint(even_nums)\n</pre> nums = [1, 2, 3, 4, 5, 6] even_nums = list(filter(lambda x: x % 2 == 0, nums)) print(even_nums) <pre>[2, 4, 6]\n</pre> In\u00a0[14]: Copied! <pre>def divisbleBy2(x):\n    ''' \n    modify the function to take\n        - return number divisible by 2 or 3 \n    '''\n    return x % 2 == 0 or x % 3 == 0\n\nnums = [1, 2, 3, 4, 5, 6, 27, 33]\neven_nums = list(filter(divisbleBy2, nums))\nprint(even_nums)\n</pre> def divisbleBy2(x):     '''      modify the function to take         - return number divisible by 2 or 3      '''     return x % 2 == 0 or x % 3 == 0  nums = [1, 2, 3, 4, 5, 6, 27, 33] even_nums = list(filter(divisbleBy2, nums)) print(even_nums) <pre>[2, 3, 4, 6, 27, 33]\n</pre> In\u00a0[20]: Copied! <pre>names = ['Alice', 'Bob', 'Charlie', 'John', 'Einstein']\nscores = [85, 90, 95, 100, 50, 60]\naddress = ['Nepal', 'India', 'America', 'Germany']\ncombined = list(zip(names, scores, address))\nprint(combined) \n</pre> names = ['Alice', 'Bob', 'Charlie', 'John', 'Einstein'] scores = [85, 90, 95, 100, 50, 60] address = ['Nepal', 'India', 'America', 'Germany'] combined = list(zip(names, scores, address)) print(combined)  <pre>[('Alice', 85, 'Nepal'), ('Bob', 90, 'India'), ('Charlie', 95, 'America'), ('John', 100, 'Germany')]\n</pre> In\u00a0[19]: Copied! <pre>combined_dictionary = dict(zip(names, scores))\nprint(combined_dictionary)\n</pre> combined_dictionary = dict(zip(names, scores)) print(combined_dictionary) <pre>{'Alice': 85, 'Bob': 90, 'Charlie': 95, 'John': 100, 'Einstein': 50}\n</pre> In\u00a0[21]: Copied! <pre>from functools import reduce\n\nnums = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, nums)\nprint(product) \n</pre> from functools import reduce  nums = [1, 2, 3, 4] product = reduce(lambda x, y: x * y, nums) print(product)  <pre>24\n</pre> In\u00a0[22]: Copied! <pre>def greater(a, b):\n    return a if a &gt; b else b \n\nnums = [34, 667, 12, 90, 23, 56]\n\ngreatest_number = reduce(greater, nums)\nprint(greatest_number)\n</pre> def greater(a, b):     return a if a &gt; b else b   nums = [34, 667, 12, 90, 23, 56]  greatest_number = reduce(greater, nums) print(greatest_number) <pre>667\n</pre>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#useful-functions","title":"Useful Functions\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#1-pure-functions-characteristics-and-benefits","title":"1. Pure Functions: Characteristics and Benefits\u00b6","text":"<ul> <li>A pure function is a function where the output value is determined only by its input values.</li> <li>It has no side effects (does not modify external state).</li> <li>Benefits include:<ul> <li>Easier to test and debug</li> <li>Predictable output --&gt; Always give the same output for the same input</li> </ul> </li> </ul>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#exercise-1","title":"Exercise 1\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#q1-write-a-pure-function-that-multiplies-three-numbers","title":"Q1: Write a pure function that multiplies three numbers.\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#2-lambda-expressions-anonymous-functions","title":"2. Lambda Expressions: Anonymous Functions\u00b6","text":"<ul> <li>Lambda functions are small, unnamed functions defined using the <code>lambda</code> keyword.</li> <li>Syntax: <code>lambda arguments: expression</code></li> </ul> <p>Limitations:</p> <ul> <li><p>You cannot use statements like if, for, while, return, etc., directly inside a lambda.</p> </li> <li><p>You can only have expressions, not multiple lines of logic.</p> </li> </ul>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#exercise-2","title":"Exercise 2\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#q2-write-a-lambda-function-that-returns-the-cube-of-a-number","title":"Q2: Write a lambda function that returns the cube of a number.\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#3-functional-tools-map-filter-zip-reduce","title":"3. Functional Tools: <code>map()</code>, <code>filter()</code>, <code>zip()</code>, <code>reduce()</code>\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#map","title":"map()\u00b6","text":"<ul> <li>Applies a function to each item in an iterable.</li> </ul>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#exercise-3","title":"Exercise 3\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#1-use-map-to-square-each-number-in-a-list-of-integers","title":"1. Use <code>map()</code> to square each number in a list of integers.\u00b6","text":"<p>Example input: <code>[1, 2, 3, 4, 5]</code> Expected output: <code>[1, 4, 9, 16, 25]</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#2-use-map-to-convert-a-list-of-strings-to-uppercase","title":"2. Use <code>map()</code> to convert a list of strings to uppercase.\u00b6","text":"<p>Example input: <code>['apple', 'banana', 'cherry']</code> Expected output: <code>['APPLE', 'BANANA', 'CHERRY']</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#3-use-map-to-convert-a-list-of-temperatures-from-celsius-to-fahrenheit","title":"3. Use <code>map()</code> to convert a list of temperatures from Celsius to Fahrenheit.\u00b6","text":"<pre><code>Formula : Fahrenheit = (Celsius * 9/5) + 32 \n</code></pre>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#filter","title":"filter()\u00b6","text":"<ul> <li>Filters items based on a condition.</li> </ul>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#1-use-filter-to-extract-all-non-empty-strings-from-a-list-ie-remove-empty-strings","title":"1. Use <code>filter()</code> to extract all non-empty strings from a list (i.e., remove empty strings).\u00b6","text":"<p>Example input: <code>['apple', '', 'banana', '', 'cherry', '']</code> Expected output: <code>['apple', 'banana', 'cherry']</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#2-use-filter-to-extract-all-numbers-divisible-by-3-from-a-list","title":"2. Use <code>filter()</code> to extract all numbers divisible by 3 from a list.\u00b6","text":"<p>Example input: <code>[1, 3, 6, 7, 9, 11, 12]</code> Expected output: <code>[3, 6, 9, 12]</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#3-use-filter-to-extract-all-strings-from-a-list-that-start-with-the-letter-a","title":"3: Use <code>filter()</code> to extract all strings from a list that start with the letter 'A'.\u00b6","text":"<p>Note: also handle the CASE : apple and ApPle should also be returned</p> <p>Example input: <code>['Apple', 'Banana', 'Avocado', 'Cherry', 'Apricot']</code> Expected output: <code>['Apple', 'Avocado', 'Apricot']</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#4-use-filter-to-extract-all-prime-numbers-from-a-list-of-integers","title":"4. Use <code>filter()</code> to extract all prime numbers from a list of integers.\u00b6","text":"<p>Example input: <code>[2, 3, 4, 5, 6, 7, 8, 9, 10]</code> Expected output: <code>[2, 3, 5, 7]</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#zip","title":"zip()\u00b6","text":"<ul> <li>Combines multiple iterables into tuples.</li> </ul>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#reduce","title":"reduce()\u00b6","text":"<ul> <li>Reduces an iterable to a single value using a function.</li> <li>Needs to be imported from <code>functools</code>.</li> </ul>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#1-use-reduce-to-compute-the-product-of-all-elements-in-a-list","title":"1: Use <code>reduce()</code> to compute the product of all elements in a list.\u00b6","text":"<p>Example input: <code>[1, 2, 3, 4, 5]</code> Expected output: <code>120</code></p>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#2-write-a-function-that-uses-reduce-to-find-the-maximum-number-in-a-list","title":"2. Write a function that uses reduce to find the maximum number in a list.\u00b6","text":"<p>Hint: Use Ternary Operator</p> <pre><code>x = a if condition else b\n</code></pre>"},{"location":"chapter_6_useful_functions/7_useful_functions_tutorial/#summary","title":"Summary\u00b6","text":"<ul> <li>Pure functions are predictable and side-effect-free.</li> <li>Lambda functions are concise one-line functions.</li> <li>Functional tools like map, filter, zip, and reduce are powerful when working with iterables.</li> </ul>"},{"location":"chapter_7_oop/11.%20OOP/","title":"11. OOP","text":"In\u00a0[\u00a0]: Copied! <pre>class User:\n    def hello(self):\n        print(\"Hello world!\")\n</pre> class User:     def hello(self):         print(\"Hello world!\") In\u00a0[\u00a0]: Copied! <pre>user1 = User()\nuser1.hello()\n</pre> user1 = User() user1.hello() <pre>Hello world!\n</pre> In\u00a0[23]: Copied! <pre>class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def run(self):\n        print(f\"Hello, {self.name} is running.\")\n\n    def shout(self):\n        print(f\"{self.name} is shouting.\")\n</pre> class User:     def __init__(self, name, age):         self.name = name         self.age = age          def run(self):         print(f\"Hello, {self.name} is running.\")      def shout(self):         print(f\"{self.name} is shouting.\") In\u00a0[25]: Copied! <pre>obj1 = User(\"Nirajan\", 24)\n</pre> obj1 = User(\"Nirajan\", 24) In\u00a0[26]: Copied! <pre>obj1.name\n</pre> obj1.name Out[26]: <pre>'Nirajan'</pre> In\u00a0[27]: Copied! <pre>obj1.attack = 50\n</pre> obj1.attack = 50 In\u00a0[28]: Copied! <pre>obj1.run()\n</pre> obj1.run() <pre>Hello, Nirajan is running.\n</pre> In\u00a0[29]: Copied! <pre>obj1.shout()\n</pre> obj1.shout() <pre>Nirajan is shouting.\n</pre> In\u00a0[30]: Copied! <pre>obj1.attack\n</pre> obj1.attack Out[30]: <pre>50</pre> In\u00a0[31]: Copied! <pre>class PlayerCharacter: # CamelCase for classes\n\tdef __init__(self, name, age):\n\t\tself.name = name\n\t\tself.age = age\n\t\n\tdef run(self):\n\t\tprint(f\"Player {self.name} of age {self.age} is running.\")\n</pre> class PlayerCharacter: # CamelCase for classes \tdef __init__(self, name, age): \t\tself.name = name \t\tself.age = age \t \tdef run(self): \t\tprint(f\"Player {self.name} of age {self.age} is running.\") In\u00a0[32]: Copied! <pre>player1 = PlayerCharacter(\"Nirajan\", 24)\nplayer2 = PlayerCharacter(\"John\", 20)\n\nplayer2.attack = 50  # Creating attribute\n\nprint(player1.age) # 24\nprint(player2.name) # John\nplayer1.run() # Player Nirajan of age 24 is running.\nprint(player2.attack) # 50 \n</pre> player1 = PlayerCharacter(\"Nirajan\", 24) player2 = PlayerCharacter(\"John\", 20)  player2.attack = 50  # Creating attribute  print(player1.age) # 24 print(player2.name) # John player1.run() # Player Nirajan of age 24 is running. print(player2.attack) # 50  <pre>24\nJohn\nPlayer Nirajan of age 24 is running.\n50\n</pre> In\u00a0[1]: Copied! <pre>class PlayerCharacter:\n\tmembership = True\n\tdef __init__(self, name):\n\t\tself.name = name\n\t\n\tdef shout(self):\n\t\tif PlayerCharacter.membership:\n\t\t\treturn self.name \n\t\t\t# return PlayerCharacter.name # This gives error because name is class attribute\n\t\telse:\n\t\t\treturn \"no membership\"\n\nobj1 = PlayerCharacter(\"Nirajan\")\nprint(obj1.membership)\nprint(obj1.shout()) # Nirajan\n</pre> class PlayerCharacter: \tmembership = True \tdef __init__(self, name): \t\tself.name = name \t \tdef shout(self): \t\tif PlayerCharacter.membership: \t\t\treturn self.name  \t\t\t# return PlayerCharacter.name # This gives error because name is class attribute \t\telse: \t\t\treturn \"no membership\"  obj1 = PlayerCharacter(\"Nirajan\") print(obj1.membership) print(obj1.shout()) # Nirajan <pre>True\nNirajan\n</pre> In\u00a0[37]: Copied! <pre>class PlayerCharacter:\n\tdef __init__(self, name, age):\n\t\tself.name = name\n\t\tself.age = age\n\t\n\tdef run(self):\n\t\tprint(\"Run\")\n\nplayer1 = PlayerCharacter(\"Nirajan\", 24)\n</pre> class PlayerCharacter: \tdef __init__(self, name, age): \t\tself.name = name \t\tself.age = age \t \tdef run(self): \t\tprint(\"Run\")  player1 = PlayerCharacter(\"Nirajan\", 24) In\u00a0[\u00a0]: Copied! <pre>player1.run()\n</pre> player1.run() <pre>Run\n</pre> In\u00a0[1]: Copied! <pre>class PlayerCharacter:\n\tdef __init__(self, name, age):\n\t\tself.name = name\n\t\tself.age = age\n\t\n\tdef run(self):\n\t\tprint(\"Run\")\n\nplayer1 = PlayerCharacter(\"Nirajan\", 24)\nplayer1.run()\n\nplayer2 = PlayerCharacter(\"John\", 25)\nplayer2.run()\n</pre> class PlayerCharacter: \tdef __init__(self, name, age): \t\tself.name = name \t\tself.age = age \t \tdef run(self): \t\tprint(\"Run\")  player1 = PlayerCharacter(\"Nirajan\", 24) player1.run()  player2 = PlayerCharacter(\"John\", 25) player2.run() <pre>Run\nRun\n</pre> In\u00a0[41]: Copied! <pre>\"string\".upper()\n</pre> \"string\".upper() Out[41]: <pre>'STRING'</pre> <p>Here, when we call run, we don\u2019t really care how run is implemented. All we know is that player1 has access to run method and we can use it.</p> <p>There is a concept of protected and private in abstraction.</p> <ul> <li>Using the single underscore makes <code>protected</code> members or methods, but it doesn\u2019t actually do anything other than provide suggestion to other programmers not to use them.</li> <li>A double underscore is a bit tricker. These are refers as <code>private</code> members or methods, but they aren\u2019t really private either since we can still access it.</li> </ul> In\u00a0[4]: Copied! <pre>class PlayerCharacter:\n    def __init__(self, name, age):\n        self._name = name        # Protected member\n        self.__age = age         # Private member\n\n    def _run(self):              # Protected method\n        print(\"Run\")\n        print(self.__age)\n\nplayer1 = PlayerCharacter(\"Nirajan\", 24)\n\n# Direct access to __age will raise an AttributeError\n# print(player1.__age)          # AttributeError\n\n# Correct way to access the private variable (not recommended in practice)\nprint(player1._PlayerCharacter__age)  # This will print: 24\n\n# player1._run()\n</pre> class PlayerCharacter:     def __init__(self, name, age):         self._name = name        # Protected member         self.__age = age         # Private member      def _run(self):              # Protected method         print(\"Run\")         print(self.__age)  player1 = PlayerCharacter(\"Nirajan\", 24)  # Direct access to __age will raise an AttributeError # print(player1.__age)          # AttributeError  # Correct way to access the private variable (not recommended in practice) print(player1._PlayerCharacter__age)  # This will print: 24  # player1._run() <pre>24\n</pre> In\u00a0[\u00a0]: Copied! <pre>class User(): # Parent class\n\tdef sign_in(self):\n\t\tprint(\"logged in\")\n</pre> class User(): # Parent class \tdef sign_in(self): \t\tprint(\"logged in\") In\u00a0[\u00a0]: Copied! <pre>class Wizard(User): # Child class\n\tdef __init__(self, name, power):\n\t\tself.name = name\n\t\tself.power = power\n\n\tdef attack(self):\n\t\tprint(f\"attacking with power of {self.power}\")\n\t\t\nclass Archer(User): # Child class\n\tdef __init__(self, name, num_arrows):\n\t\tself.name = name\n\t\tself.power = num_arrows\n\n\tdef attack(self):\n\t\tprint(\"attacking with arrows\")\n</pre> class Wizard(User): # Child class \tdef __init__(self, name, power): \t\tself.name = name \t\tself.power = power  \tdef attack(self): \t\tprint(f\"attacking with power of {self.power}\") \t\t class Archer(User): # Child class \tdef __init__(self, name, num_arrows): \t\tself.name = name \t\tself.power = num_arrows  \tdef attack(self): \t\tprint(\"attacking with arrows\") In\u00a0[62]: Copied! <pre>wizard1 = Wizard(\"Merlin\", 50)\nwizard1.attack() # attacking with power of 50\nwizard1.sign_in()\n\narcher1 = Archer(\"Robin\", 100)\narcher1.attack() # attacking with arrows\n</pre> wizard1 = Wizard(\"Merlin\", 50) wizard1.attack() # attacking with power of 50 wizard1.sign_in()  archer1 = Archer(\"Robin\", 100) archer1.attack() # attacking with arrows <pre>attacking with power of 50\nlogged in\nattacking with arrows\n</pre> In\u00a0[5]: Copied! <pre>class User(): # Parent class\n\tdef __init__(self, email, address):\n\t\tself.email = email\n\t\tself.address = address\n\n\tdef attack(self):\n\t\tprint(\"do nothing\")\n\nclass Wizard(User): # Child class\n\tdef __init__(self, name, power, email, address):\n\t\tsuper().__init__(email, address) # can also be done by User.__init__(self, email, address)\n\t\tself.name = name\n\t\tself.power = power\n\n\tdef attack(self):\n\t\tprint(f\"attacking with power of {self.power}\")\n\nwizard1 = Wizard(\"Nirajan\", 50, \"nirajan@gmail.com\", \"Bhaktapur\")\nprint(wizard1.email) # nirajan@gmail.com\n</pre> class User(): # Parent class \tdef __init__(self, email, address): \t\tself.email = email \t\tself.address = address  \tdef attack(self): \t\tprint(\"do nothing\")  class Wizard(User): # Child class \tdef __init__(self, name, power, email, address): \t\tsuper().__init__(email, address) # can also be done by User.__init__(self, email, address) \t\tself.name = name \t\tself.power = power  \tdef attack(self): \t\tprint(f\"attacking with power of {self.power}\")  wizard1 = Wizard(\"Nirajan\", 50, \"nirajan@gmail.com\", \"Bhaktapur\") print(wizard1.email) # nirajan@gmail.com <pre>nirajan@gmail.com\n</pre> In\u00a0[72]: Copied! <pre>class A:\n    def greet(self):\n        print(\"Hello from A\")\n\nclass B:\n    def greet(self):\n        print(\"Hello from B\")\n\n    def run(self):\n        print(\"Run\")\n\nclass C(A, B):\n    # def greet(self):\n    #     print(\"greet from C\")\n    pass\n\nobj = C()\nobj.greet()\nobj.run() # Hello from A\n\nprint(C.mro())\n</pre> class A:     def greet(self):         print(\"Hello from A\")  class B:     def greet(self):         print(\"Hello from B\")      def run(self):         print(\"Run\")  class C(A, B):     # def greet(self):     #     print(\"greet from C\")     pass  obj = C() obj.greet() obj.run() # Hello from A  print(C.mro()) <pre>Hello from A\nRun\n[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;]\n</pre> <p>The reason C.greet() calls the method from A is because of Python's Method Resolution Order (MRO), which determines the order in which classes are searched when executing a method. MRO is left-to-right, depth-first (C3 linearization).</p> <p>No need to know this algorithm.</p> In\u00a0[66]: Copied! <pre>print(C.__mro__)\n# OR\nprint(C.mro()) # (&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)\n</pre> print(C.__mro__) # OR print(C.mro()) # (, , , ) <pre>(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)\n[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;]\n</pre> In\u00a0[6]: Copied! <pre>class User: # Parent class\n\tdef sign_in(self):\n\t\tprint(\"logged in\")\n\n\tdef attack(self):\n\t\tprint(\"so nothing\")\n\t\t\nclass Wizard(User): # Child class\n\tdef __init__(self, name, power):\n\t\tself.name = name\n\t\tself.power = power\n\n\tdef attack(self):\n\t\tprint(f\"attacking with power of {self.power}\")\n\t\t\n\tdef greet(self):\n\t\tprint(\"hello\")\n\nclass Archer(User): # Child class\n\tdef __init__(self, name, num_arrows):\n\t\tself.name = name\n\t\tself.power = num_arrows\n\n\tdef attack(self):\n\t\tprint(\"attacking with arrows\")\n</pre> class User: # Parent class \tdef sign_in(self): \t\tprint(\"logged in\")  \tdef attack(self): \t\tprint(\"so nothing\") \t\t class Wizard(User): # Child class \tdef __init__(self, name, power): \t\tself.name = name \t\tself.power = power  \tdef attack(self): \t\tprint(f\"attacking with power of {self.power}\") \t\t \tdef greet(self): \t\tprint(\"hello\")  class Archer(User): # Child class \tdef __init__(self, name, num_arrows): \t\tself.name = name \t\tself.power = num_arrows  \tdef attack(self): \t\tprint(\"attacking with arrows\") In\u00a0[7]: Copied! <pre>wizard1 = Wizard(\"Merlin\", 50) \narcher1 = Archer(\"Robin\", 100)\n\nwizard1.attack() # attacking with power of 50\narcher1.attack() # attacking with arrows\n</pre> wizard1 = Wizard(\"Merlin\", 50)  archer1 = Archer(\"Robin\", 100)  wizard1.attack() # attacking with power of 50 archer1.attack() # attacking with arrows <pre>attacking with power of 50\nattacking with arrows\n</pre> In\u00a0[3]: Copied! <pre>class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\n  def __str__(self):\n    return f'I am {self.name} and I am {self.age} years old'\n\n  def __del__(self):\n    print(f'Person {self.name} is deleted')\n\n\n\np1 = Person(\"John\", 36)\n\nprint(type(p1))\nprint(p1.name)\nprint(p1.age)\n</pre> class Person:   def __init__(self, name, age):     self.name = name     self.age = age    def __str__(self):     return f'I am {self.name} and I am {self.age} years old'    def __del__(self):     print(f'Person {self.name} is deleted')    p1 = Person(\"John\", 36)  print(type(p1)) print(p1.name) print(p1.age) <pre>&lt;class '__main__.Person'&gt;\nJohn\n36\n</pre> In\u00a0[4]: Copied! <pre>del p1\n</pre> del p1 <pre>Person John is deleted\n</pre> In\u00a0[5]: Copied! <pre>a = 'asdf'\n\ndel a\n</pre> a = 'asdf'  del a In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_7_oop/11.%20OOP/#object-oriented-programming-oop","title":"Object-Oriented Programming (OOP)\u00b6","text":"<p>Programming paradigm that organizes code into objects.</p> <ul> <li>data (attributes)</li> <li>behavior (methods)</li> </ul> <p>Example:</p> <ul> <li>It helps structure code using real-world entities.</li> <li>A car (object) has attributes (color, model) and behaviors (drive, stop).</li> </ul> <p>Classes and Objects</p> <ul> <li>Classes are blueprints for creating objects, and objects are instances of classes.</li> <li>Objects store attributes (variables) and methods (functions) that define their behavior.</li> </ul>"},{"location":"chapter_7_oop/11.%20OOP/#the-init-method-constructor","title":"The init Method (Constructor) :\u00b6","text":"<ul> <li><code>__init__</code> is a special method (dunder method) that initializes object attributes when an instance is created. It is automatically called when a new object is instantiated.</li> <li><code>Self</code> represents the instance of the class and allows access to its attributes and methods. It must be the first parameter in instance methods but is not a keyword (can be renamed, though not recommended)</li> </ul>"},{"location":"chapter_7_oop/11.%20OOP/#class-attribute","title":"Class attribute\u00b6","text":"<p>Class attributes are static unlike attributes used in <code>_init__</code>. They are same for all objects and are accessed by using class name directly.</p>"},{"location":"chapter_7_oop/11.%20OOP/#four-pillars-of-oop","title":"Four pillars of OOP\u00b6","text":""},{"location":"chapter_7_oop/11.%20OOP/#encapsulation","title":"Encapsulation:\u00b6","text":"<p>Binding data (attribute) and functions (methods) that manipulate the data.</p> <p>Also in Python code, when we create a string, because of encapsulation we have different functions and methods available that we can access. For example: upper(), count(), reverse(), etc.</p>"},{"location":"chapter_7_oop/11.%20OOP/#abstraction","title":"Abstraction:\u00b6","text":"<p>Hiding of information or abstracting away information and giving access to only what\u2019s necessary.</p>"},{"location":"chapter_7_oop/11.%20OOP/#inheritance","title":"Inheritance\u00b6","text":"<p>Inheritance allows us to define a class that inherits all the methods and properties from another class.</p> <p>Parent class is the class being inherited from, also called base class.</p> <p>Child class is the class that inherits from another class, also called derived class.</p>"},{"location":"chapter_7_oop/11.%20OOP/#super","title":"Super()\u00b6","text":"<p>In inheritance, when we want to use attribute from main class to sub class, we can do as:</p>"},{"location":"chapter_7_oop/11.%20OOP/#multiple-inheritance","title":"Multiple Inheritance\u00b6","text":"<p>Allows a class to inherit from more than one parent class.</p>"},{"location":"chapter_7_oop/11.%20OOP/#polymorphism","title":"Polymorphism\u00b6","text":"<ul> <li>Poly means many and morphism means form so polymorphism means having many form.</li> <li>In python, polymorphism refers to the way in which object classes can share the same method name. But these method names can act differently based on what object calls them.</li> </ul>"},{"location":"chapter_7_oop/11.%20OOP/#dunder-methods-magic-method","title":"Dunder Methods (Magic method)\u00b6","text":"<ul> <li>Special methods that starts and end with double underscores.</li> <li>When we add two numbers using the + operator, internally the <code>__add__()</code> method will be called.</li> <li>We can modify dunder methods for specific class. We usually don\u2019t modify dunder method but there are some cases when we have to.</li> </ul>"},{"location":"chapter_7_oop/1_oop_basic/","title":"OOP","text":"In\u00a0[36]: Copied! <pre>class BankAccount:\n    def __init__(self, n, l, b, branch):\n        self.name = n \n        self.location = l \n        self.balance = b \n        self.branch = branch\n    \n    def __str__(self):\n        return f'Account : {self.name} and location : {self.location}'\n    \n    def viewBalance(self):\n        print(f'Your balance is {self.balance}')\n    \n    def depositAmount(self, amount):\n        self.balance = self.balance + amount \n        print(f'You account has been deposited by Rs. {amount}')\n</pre> class BankAccount:     def __init__(self, n, l, b, branch):         self.name = n          self.location = l          self.balance = b          self.branch = branch          def __str__(self):         return f'Account : {self.name} and location : {self.location}'          def viewBalance(self):         print(f'Your balance is {self.balance}')          def depositAmount(self, amount):         self.balance = self.balance + amount          print(f'You account has been deposited by Rs. {amount}') In\u00a0[37]: Copied! <pre>nirajan_account = BankAccount(n = 'Nirajan', l = 'Kathmandu', b = 100, branch = 'Sanepa')\nnirajan_account.viewBalance()\nnirajan_account.depositAmount(200)\nnirajan_account.viewBalance()\n</pre> nirajan_account = BankAccount(n = 'Nirajan', l = 'Kathmandu', b = 100, branch = 'Sanepa') nirajan_account.viewBalance() nirajan_account.depositAmount(200) nirajan_account.viewBalance() <pre>Your balance is 100\nYou account has been deposited by Rs. 200\nYour balance is 300\n</pre> In\u00a0[23]: Copied! <pre>print(nirajan_account.name)\nprint(nirajan_account.balance)\n</pre> print(nirajan_account.name) print(nirajan_account.balance) <pre>Nirajan\n100\n</pre> In\u00a0[10]: Copied! <pre>class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\n  def __str__(self):\n    return f'I am {self.name} and I am {self.age} years old'\n\np1 = Person(\"John\", 36)\n\nprint(type(p1))\nprint(p1.name)\nprint(p1.age)\n</pre> class Person:   def __init__(self, name, age):     self.name = name     self.age = age    def __str__(self):     return f'I am {self.name} and I am {self.age} years old'  p1 = Person(\"John\", 36)  print(type(p1)) print(p1.name) print(p1.age) <pre>&lt;class '__main__.Person'&gt;\nJohn\n36\n</pre> In\u00a0[11]: Copied! <pre>p2 = Person('Nirajan', 25)\n\n\nprint(p2.name)\nprint(p2.age)\n</pre> p2 = Person('Nirajan', 25)   print(p2.name) print(p2.age) <pre>Nirajan\n25\n</pre> In\u00a0[12]: Copied! <pre>print(p2)\n</pre> print(p2) <pre>I am Nirajan and I am 25 years old\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[2]: Copied! <pre>p1\n</pre> p1 Out[2]: <pre>&lt;__main__.Person at 0x78308c259550&gt;</pre> In\u00a0[4]: Copied! <pre>class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\n  def __str__(self):\n    return f\"{self.name}({self.age})\"\n\np1 = Person(\"John\", 36)\n\nprint(p1)\n</pre> class Person:   def __init__(self, name, age):     self.name = name     self.age = age    def __str__(self):     return f\"{self.name}({self.age})\"  p1 = Person(\"John\", 36)  print(p1) <pre>John(36)\n</pre> In\u00a0[2]: Copied! <pre>class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\n  def __str__(self):\n    return f\"Name : {self.name} \\nAge: {self.age}\"\n  \n  def printName(self):\n    print(f\"Hello my name is {self.name}\")\n\n  def __del__(self):\n    print(f'Object {self.name} is deleted.')\n</pre> class Person:   def __init__(self, name, age):     self.name = name     self.age = age    def __str__(self):     return f\"Name : {self.name} \\nAge: {self.age}\"      def printName(self):     print(f\"Hello my name is {self.name}\")    def __del__(self):     print(f'Object {self.name} is deleted.') In\u00a0[3]: Copied! <pre>p1 = Person(\"John\", 36)\np1.printName()\n</pre> p1 = Person(\"John\", 36) p1.printName() <pre>Hello my name is John\n</pre> In\u00a0[4]: Copied! <pre>## modify the object properties\np1.age = 50\nprint(p1)\n</pre> ## modify the object properties p1.age = 50 print(p1) <pre>Name : John \nAge: 50\n</pre> In\u00a0[5]: Copied! <pre>## delete an object --&gt; this will the destructor defined above\ndel p1\n</pre> ## delete an object --&gt; this will the destructor defined above del p1 <pre>Object John is deleted.\n</pre> In\u00a0[28]: Copied! <pre>class Employee:\n    def __init__(self, name, salary):\n        self.name = name \n        self.salary = salary\n\n    def increaseSalary(self, increment_percent):\n        self.salary = self.salary + increment_percent / 100 * self.salary\n        print(f'Salary of {self.name} has been increase by {increment_percent} % and total salary = {self.salary}')\n    \n    def __str__(self):\n        return f'Employee : {self.name} \\nSalary : {self.salary}'\n</pre> class Employee:     def __init__(self, name, salary):         self.name = name          self.salary = salary      def increaseSalary(self, increment_percent):         self.salary = self.salary + increment_percent / 100 * self.salary         print(f'Salary of {self.name} has been increase by {increment_percent} % and total salary = {self.salary}')          def __str__(self):         return f'Employee : {self.name} \\nSalary : {self.salary}' In\u00a0[29]: Copied! <pre>employee_1 = Employee(name = 'John Doe', salary = 50_000)\nprint(employee_1)\n</pre> employee_1 = Employee(name = 'John Doe', salary = 50_000) print(employee_1) <pre>Employee : John Doe \nSalary : 50000\n</pre> In\u00a0[30]: Copied! <pre>employee_1.increaseSalary(increment_percent=10)\nprint(employee_1.salary)\n</pre> employee_1.increaseSalary(increment_percent=10) print(employee_1.salary) <pre>Salary of John Doe has been increase by 10 % and total salary = 55000.0\n55000.0\n</pre> In\u00a0[31]: Copied! <pre>print(employee_1)\n</pre> print(employee_1) <pre>Employee : John Doe \nSalary : 55000.0\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[1]: Copied! <pre>x = 10\n\ndef change_value():\n    x = 20\n\nchange_value()\nprint(x)\n</pre> x = 10  def change_value():     x = 20  change_value() print(x) <pre>10\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[2]: Copied! <pre>list([1, 2, 3])\n</pre> list([1, 2, 3]) Out[2]: <pre>[1, 2, 3]</pre> In\u00a0[5]: Copied! <pre>type(('hello'))\n</pre> type(('hello')) Out[5]: <pre>str</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_7_oop/1_oop_basic/#oop","title":"OOP\u00b6","text":"Feature OOP (Object-Oriented Programming) Functional Programming (Functions) Core Idea Models real-world entities as objects with data and behavior Organizes code as functions that transform data Basic Unit Class and Object Function State Maintains state using instance variables Generally stateless (no side effects) <p>Class: Blueprint for creating objects</p> <p>Object: Instance of a class</p>"},{"location":"chapter_7_oop/1_oop_basic/#oop-in-python","title":"OOP in Python\u00b6","text":"<ul> <li><p>Python is an object oriented programming language.</p> </li> <li><p>Almost everything in Python is an object, with its properties and methods.</p> </li> </ul>"},{"location":"chapter_7_oop/1_oop_basic/#init","title":"init\u00b6","text":"<ul> <li>All classes have a function called init(), which is always executed when the class is being initiated.</li> </ul>"},{"location":"chapter_7_oop/1_oop_basic/#str","title":"str\u00b6","text":"<ul> <li>The str() function controls what should be returned when the class object is represented as a string.</li> </ul>"},{"location":"chapter_7_oop/1_oop_basic/#object-methods","title":"Object Methods\u00b6","text":"<ul> <li><p>Objects can also contain methods. Methods in objects are functions that belong to the object.</p> </li> <li><p>The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.</p> </li> </ul>"},{"location":"chapter_7_oop/1_oop_basic/#example-of-object-method-with-parameter","title":"Example of Object Method with Parameter\u00b6","text":""},{"location":"chapter_7_oop/1_oop_basic/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_7_oop/1_oop_basic/#1-create-a-class-called-bankaccount-with","title":"1. Create a class called BankAccount with\u00b6","text":"<pre><code>- properties : account_number, account_name, account_balance\n- methods : addBalance, subtractBalance, viewBalance\n</code></pre> <p>Note : The methods should print statements as shown below:</p> <pre><code>addBalance -&gt; Dear {account_name}, your {account_number} has been deposited by NPR. {x_amount} and total balance = {account_balance}\n\nsubtractBalance -&gt; Dear {account_name}, your {account_number} has been withdrawn by NPR. {x_amount} and total balance = {account_balance}\n\nviewBalance -&gt; Dear {account_name}, your {account_number} has total balance NPR. {account_balance}\n</code></pre> <p>Constraints</p> <pre><code>subtractBalance: Make sure that the account_balance is sufficient before we deduct the amount\n</code></pre>"},{"location":"chapter_7_oop/1_oop_basic/#after-completing-above-tasks","title":"After completing above tasks:\u00b6","text":"<ul> <li>create a method in the above class to transfer money from one account to another...</li> </ul> <pre><code>john_account = BankAccount(......)\nalice_account = BankAccount(......)\n\n# transfer money from john account to alice account\njohn_account.transfer(alice_account, amount)\n\n</code></pre>"},{"location":"chapter_7_oop/1_oop_basic/#dunder-methods-in-class","title":"Dunder Methods in Class\u00b6","text":"Dunder Method Purpose / Description Example Usage <code>__init__</code> Constructor, called when a new instance is created. <code>obj = MyClass()</code> <code>__del__</code> Destructor, called when an object is deleted. <code>del obj</code> <code>__str__</code> Returns a human-readable string representation. <code>print(obj)</code> <code>__repr__</code> Returns an unambiguous string representation (used by <code>repr()</code>, debugging). <code>repr(obj)</code> <code>__len__</code> Returns the length of the object. <code>len(obj)</code> <code>__getitem__</code> Used for indexing (<code>obj[key]</code>). <code>obj[0]</code> <code>__setitem__</code> Assigns a value to the indexed item. <code>obj[0] = \"value\"</code> <code>__delitem__</code> Deletes an item at the specified index. <code>del obj[0]</code> <code>__iter__</code> Returns an iterator object (used in loops). <code>for x in obj:</code> <code>__next__</code> Returns the next item from the iterator. <code>next(obj)</code> <code>__contains__</code> Implements membership test (<code>in</code> keyword). <code>\"item\" in obj</code> <code>__call__</code> Makes an object callable like a function. <code>obj()</code> <code>__eq__</code> Implements equality comparison (<code>==</code>). <code>obj1 == obj2</code> <code>__ne__</code> Implements inequality comparison (<code>!=</code>). <code>obj1 != obj2</code> <code>__lt__</code> Less than (<code>&lt;</code>). <code>obj1 &lt; obj2</code> <code>__le__</code> Less than or equal (<code>&lt;=</code>). <code>obj1 &lt;= obj2</code> <code>__gt__</code> Greater than (<code>&gt;</code>). <code>obj1 &gt; obj2</code> <code>__ge__</code> Greater than or equal (<code>&gt;=</code>). <code>obj1 &gt;= obj2</code> <code>__add__</code> Implements addition (<code>+</code>). <code>obj1 + obj2</code> <code>__sub__</code> Implements subtraction (<code>-</code>). <code>obj1 - obj2</code> <code>__mul__</code> Implements multiplication (<code>*</code>). <code>obj1 * obj2</code> <code>__truediv__</code> Implements division (<code>/</code>). <code>obj1 / obj2</code> <code>__mod__</code> Implements modulo (<code>%</code>). <code>obj1 % obj2</code> <code>__pow__</code> Implements exponentiation (<code>**</code>). <code>obj1 ** obj2</code> <code>__bool__</code> Returns the Boolean value of an object (used by <code>bool()</code> and in conditionals). <code>bool(obj)</code> <code>__enter__</code> Used in context managers (<code>with</code> statements). <code>with obj:</code> <code>__exit__</code> Handles exit logic for context managers. <code>with obj:</code>"},{"location":"chapter_7_oop/2_oop_4_pillars/","title":"4 Pillars of OOP","text":"In\u00a0[8]: Copied! <pre>class BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.__balance = balance  # private attribute\n\n    def get_balance(self):\n        return self.__balance\n</pre> class BankAccount:     def __init__(self, name, balance):         self.name = name         self.__balance = balance  # private attribute      def get_balance(self):         return self.__balance In\u00a0[9]: Copied! <pre>acc = BankAccount(\"Nirajan\", 1000)\nprint(acc.name)\n\n# This will give error as we are trying to access private attribute\n# print(acc.__balance) \n</pre> acc = BankAccount(\"Nirajan\", 1000) print(acc.name)  # This will give error as we are trying to access private attribute # print(acc.__balance)  <pre>Nirajan\n</pre> In\u00a0[11]: Copied! <pre>class Person:\n  def __init__(self, fname, lname):\n    self.firstname = fname\n    self.lastname = lname\n\n  def printname(self):\n    print(self.firstname, self.lastname)\n</pre> class Person:   def __init__(self, fname, lname):     self.firstname = fname     self.lastname = lname    def printname(self):     print(self.firstname, self.lastname)  In\u00a0[12]: Copied! <pre>x = Person(\"John\", \"Doe\")\nx.printname()\n</pre> x = Person(\"John\", \"Doe\") x.printname() <pre>John Doe\n</pre> In\u00a0[13]: Copied! <pre>class Student(Person):\n  pass\n</pre> class Student(Person):   pass In\u00a0[14]: Copied! <pre>x = Student(\"Mike\", \"Olsen\")\nx.printname()\n</pre> x = Student(\"Mike\", \"Olsen\") x.printname() <pre>Mike Olsen\n</pre> In\u00a0[23]: Copied! <pre>class Student(Person):\n    def __init__(self, fname, lname):\n        Person.__init__(self, fname, lname)\n</pre> class Student(Person):     def __init__(self, fname, lname):         Person.__init__(self, fname, lname) In\u00a0[24]: Copied! <pre>x = Student(\"Mike\", \"Olsen\")\nx.printname()\n</pre> x = Student(\"Mike\", \"Olsen\") x.printname() <pre>Mike Olsen\n</pre> In\u00a0[25]: Copied! <pre>class Student(Person):\n  def __init__(self, fname, lname):\n    super().__init__(fname, lname)\n</pre> class Student(Person):   def __init__(self, fname, lname):     super().__init__(fname, lname) In\u00a0[26]: Copied! <pre>x = Student(\"Mike\", \"Olsen\")\nx.printname()\n</pre> x = Student(\"Mike\", \"Olsen\") x.printname() <pre>Mike Olsen\n</pre> In\u00a0[28]: Copied! <pre>class Student(Person):\n  def __init__(self, fname, lname, graduationyear):\n    super().__init__(fname, lname)\n    self.graduationyear = graduationyear\n\n  def welcome(self):\n    print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)\n</pre> class Student(Person):   def __init__(self, fname, lname, graduationyear):     super().__init__(fname, lname)     self.graduationyear = graduationyear    def welcome(self):     print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)  In\u00a0[30]: Copied! <pre>x = Student(fname='nirajan', lname = 'bekoju', graduationyear = 2024)\nx.welcome()\n</pre> x = Student(fname='nirajan', lname = 'bekoju', graduationyear = 2024) x.welcome() <pre>Welcome nirajan bekoju to the class of 2024\n</pre> In\u00a0[35]: Copied! <pre>class Father:\n    def father_info(self):\n        print(\"Father's name is John\")\n\nclass Mother:\n    def mother_info(self):\n        print(\"Mother's name is Jane\")\n\nclass Child(Father, Mother):\n    def child_info(self):\n        print(\"Child's name is Alex\")\n</pre> class Father:     def father_info(self):         print(\"Father's name is John\")  class Mother:     def mother_info(self):         print(\"Mother's name is Jane\")  class Child(Father, Mother):     def child_info(self):         print(\"Child's name is Alex\") In\u00a0[36]: Copied! <pre># Test\nc = Child()\nc.father_info()\nc.mother_info()\nc.child_info()\n</pre> # Test c = Child() c.father_info() c.mother_info() c.child_info() <pre>Father's name is John\nMother's name is Jane\nChild's name is Alex\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_7_oop/2_oop_4_pillars/#4-pillars-of-oop","title":"4 Pillars of OOP\u00b6","text":"<p>The 4 pillars of Object-Oriented Programming (OOP) are the foundational principles that guide how objects interact in software. These are:</p> <ul> <li><p>Encapsulation</p> </li> <li><p>Inheritance</p> </li> <li><p>Abstraction</p> </li> <li><p>Polymorphism</p> </li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#encapsulation-binding-data-and-methods-together-and-hiding-internal-state","title":"Encapsulation: Binding data and methods together and hiding internal state.\u00b6","text":"<ul> <li>Encapsulation allows an object to hide its internal state and only allow access through public methods.</li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#inheritence","title":"Inheritence\u00b6","text":"<ul> <li><p>Inheritance allows us to define a class that inherits all the methods and properties from another class.</p> </li> <li><p>Parent class is the class being inherited from, also called base class.</p> </li> <li><p>Child class is the class that inherits from another class, also called derived class.</p> </li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#create-a-parent-class","title":"Create a Parent Class\u00b6","text":"<ul> <li>Any class can be a parent class, so the syntax is the same as creating any other class:</li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#create-a-child-class","title":"Create a Child Class\u00b6","text":"<ul> <li>To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:</li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#add-the-init-function-in-child-class","title":"Add the init() Function in Child Class\u00b6","text":"<ul> <li>When you add the init() function, the child class will no longer inherit the parent's init() function.</li> </ul> <p>Note: The child's init() function overrides the inheritance of the parent's init() function.</p> <ul> <li>To keep the inheritance of the parent's init() function, add a call to the parent's init() function:</li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#using-the-super-function","title":"Using the super() Function\u00b6","text":"<ul> <li><p>Python also has a super() function that will make the child class inherit all the methods and properties from its parent:</p> </li> <li><p>By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.</p> </li> </ul>"},{"location":"chapter_7_oop/2_oop_4_pillars/#add-properties","title":"Add Properties\u00b6","text":""},{"location":"chapter_7_oop/2_oop_4_pillars/#exercise","title":"Exercise\u00b6","text":"<p>Create a class Vehicle with brand and year. Create a subclass Car that inherits from Vehicle and adds a new property model.</p> <p>Also create a display_info() method in the subclass Car which display brand, year and model.</p>"},{"location":"chapter_7_oop/2_oop_4_pillars/#multiple-inheritence","title":"Multiple Inheritence\u00b6","text":""},{"location":"chapter_7_oop/OOP/","title":"Basics of OOP","text":"In\u00a0[\u00a0]: Copied! <pre>class User:\n    def hello(self):\n        print(\"Hello world!\")\n</pre> class User:     def hello(self):         print(\"Hello world!\") In\u00a0[\u00a0]: Copied! <pre>user1 = User()\nuser1.hello()\n</pre> user1 = User() user1.hello() <pre>Hello world!\n</pre> In\u00a0[23]: Copied! <pre>class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def run(self):\n        print(f\"Hello, {self.name} is running.\")\n\n    def shout(self):\n        print(f\"{self.name} is shouting.\")\n</pre> class User:     def __init__(self, name, age):         self.name = name         self.age = age          def run(self):         print(f\"Hello, {self.name} is running.\")      def shout(self):         print(f\"{self.name} is shouting.\") In\u00a0[25]: Copied! <pre>obj1 = User(\"Nirajan\", 24)\n</pre> obj1 = User(\"Nirajan\", 24) In\u00a0[26]: Copied! <pre>obj1.name\n</pre> obj1.name Out[26]: <pre>'Nirajan'</pre> In\u00a0[27]: Copied! <pre>obj1.attack = 50\n</pre> obj1.attack = 50 In\u00a0[28]: Copied! <pre>obj1.run()\n</pre> obj1.run() <pre>Hello, Nirajan is running.\n</pre> In\u00a0[29]: Copied! <pre>obj1.shout()\n</pre> obj1.shout() <pre>Nirajan is shouting.\n</pre> In\u00a0[30]: Copied! <pre>obj1.attack\n</pre> obj1.attack Out[30]: <pre>50</pre> In\u00a0[31]: Copied! <pre>class PlayerCharacter: # CamelCase for classes\n\tdef __init__(self, name, age):\n\t\tself.name = name\n\t\tself.age = age\n\t\n\tdef run(self):\n\t\tprint(f\"Player {self.name} of age {self.age} is running.\")\n</pre> class PlayerCharacter: # CamelCase for classes \tdef __init__(self, name, age): \t\tself.name = name \t\tself.age = age \t \tdef run(self): \t\tprint(f\"Player {self.name} of age {self.age} is running.\") In\u00a0[32]: Copied! <pre>player1 = PlayerCharacter(\"Nirajan\", 24)\nplayer2 = PlayerCharacter(\"John\", 20)\n\nplayer2.attack = 50  # Creating attribute\n\nprint(player1.age) # 24\nprint(player2.name) # John\nplayer1.run() # Player Nirajan of age 24 is running.\nprint(player2.attack) # 50 \n</pre> player1 = PlayerCharacter(\"Nirajan\", 24) player2 = PlayerCharacter(\"John\", 20)  player2.attack = 50  # Creating attribute  print(player1.age) # 24 print(player2.name) # John player1.run() # Player Nirajan of age 24 is running. print(player2.attack) # 50  <pre>24\nJohn\nPlayer Nirajan of age 24 is running.\n50\n</pre> In\u00a0[\u00a0]: Copied! <pre>class PlayerCharacter:\n\tmembership = True\n\tdef __init__(self, name):\n\t\tself.name = name\n\t\n\tdef shout(self):\n\t\tif PlayerCharacter.membership:\n\t\t\treturn self.name \n\t\t\t# return PlayerCharacter.name # This gives error because name is class attribute\n\t\telse:\n\t\t\treturn \"no membership\"\n\nobj1 = PlayerCharacter(\"Nirajan\")\nprint(obj1.shout()) # Nirajan\n</pre> class PlayerCharacter: \tmembership = True \tdef __init__(self, name): \t\tself.name = name \t \tdef shout(self): \t\tif PlayerCharacter.membership: \t\t\treturn self.name  \t\t\t# return PlayerCharacter.name # This gives error because name is class attribute \t\telse: \t\t\treturn \"no membership\"  obj1 = PlayerCharacter(\"Nirajan\") print(obj1.shout()) # Nirajan <pre>Nirajan\n</pre> In\u00a0[37]: Copied! <pre>class PlayerCharacter:\n\tdef __init__(self, name, age):\n\t\tself.name = name\n\t\tself.age = age\n\t\n\tdef run(self):\n\t\tprint(\"Run\")\n\nplayer1 = PlayerCharacter(\"Nirajan\", 24)\n</pre> class PlayerCharacter: \tdef __init__(self, name, age): \t\tself.name = name \t\tself.age = age \t \tdef run(self): \t\tprint(\"Run\")  player1 = PlayerCharacter(\"Nirajan\", 24) In\u00a0[\u00a0]: Copied! <pre>player1.run()\n</pre> player1.run() <pre>Run\n</pre> In\u00a0[1]: Copied! <pre>class PlayerCharacter:\n\tdef __init__(self, name, age):\n\t\tself.name = name\n\t\tself.age = age\n\t\n\tdef run(self):\n\t\tprint(\"Run\")\n\nplayer1 = PlayerCharacter(\"Nirajan\", 24)\nplayer1.run()\n\nplayer2 = PlayerCharacter(\"John\", 25)\nplayer2.run()\n</pre> class PlayerCharacter: \tdef __init__(self, name, age): \t\tself.name = name \t\tself.age = age \t \tdef run(self): \t\tprint(\"Run\")  player1 = PlayerCharacter(\"Nirajan\", 24) player1.run()  player2 = PlayerCharacter(\"John\", 25) player2.run() <pre>Run\nRun\n</pre> In\u00a0[41]: Copied! <pre>\"string\".upper()\n</pre> \"string\".upper() Out[41]: <pre>'STRING'</pre> <p>Here, when we call run, we don\u2019t really care how run is implemented. All we know is that player1 has access to run method and we can use it.</p> <p>There is a concept of protected and private in abstraction.</p> <ul> <li>Using the single underscore makes <code>protected</code> members or methods, but it doesn\u2019t actually do anything other than provide suggestion to other programmers not to use them.</li> <li>A double underscore is a bit tricker. These are refers as <code>private</code> members or methods, but they aren\u2019t really private either since we can still access it.</li> </ul> In\u00a0[4]: Copied! <pre>class PlayerCharacter:\n    def __init__(self, name, age):\n        self._name = name        # Protected member\n        self.__age = age         # Private member\n\n    def _run(self):              # Protected method\n        print(\"Run\")\n        print(self.__age)\n\nplayer1 = PlayerCharacter(\"Nirajan\", 24)\n\n# Direct access to __age will raise an AttributeError\n# print(player1.__age)          # AttributeError\n\n# Correct way to access the private variable (not recommended in practice)\nprint(player1._PlayerCharacter__age)  # This will print: 24\n\n# player1._run()\n</pre> class PlayerCharacter:     def __init__(self, name, age):         self._name = name        # Protected member         self.__age = age         # Private member      def _run(self):              # Protected method         print(\"Run\")         print(self.__age)  player1 = PlayerCharacter(\"Nirajan\", 24)  # Direct access to __age will raise an AttributeError # print(player1.__age)          # AttributeError  # Correct way to access the private variable (not recommended in practice) print(player1._PlayerCharacter__age)  # This will print: 24  # player1._run() <pre>24\n</pre> In\u00a0[\u00a0]: Copied! <pre>class User(): # Parent class\n\tdef sign_in(self):\n\t\tprint(\"logged in\")\n</pre> class User(): # Parent class \tdef sign_in(self): \t\tprint(\"logged in\") In\u00a0[\u00a0]: Copied! <pre>class Wizard(User): # Child class\n\tdef __init__(self, name, power):\n\t\tself.name = name\n\t\tself.power = power\n\n\tdef attack(self):\n\t\tprint(f\"attacking with power of {self.power}\")\n\t\t\nclass Archer(User): # Child class\n\tdef __init__(self, name, num_arrows):\n\t\tself.name = name\n\t\tself.power = num_arrows\n\n\tdef attack(self):\n\t\tprint(\"attacking with arrows\")\n</pre> class Wizard(User): # Child class \tdef __init__(self, name, power): \t\tself.name = name \t\tself.power = power  \tdef attack(self): \t\tprint(f\"attacking with power of {self.power}\") \t\t class Archer(User): # Child class \tdef __init__(self, name, num_arrows): \t\tself.name = name \t\tself.power = num_arrows  \tdef attack(self): \t\tprint(\"attacking with arrows\") In\u00a0[62]: Copied! <pre>wizard1 = Wizard(\"Merlin\", 50)\nwizard1.attack() # attacking with power of 50\nwizard1.sign_in()\n\narcher1 = Archer(\"Robin\", 100)\narcher1.attack() # attacking with arrows\n</pre> wizard1 = Wizard(\"Merlin\", 50) wizard1.attack() # attacking with power of 50 wizard1.sign_in()  archer1 = Archer(\"Robin\", 100) archer1.attack() # attacking with arrows <pre>attacking with power of 50\nlogged in\nattacking with arrows\n</pre> In\u00a0[5]: Copied! <pre>class User(): # Parent class\n\tdef __init__(self, email, address):\n\t\tself.email = email\n\t\tself.address = address\n\n\tdef attack(self):\n\t\tprint(\"do nothing\")\n\nclass Wizard(User): # Child class\n\tdef __init__(self, name, power, email, address):\n\t\tsuper().__init__(email, address) # can also be done by User.__init__(self, email, address)\n\t\tself.name = name\n\t\tself.power = power\n\n\tdef attack(self):\n\t\tprint(f\"attacking with power of {self.power}\")\n\nwizard1 = Wizard(\"Nirajan\", 50, \"nirajan@gmail.com\", \"Bhaktapur\")\nprint(wizard1.email) # nirajan@gmail.com\n</pre> class User(): # Parent class \tdef __init__(self, email, address): \t\tself.email = email \t\tself.address = address  \tdef attack(self): \t\tprint(\"do nothing\")  class Wizard(User): # Child class \tdef __init__(self, name, power, email, address): \t\tsuper().__init__(email, address) # can also be done by User.__init__(self, email, address) \t\tself.name = name \t\tself.power = power  \tdef attack(self): \t\tprint(f\"attacking with power of {self.power}\")  wizard1 = Wizard(\"Nirajan\", 50, \"nirajan@gmail.com\", \"Bhaktapur\") print(wizard1.email) # nirajan@gmail.com <pre>nirajan@gmail.com\n</pre> In\u00a0[72]: Copied! <pre>class A:\n    def greet(self):\n        print(\"Hello from A\")\n\nclass B:\n    def greet(self):\n        print(\"Hello from B\")\n\n    def run(self):\n        print(\"Run\")\n\nclass C(A, B):\n    # def greet(self):\n    #     print(\"greet from C\")\n    pass\n\nobj = C()\nobj.greet()\nobj.run() # Hello from A\n\nprint(C.mro())\n</pre> class A:     def greet(self):         print(\"Hello from A\")  class B:     def greet(self):         print(\"Hello from B\")      def run(self):         print(\"Run\")  class C(A, B):     # def greet(self):     #     print(\"greet from C\")     pass  obj = C() obj.greet() obj.run() # Hello from A  print(C.mro()) <pre>Hello from A\nRun\n[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;]\n</pre> <p>The reason C.greet() calls the method from A is because of Python's Method Resolution Order (MRO), which determines the order in which classes are searched when executing a method. MRO is left-to-right, depth-first (C3 linearization).</p> <p>No need to know this algorithm.</p> In\u00a0[66]: Copied! <pre>print(C.__mro__)\n# OR\nprint(C.mro()) # (&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)\n</pre> print(C.__mro__) # OR print(C.mro()) # (, , , ) <pre>(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)\n[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;]\n</pre> In\u00a0[6]: Copied! <pre>class User: # Parent class\n\tdef sign_in(self):\n\t\tprint(\"logged in\")\n\n\tdef attack(self):\n\t\tprint(\"so nothing\")\n\t\t\nclass Wizard(User): # Child class\n\tdef __init__(self, name, power):\n\t\tself.name = name\n\t\tself.power = power\n\n\tdef attack(self):\n\t\tprint(f\"attacking with power of {self.power}\")\n\t\t\n\tdef greet(self):\n\t\tprint(\"hello\")\n\nclass Archer(User): # Child class\n\tdef __init__(self, name, num_arrows):\n\t\tself.name = name\n\t\tself.power = num_arrows\n\n\tdef attack(self):\n\t\tprint(\"attacking with arrows\")\n</pre> class User: # Parent class \tdef sign_in(self): \t\tprint(\"logged in\")  \tdef attack(self): \t\tprint(\"so nothing\") \t\t class Wizard(User): # Child class \tdef __init__(self, name, power): \t\tself.name = name \t\tself.power = power  \tdef attack(self): \t\tprint(f\"attacking with power of {self.power}\") \t\t \tdef greet(self): \t\tprint(\"hello\")  class Archer(User): # Child class \tdef __init__(self, name, num_arrows): \t\tself.name = name \t\tself.power = num_arrows  \tdef attack(self): \t\tprint(\"attacking with arrows\") In\u00a0[7]: Copied! <pre>wizard1 = Wizard(\"Merlin\", 50) \narcher1 = Archer(\"Robin\", 100)\n\nwizard1.attack() # attacking with power of 50\narcher1.attack() # attacking with arrows\n</pre> wizard1 = Wizard(\"Merlin\", 50)  archer1 = Archer(\"Robin\", 100)  wizard1.attack() # attacking with power of 50 archer1.attack() # attacking with arrows <pre>attacking with power of 50\nattacking with arrows\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_7_oop/OOP/#object-oriented-programming-oop","title":"Object-Oriented Programming (OOP)\u00b6","text":"<p>Programming paradigm that organizes code into objects.</p> <ul> <li>data (attributes)</li> <li>behavior (methods)</li> </ul> <p>Example:</p> <ul> <li>It helps structure code using real-world entities.</li> <li>A car (object) has attributes (color, model) and behaviors (drive, stop).</li> </ul> <p>Classes and Objects</p> <ul> <li>Classes are blueprints for creating objects, and objects are instances of classes.</li> <li>Objects store attributes (variables) and methods (functions) that define their behavior.</li> </ul>"},{"location":"chapter_7_oop/OOP/#the-init-method-constructor","title":"The init Method (Constructor) :\u00b6","text":"<ul> <li><code>__init__</code> is a special method (dunder method) that initializes object attributes when an instance is created. It is automatically called when a new object is instantiated.</li> <li><code>Self</code> represents the instance of the class and allows access to its attributes and methods. It must be the first parameter in instance methods but is not a keyword (can be renamed, though not recommended)</li> </ul>"},{"location":"chapter_7_oop/OOP/#class-attribute","title":"Class attribute\u00b6","text":"<p>Class attributes are static unlike attributes used in <code>_init__</code>. They are same for all objects and are accessed by using class name directly.</p>"},{"location":"chapter_7_oop/OOP/#four-pillars-of-oop","title":"Four pillars of OOP\u00b6","text":""},{"location":"chapter_7_oop/OOP/#encapsulation","title":"Encapsulation:\u00b6","text":"<p>Binding data (attribute) and functions (methods) that manipulate the data.</p> <p>Also in Python code, when we create a string, because of encapsulation we have different functions and methods available that we can access. For example: upper(), count(), reverse(), etc.</p>"},{"location":"chapter_7_oop/OOP/#abstraction","title":"Abstraction:\u00b6","text":"<p>Hiding of information or abstracting away information and giving access to only what\u2019s necessary.</p>"},{"location":"chapter_7_oop/OOP/#inheritance","title":"Inheritance\u00b6","text":"<p>Inheritance allows us to define a class that inherits all the methods and properties from another class.</p> <p>Parent class is the class being inherited from, also called base class.</p> <p>Child class is the class that inherits from another class, also called derived class.</p>"},{"location":"chapter_7_oop/OOP/#super","title":"Super()\u00b6","text":"<p>In inheritance, when we want to use attribute from main class to sub class, we can do as:</p>"},{"location":"chapter_7_oop/OOP/#multiple-inheritance","title":"Multiple Inheritance\u00b6","text":"<p>Allows a class to inherit from more than one parent class.</p>"},{"location":"chapter_7_oop/OOP/#polymorphism","title":"Polymorphism\u00b6","text":"<ul> <li>Poly means many and morphism means form so polymorphism means having many form.</li> <li>In python, polymorphism refers to the way in which object classes can share the same method name. But these method names can act differently based on what object calls them.</li> </ul>"},{"location":"chapter_7_oop/OOP/#dunder-methods-magic-method","title":"Dunder Methods (Magic method)\u00b6","text":"<ul> <li>Special methods that starts and end with double underscores.</li> <li>When we add two numbers using the + operator, internally the <code>__add__()</code> method will be called.</li> <li>We can modify dunder methods for specific class. We usually don\u2019t modify dunder method but there are some cases when we have to.</li> </ul>"},{"location":"chapter_8_decorators_and_generators/decorators/","title":"Decorators","text":"In\u00a0[\u00a0]: Copied! <pre>def add(x, y):\n    return x + y\n\nf = add  # f is now a reference to the function 'add'\nprint(f(3, 4))  # prints 7\n</pre> def add(x, y):     return x + y  f = add  # f is now a reference to the function 'add' print(f(3, 4))  # prints 7 In\u00a0[5]: Copied! <pre>## Argument and Parameter in Normal Function\n\ndef add(x, y):  ## x, y are the parameters of this function\n    return x + y\n\naddition_result = add(10, 20) ## 10, 20 are the arguments\nprint(addition_result) # pring 30\n</pre> ## Argument and Parameter in Normal Function  def add(x, y):  ## x, y are the parameters of this function     return x + y  addition_result = add(10, 20) ## 10, 20 are the arguments print(addition_result) # pring 30 <pre>30\n</pre> In\u00a0[6]: Copied! <pre>## Example of PASS FUNCTION AS AN ARGUMENT\n#### We will pass this add(...) function as an argument in calculate() function\ndef add(x, y):\n    return x + y\n\ndef calculate(func, x, y):\n    return func(x, y)\n\nresult = calculate(add, 4, 6)\nprint(result)  # prints 10\n</pre> ## Example of PASS FUNCTION AS AN ARGUMENT #### We will pass this add(...) function as an argument in calculate() function def add(x, y):     return x + y  def calculate(func, x, y):     return func(x, y)  result = calculate(add, 4, 6) print(result)  # prints 10 <pre>10\n</pre> In\u00a0[7]: Copied! <pre># Nested for loop example\nfor i in range(1, 4):  # Outer loop\n   for j in range(1, 4):  # Inner loop\n       print(f\"i={i}, j={j}\")\n</pre> # Nested for loop example for i in range(1, 4):  # Outer loop    for j in range(1, 4):  # Inner loop        print(f\"i={i}, j={j}\") <pre>i=1, j=1\ni=1, j=2\ni=1, j=3\ni=2, j=1\ni=2, j=2\ni=2, j=3\ni=3, j=1\ni=3, j=2\ni=3, j=3\n</pre> In\u00a0[8]: Copied! <pre>### Nested Function Example\ndef outer(x):   ## Outer Function\n    def inner(y):  ## Inner Function\n        return x + y\n    return inner\n\nadd_five = outer(5)\nresult = add_five(6)\nprint(result)  # prints 11\n</pre> ### Nested Function Example def outer(x):   ## Outer Function     def inner(y):  ## Inner Function         return x + y     return inner  add_five = outer(5) result = add_five(6) print(result)  # prints 11 <pre>11\n</pre> In\u00a0[\u00a0]: Copied! <pre>## An Example of Nested Function\ndef greeting(name):  ## Outer Function\n    def hello(): ## Inner Function\n        return \"Hello, \" + name + \"!\"\n    return hello\n\ngreet = greeting(\"Atlantis\")\nprint(greet())  # prints \"Hello, Atlantis!\"\n</pre> ## An Example of Nested Function def greeting(name):  ## Outer Function     def hello(): ## Inner Function         return \"Hello, \" + name + \"!\"     return hello  greet = greeting(\"Atlantis\") print(greet())  # prints \"Hello, Atlantis!\" <pre>Hello, Atlantis!\n</pre> In\u00a0[\u00a0]: Copied! <pre>## Because This function takes a function as an argument and return a function object after decorating the original function\n## This is the Decorator Function\ndef make_pretty(func): \n    def inner():\n        print(\"I got decorated\")\n        func()\n    return inner\n\n\n## we will decorate this function use make_pretty decorator\ndef ordinary():\n    print(\"I am ordinary\")\n</pre> ## Because This function takes a function as an argument and return a function object after decorating the original function ## This is the Decorator Function def make_pretty(func):      def inner():         print(\"I got decorated\")         func()     return inner   ## we will decorate this function use make_pretty decorator def ordinary():     print(\"I am ordinary\") In\u00a0[15]: Copied! <pre>decorated_func = make_pretty(ordinary)\ndecorated_func()\n</pre> decorated_func = make_pretty(ordinary) decorated_func() <pre>I got decorated\nI am ordinary\n</pre> In\u00a0[16]: Copied! <pre>def make_pretty(func):\n\n    def inner():\n        print(\"I got decorated\")\n        func()\n    return inner\n\n@make_pretty\ndef ordinary():\n    print(\"I am ordinary\")\n\nordinary()  \n</pre> def make_pretty(func):      def inner():         print(\"I got decorated\")         func()     return inner  @make_pretty def ordinary():     print(\"I am ordinary\")  ordinary()   <pre>I got decorated\nI am ordinary\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_8_decorators_and_generators/decorators/#function-call-vs-function-object","title":"Function Call vs Function Object\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#pass-function-as-an-argument","title":"Pass Function as an Argument\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#nested-function","title":"Nested Function\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#return-a-function-as-a-value","title":"Return a Function as a Value\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#python-decorators","title":"Python Decorators\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#symbol-with-a-decorator","title":"@Symbol with a Decorator\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/decorators/#1-create-a-decorator-to-print-before-and-after-a-function-call","title":"1. Create a Decorator to Print Before and After a Function Call\u00b6","text":"<p>Goal: Write a decorator named <code>announce</code> that prints a message before and after the decorated function is called.</p>"},{"location":"chapter_8_decorators_and_generators/decorators/#instructions","title":"Instructions:\u00b6","text":"<ol> <li><p>Define a decorator function <code>announce</code> that:</p> <ul> <li>Takes a function as an argument.</li> <li>Defines an inner wrapper function that:<ul> <li>Prints <code>\"Starting the function...\"</code>.</li> <li>Calls the original function.</li> <li>Prints <code>\"Function finished!\"</code>.</li> </ul> </li> <li>Returns the wrapper function.</li> </ul> </li> <li><p>Apply the <code>announce</code> decorator to a simple function <code>greet()</code> that prints <code>\"Hello, world!\"</code>.</p> </li> <li><p>Call the decorated <code>greet()</code> function and observe the output.</p> </li> </ol>"},{"location":"chapter_8_decorators_and_generators/decorators/#starter-code","title":"Starter code:\u00b6","text":"<pre>def announce(func):\n    # Define your wrapper function here\n    pass\n\n@announce\ndef greet():\n    print(\"Hello, world!\")\n\ngreet()\n</pre>"},{"location":"chapter_8_decorators_and_generators/generators/","title":"Generators","text":"In\u00a0[\u00a0]: Copied! <pre>l1 = [1, 2, 5, 7, 2, 3]\noutput_l1 = [x ** 2 for x in l1]\n\nprint(type(output_l1)) ## &lt;class 'list'&gt;\nprint(output_l1) ## [1, 4, 25, 49, 4, 9]\n</pre> l1 = [1, 2, 5, 7, 2, 3] output_l1 = [x ** 2 for x in l1]  print(type(output_l1)) ##  print(output_l1) ## [1, 4, 25, 49, 4, 9] <pre>&lt;class 'list'&gt;\n[1, 4, 25, 49, 4, 9]\n</pre> In\u00a0[5]: Copied! <pre>l1 = [1, 2, 5, 7, 2, 3]\ngenerator_example = (x ** 2 for x in l1)\n\nprint(type(generator_example)) ## &lt;class 'generator'&gt;\n</pre> l1 = [1, 2, 5, 7, 2, 3] generator_example = (x ** 2 for x in l1)  print(type(generator_example)) ##  <pre>&lt;class 'generator'&gt;\n</pre> In\u00a0[6]: Copied! <pre>for num in generator_example:\n    print(num)\n</pre> for num in generator_example:     print(num) <pre>1\n4\n25\n49\n4\n9\n</pre> In\u00a0[11]: Copied! <pre>def my_generator(n):\n    value = 0\n    while value &lt; n:\n        yield value\n        value += 1\n</pre> def my_generator(n):     value = 0     while value &lt; n:         yield value         value += 1 In\u00a0[22]: Copied! <pre>k = 5\ngen = my_generator(k)\n\nfor num in gen:\n    print(num)\n</pre> k = 5 gen = my_generator(k)  for num in gen:     print(num) <pre>0\n1\n2\n3\n4\n</pre> In\u00a0[23]: Copied! <pre>gen_list = list(range(k))\n</pre> gen_list = list(range(k)) In\u00a0[24]: Copied! <pre>import sys \n\nprint(\"Memory used by generator:\", sys.getsizeof(gen), \"bytes\")\nprint(\"Memory used by list     :\", sys.getsizeof(gen_list), \"bytes\")\n</pre> import sys   print(\"Memory used by generator:\", sys.getsizeof(gen), \"bytes\") print(\"Memory used by list     :\", sys.getsizeof(gen_list), \"bytes\") <pre>Memory used by generator: 192 bytes\nMemory used by list     : 104 bytes\n</pre> In\u00a0[5]: Copied! <pre>def fun1():\n    yield 1\n    yield 2 \n</pre> def fun1():     yield 1     yield 2  In\u00a0[\u00a0]: Copied! <pre>generator = fun1()\n\nprint(next(generator)) # 1\nprint(next(generator)) # 2 \nprint(next(generator)) # Stop Iteration Error\n</pre> generator = fun1()  print(next(generator)) # 1 print(next(generator)) # 2  print(next(generator)) # Stop Iteration Error In\u00a0[27]: Copied! <pre>class CountUpTo:\n    def __init__(self, max):\n        self.max = max\n        self.current = 0\n\n    def __iter__(self): ## This dunder method makes the Class iterable\n        return self  \n\n    def __next__(self): ## This generates the next value of the Generator\n        if self.current &lt; self.max:\n            num = self.current\n            self.current += 1\n            return num\n        else:\n            raise StopIteration  # Signals the end of the iteration\n</pre> class CountUpTo:     def __init__(self, max):         self.max = max         self.current = 0      def __iter__(self): ## This dunder method makes the Class iterable         return self        def __next__(self): ## This generates the next value of the Generator         if self.current &lt; self.max:             num = self.current             self.current += 1             return num         else:             raise StopIteration  # Signals the end of the iteration In\u00a0[28]: Copied! <pre># Using the generator class\ncounter = CountUpTo(5)\nfor num in counter:\n    print(num)\n</pre> # Using the generator class counter = CountUpTo(5) for num in counter:     print(num) <pre>0\n1\n2\n3\n4\n</pre>"},{"location":"chapter_8_decorators_and_generators/generators/#basic-generator","title":"Basic Generator\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#generator-function","title":"Generator Function\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#memory-efficiency","title":"Memory Efficiency\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#stop-iteration-error","title":"Stop Iteration Error\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#generator-function-using-class","title":"Generator Function Using Class\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#1-create-a-generator-function-char_by_chartext-that-yields-one-character-at-a-time-from-a-given-string","title":"1. Create a generator function char_by_char(text) that yields one character at a time from a given string.\u00b6","text":""},{"location":"chapter_8_decorators_and_generators/generators/#2-create-a-generator-function-to-yield-fibonacci-numbers","title":"2. Create a generator function to yield fibonacci numbers.\u00b6","text":"<pre><code>Template:\ndef fibonacci_generator(n):\n    pass\n\n\nfor num in fibonacci_generator(7):\n    print(num)\n\nOutput:\n0\n1\n1\n2\n3\n5\n8\n</code></pre>"},{"location":"chapter_9_error_handling_logging_and_debugging/debuggin/","title":"Debuggin","text":"In\u00a0[\u00a0]: Copied! <pre>def power(input_list):\n    '''\n    return square of number if even and cube of number of if odd\n    '''\n    output_list = []\n    for num in input_list:\n        if num % 2 == 0:\n            output_list.append(num ** 2)\n        else:\n            output_list.append(num**3)\n    return output_list\n</pre> def power(input_list):     '''     return square of number if even and cube of number of if odd     '''     output_list = []     for num in input_list:         if num % 2 == 0:             output_list.append(num ** 2)         else:             output_list.append(num**3)     return output_list In\u00a0[\u00a0]: Copied! <pre>input_list = [25, 9, 8, 3, 6]\n</pre> input_list = [25, 9, 8, 3, 6] In\u00a0[\u00a0]: Copied! <pre>output_list = power(input_list)\nprint(output_list)\n</pre> output_list = power(input_list) print(output_list)"},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/","title":"Exercise","text":"In\u00a0[4]: Copied! <pre>print(x)\n</pre> print(x) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 print(x)\n\nNameError: name 'x' is not defined</pre> In\u00a0[2]: Copied! <pre>x = 10\ntry:\n    print(x)\n    print(10/0)\nexcept NameError as e:\n    print(f'ERROR : {e}')\nexcept ZeroDivisionError as e:\n    print(f'ERROR : {e}')\nelse:\n    print(\"Nothing went wrong\")\nfinally:\n    print(\"Everything is completed regardless of error or no error\")\n</pre> x = 10 try:     print(x)     print(10/0) except NameError as e:     print(f'ERROR : {e}') except ZeroDivisionError as e:     print(f'ERROR : {e}') else:     print(\"Nothing went wrong\") finally:     print(\"Everything is completed regardless of error or no error\") <pre>10\nERROR : division by zero\nEverything is completed regardless of error or no error\n</pre> In\u00a0[9]: Copied! <pre>x = 10\ntry:\n    print(x)\n    print(10/0)\nexcept (NameError, ZeroDivisionError) as e:\n    print(e)\nelse:\n    print(\"Nothing went wrong\")\nfinally:\n    print(\"Everything is completed regardless of error or no error\")\n</pre> x = 10 try:     print(x)     print(10/0) except (NameError, ZeroDivisionError) as e:     print(e) else:     print(\"Nothing went wrong\") finally:     print(\"Everything is completed regardless of error or no error\") <pre>10\ndivision by zero\nEverything is completed regardless of error or no error\n</pre> In\u00a0[\u00a0]: Copied! <pre>try:\n    print(x) # This will cause an error since x is not defined\nexcept:\n    print(\"Something went wrong\")\nelse:\n    print(\"Nothing went wrong\")\nfinally:\n    print(\"Everything is completed regardless of error or no error\")\n</pre> try:     print(x) # This will cause an error since x is not defined except:     print(\"Something went wrong\") else:     print(\"Nothing went wrong\") finally:     print(\"Everything is completed regardless of error or no error\") <pre>Something went wrong\nEverything is completed regardless of error or no error\n</pre> In\u00a0[2]: Copied! <pre>try:\n  print(x)\nexcept:\n  print(\"Variable x is not defined\")\n</pre> try:   print(x) except:   print(\"Variable x is not defined\") <pre>Variable x is not defined\n</pre> In\u00a0[\u00a0]: Copied! <pre>try:\n  print(x)\nexcept NameError as e:\n  print(e)\n</pre> try:   print(x) except NameError as e:   print(e) <pre>name 'x' is not defined\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[8]: Copied! <pre>def divide(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print(\"Error: Cannot divide by zero.\")\n    else:\n        print(f\"Result: {result}\")\n    finally:\n        print(\"Operation attempted.\")\n\ndivide(10, 2)\n</pre> def divide(a, b):     try:         result = a / b     except ZeroDivisionError:         print(\"Error: Cannot divide by zero.\")     else:         print(f\"Result: {result}\")     finally:         print(\"Operation attempted.\")  divide(10, 2) <pre>Result: 5.0\nOperation attempted.\n</pre> In\u00a0[9]: Copied! <pre>divide(10, 0)\n</pre> divide(10, 0) <pre>Error: Cannot divide by zero.\nOperation attempted.\n</pre> In\u00a0[10]: Copied! <pre>def square_number(x):\n    try:\n        return int(x) ** 2\n    except ValueError:\n        print(\"Please enter a valid integer.\")\n</pre> def square_number(x):     try:         return int(x) ** 2     except ValueError:         print(\"Please enter a valid integer.\") In\u00a0[\u00a0]: Copied! <pre>square_number(2) # output: 4\n</pre> square_number(2) # output: 4 Out[\u00a0]: <pre>4</pre> In\u00a0[\u00a0]: Copied! <pre>square_number('hello') # output : Please enter a valid integer.\n</pre> square_number('hello') # output : Please enter a valid integer. <pre>Please enter a valid integer.\n</pre> In\u00a0[13]: Copied! <pre>my_list = [5, 2, 3, 7]\nmy_list[10]\n</pre> my_list = [5, 2, 3, 7] my_list[10] <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[13], line 2\n      1 my_list = [5, 2, 3, 7]\n----&gt; 2 my_list[10]\n\nIndexError: list index out of range</pre> In\u00a0[16]: Copied! <pre>try:\n    my_list[10]\nexcept IndexError as e:\n    print(f'Error :', e)\n</pre> try:     my_list[10] except IndexError as e:     print(f'Error :', e) <pre>Error : list index out of range\n</pre> In\u00a0[21]: Copied! <pre>class NegativeNumberError(Exception):\n    \"\"\"Exception raised when a negative number is provided.\"\"\"\n    pass\n\n\ndef square_root(x):\n    if x &lt; 0:\n        raise NegativeNumberError(\"Cannot take square root of a negative number.\")\n    return x ** 0.5\n\ntry:\n    result = square_root(-9)\nexcept NegativeNumberError as e:\n    print(f\"Custom Error: {e}\")\n</pre> class NegativeNumberError(Exception):     \"\"\"Exception raised when a negative number is provided.\"\"\"     pass   def square_root(x):     if x &lt; 0:         raise NegativeNumberError(\"Cannot take square root of a negative number.\")     return x ** 0.5  try:     result = square_root(-9) except NegativeNumberError as e:     print(f\"Custom Error: {e}\") <pre>Custom Error: Cannot take square root of a negative number.\n</pre> In\u00a0[\u00a0]: Copied! <pre>class InvalidAgeError(Exception):\n    pass \n\ntry:\n    age = int(input(\"Enter your age : \"))\n    if age &lt; 0 or age &gt; 120:\n        raise InvalidAgeError('Age should be between 0 and 120')\n    \nexcept ValueError:\n    print('ERROR : Enter a valid number')\n\nexcept InvalidAgeError as e:\n    print(f'ERROR : {e}')\n    \nelse:\n    print(f'Your age is {age}')\n</pre> class InvalidAgeError(Exception):     pass   try:     age = int(input(\"Enter your age : \"))     if age &lt; 0 or age &gt; 120:         raise InvalidAgeError('Age should be between 0 and 120')      except ValueError:     print('ERROR : Enter a valid number')  except InvalidAgeError as e:     print(f'ERROR : {e}')      else:     print(f'Your age is {age}') <pre>Your age is 20\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/#error-handling","title":"Error Handling\u00b6","text":"Exception Name Description Example Scenario <code>ZeroDivisionError</code> Raised when a number is divided by zero. <code>10 / 0</code> <code>TypeError</code> Raised when an operation is applied to an object of inappropriate type. <code>'2' + 2</code> <code>ValueError</code> Raised when a function receives an argument of the right type but bad value. <code>int('abc')</code> <code>IndexError</code> Raised when trying to access an index that is out of range. <code>my_list[10]</code> where <code>len(my_list) = 5</code> <code>KeyError</code> Raised when a dictionary key is not found. <code>my_dict['missing_key']</code> <code>AttributeError</code> Raised when an invalid attribute reference is made. <code>'hello'.fake_method()</code> <code>ImportError</code> Raised when an import fails. <code>import non_existent_module</code> <code>ModuleNotFoundError</code> Raised when a module could not be found. <code>import no_module</code> <code>NameError</code> Raised when a local or global name is not found. <code>print(undeclared_variable)</code> <code>FileNotFoundError</code> Raised when a file or directory is requested but doesn\u2019t exist. <code>open('nonexistent.txt')</code> <code>IOError</code> Raised when an I/O operation fails. Issues with reading/writing files <code>StopIteration</code> Raised when the <code>next()</code> method of an iterator has no more items. Using <code>next()</code> on an exhausted iterator <code>RuntimeError</code> Raised when an error doesn\u2019t fall into any other category. Infinite recursion or reentrant calls <code>AssertionError</code> Raised when an <code>assert</code> statement fails. <code>assert 2 + 2 == 5</code> <code>MemoryError</code> Raised when an operation runs out of memory. Creating a massive list with limited RAM"},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/#some-examples-of-error-handling","title":"Some Examples of Error Handling\u00b6","text":""},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/#custom-exception","title":"Custom Exception\u00b6","text":""},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/#exercise","title":"Exercise\u00b6","text":""},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/#1-age-validator-with-custom-exception","title":"1. Age Validator with Custom Exception\u00b6","text":"<p>Task: Write a program that asks the user to enter their age. The program should:</p> <ul> <li>Convert the input to an integer.</li> <li>Raise a custom exception called <code>InvalidAgeError</code> if the age is less than 0 or greater than 120.</li> <li>Handle <code>ValueError</code> if the input is not a valid number.</li> <li>Handle your custom <code>InvalidAgeError</code> to print a friendly message.</li> <li>If the age is valid, print <code>\"Your age is &lt;age&gt;\"</code>.</li> </ul>"},{"location":"chapter_9_error_handling_logging_and_debugging/error_handling/#2-calculator-with-exception-handling","title":"2. Calculator with Exception Handling\u00b6","text":"<p>Task: Create a simple calculator program that:</p> <ul> <li>Asks the user to enter two numbers.</li> <li>Asks the user to choose an operation: add (<code>+</code>), subtract (<code>-</code>), multiply (<code>*</code>), or divide (<code>/</code>).</li> <li>Performs the chosen operation.</li> <li>Handles the following exceptions:<ul> <li><code>ValueError</code> if the user enters invalid numbers.</li> <li><code>ZeroDivisionError</code> if dividing by zero.</li> </ul> </li> <li>Prints the result if the calculation is successful.</li> </ul>"},{"location":"chapter_9_error_handling_logging_and_debugging/logging/","title":"Logging","text":"Level Meaning <code>DEBUG</code> Detailed information (for debugging). <code>INFO</code> General info (e.g., program started). <code>WARNING</code> Something might be wrong. <code>ERROR</code> An error occurred, but the program continues. <code>CRITICAL</code> Serious error, program may not continue. In\u00a0[1]: Copied! <pre>import logging\n\n# Basic configuration\nlogging.basicConfig(level=logging.WARNING)\n\nlogging.debug(\"This is a debug message\")\nlogging.info(\"This is an info message\")\nlogging.warning(\"This is a warning message\")\nlogging.error(\"This is an error message\")\nlogging.critical(\"This is a critical message\")\n</pre> import logging  # Basic configuration logging.basicConfig(level=logging.WARNING)  logging.debug(\"This is a debug message\") logging.info(\"This is an info message\") logging.warning(\"This is a warning message\") logging.error(\"This is an error message\") logging.critical(\"This is a critical message\") <pre>WARNING:root:This is a warning message\nERROR:root:This is an error message\nCRITICAL:root:This is a critical message\n</pre> In\u00a0[3]: Copied! <pre>import logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nlogger.debug('This is a debug message')\nlogger.info('This is an info message')\nlogger.warning('This is a warning message')\nlogger.error('This is an error message')\nlogger.critical('This is a critical message')\n</pre> import logging logging.basicConfig(level=logging.INFO) logger = logging.getLogger(__name__)  logger.debug('This is a debug message') logger.info('This is an info message') logger.warning('This is a warning message') logger.error('This is an error message') logger.critical('This is a critical message') <pre>INFO:__main__:This is an info message\nWARNING:__main__:This is a warning message\nERROR:__main__:This is an error message\nCRITICAL:__main__:This is a critical message\n</pre> In\u00a0[1]: Copied! <pre>import logging\n\nlogging.basicConfig(\n    filename='app.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\nlogging.info(\"App started\")\n</pre> import logging  logging.basicConfig(     filename='app.log',     level=logging.INFO,     format='%(asctime)s - %(levelname)s - %(message)s' )  logging.info(\"App started\") In\u00a0[\u00a0]: Copied! <pre>logging.debug(\"This is a DEBUG log\")\nlogging.critical('This is a critical error')\n</pre> logging.debug(\"This is a DEBUG log\") logging.critical('This is a critical error') In\u00a0[4]: Copied! <pre>def add(a, b):\n    logging.info(\"adding two numbers\")\n    return a + b\n</pre> def add(a, b):     logging.info(\"adding two numbers\")     return a + b In\u00a0[5]: Copied! <pre>add(10, 2)\n</pre> add(10, 2) Out[5]: <pre>12</pre> In\u00a0[1]: Copied! <pre>import logging\n\nlogging.basicConfig(filename = 'divide_app.log',level=logging.INFO, format='%(levelname)s: %(message)s')\n\ndef divide(a, b):\n    try:\n        logging.info(f\"Trying to divide {a} by {b}\")\n        return a / b\n    except ZeroDivisionError as e:\n        logging.error(\"Division by zero error!\")\n        return None\n\nresult = divide(10, 0)\n</pre> import logging  logging.basicConfig(filename = 'divide_app.log',level=logging.INFO, format='%(levelname)s: %(message)s')  def divide(a, b):     try:         logging.info(f\"Trying to divide {a} by {b}\")         return a / b     except ZeroDivisionError as e:         logging.error(\"Division by zero error!\")         return None  result = divide(10, 0) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#logging","title":"Logging\u00b6","text":"<ul> <li>Logging in Python is a way to track events that occur when your program is running.</li> </ul>"},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#formatting-the-log-messages","title":"Formatting the log messages\u00b6","text":"<p>%(asctime)s: The time the message was logged.</p> <p>%(name)s: The name of the logger.</p> <p>%(levelname)s: The log level.</p> <p>%(message)s: The log message itself.</p> <p>%(filename)s: The filename of the module that the logger is created in.</p> <p>%(lineno)d: The line number of the module that the logger is created in.</p> <p>%(funcName)s: The name of the function that the logger is created in.</p>"},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#basic-example-of-logging","title":"Basic Example of logging\u00b6","text":""},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#exercise","title":"Exercise:\u00b6","text":""},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#1-logging-in-a-temperature-converter-app","title":"1. Logging in a Temperature Converter App\u00b6","text":"<p>Create a Python program that:</p> <ol> <li>Converts Celsius to Fahrenheit.</li> <li>Uses logging to:<ul> <li>Record when a conversion is attempted.</li> <li>Warn if a suspiciously low or high temperature is entered.</li> <li>Log an error if a non-numeric input is entered.</li> </ul> </li> </ol> <p>Requirements:</p> <ul> <li>Use <code>logging.info()</code> to log normal operations.</li> <li>Use <code>logging.warning()</code> for temperature &lt; -100\u00b0C or &gt; 100\u00b0C.</li> <li>Use <code>logging.error()</code> for invalid inputs.</li> </ul>"},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#2-engine-diagnostic","title":"2. Engine Diagnostic\u00b6","text":""},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#scenario","title":"Scenario\u00b6","text":"<p>You are writing a simple Python program that simulates checking the status of an engine in a vehicle. The engine has several parameters to monitor, such as temperature, oil level, and RPM (revolutions per minute). Your task is to log different messages based on these parameters.</p>"},{"location":"chapter_9_error_handling_logging_and_debugging/logging/#task","title":"Task\u00b6","text":"<ol> <li><p>Create a Python script that:</p> <ul> <li>Checks the engine temperature.</li> <li>Checks the oil level.</li> <li>Checks the RPM.</li> </ul> </li> <li><p>Log messages with different severity levels depending on the condition:</p> <ul> <li>If the engine temperature is above 100\u00b0C, log a WARNING.</li> <li>If the oil level is below 20%, log an ERROR.</li> <li>If the RPM is above 5000, log a CRITICAL message.</li> <li>Otherwise, log an INFO message indicating the engine is running normally.</li> </ul> </li> <li><p>Use the built-in <code>logging</code> module and set the logging level to <code>INFO</code> so all messages of level INFO and above are shown.</p> </li> </ol>"},{"location":"project/Python_Projects/","title":"10 Simple Python Projects for Beginners","text":""},{"location":"project/Python_Projects/#project-1-contact-book","title":"Project 1: Contact Book","text":"<p>Create a menu-driven program to manage a contact book that stores names and phone numbers in a dictionary. Implement functions to add a contact, remove a contact, display all contacts, and search for a contact by name. Include error handling for invalid phone numbers (e.g., non-digits) and save contacts to a file for persistence. Show the results in a Streamlit app where users can input a name and phone number, select actions (add, remove, search, display), and view the output.</p> <p>Python Code:</p> <pre><code># contact_book.py\ndef add_contact(contacts, name, phone):\n    try:\n        if not phone.isdigit():\n            raise ValueError(\"Phone number must be digits\")\n        contacts[name] = phone\n        save_contacts(contacts)\n        return f\"Added {name}\"\n    except ValueError as e:\n        return str(e)\n\ndef remove_contact(contacts, name):\n    try:\n        return contacts.pop(name, f\"{name} not found\")\n    except KeyError:\n        return f\"{name} not found\"\n\ndef display_contacts(contacts):\n    return \"\\n\".join([f\"{name}: {phone}\" for name, phone in contacts.items()]) if contacts else \"No contacts\"\n\ndef search_contact(contacts, name):\n    return contacts.get(name, f\"{name} not found\")\n\ndef save_contacts(contacts):\n    with open(\"contacts.txt\", \"w\") as f:\n        for name, phone in contacts.items():\n            f.write(f\"{name},{phone}\\n\")\n\ndef load_contacts():\n    contacts = {}\n    try:\n        with open(\"contacts.txt\", \"r\") as f:\n            for line in f:\n                name, phone = line.strip().split(\",\")\n                contacts[name] = phone\n    except FileNotFoundError:\n        pass\n    return contacts\n\nif __name__ == \"__main__\":\n    contacts = load_contacts()\n    print(add_contact(contacts, \"Alice\", \"1234567890\"))\n    print(display_contacts(contacts))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for name and phone, <code>st.selectbox</code> for actions (add, remove, search, display), and <code>st.write</code> to show results. Save contacts to a file for persistence.</p>"},{"location":"project/Python_Projects/#project-2-to-do-list-manager","title":"Project 2: To-Do List Manager","text":"<p>Create a program to manage a to-do list using a list of dictionaries, where each task has a description and a completion status. Implement functions to add a task, remove a task by index, mark a task as complete, and display all tasks. Save tasks to a file for persistence and handle errors for invalid indices. Show the results in a Streamlit app where users can input tasks, select tasks to mark complete or remove, and view the task list. Python Code:</p> <pre><code># todo_list.py\ndef add_task(tasks, task):\n    tasks.append({\"task\": task, \"completed\": False})\n    save_tasks(tasks)\n    return f\"Added {task}\"\n\ndef remove_task(tasks, index):\n    try:\n        task = tasks.pop(index)\n        save_tasks(tasks)\n        return f\"Removed {task['task']}\"\n    except IndexError:\n        return \"Invalid index\"\n\ndef complete_task(tasks, index):\n    try:\n        tasks[index][\"completed\"] = True\n        save_tasks(tasks)\n        return f\"Completed {tasks[index]['task']}\"\n    except IndexError:\n        return \"Invalid index\"\n\ndef display_tasks(tasks):\n    return \"\\n\".join([f\"{i}: {t['task']} {'(Done)' if t['completed'] else ''}\" for i, t in enumerate(tasks)]) if tasks else \"No tasks\"\n\ndef save_tasks(tasks):\n    with open(\"tasks.txt\", \"w\") as f:\n        for t in tasks:\n            f.write(f\"{t['task']},{t['completed']}\\n\")\n\ndef load_tasks():\n    tasks = []\n    try:\n        with open(\"tasks.txt\", \"r\") as f:\n            for line in f:\n                task, completed = line.strip().split(\",\")\n                tasks.append({\"task\": task, \"completed\": completed == \"True\"})\n    except FileNotFoundError:\n        pass\n    return tasks\n\nif __name__ == \"__main__\":\n    tasks = load_tasks()\n    print(add_task(tasks, \"Buy groceries\"))\n    print(display_tasks(tasks))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for task input, <code>st.number_input</code> for task index, <code>st.button</code> for actions (add, remove, complete, display), and <code>st.write</code> to show the task list.</p>"},{"location":"project/Python_Projects/#project-3-simple-calculator","title":"Project 3: Simple Calculator","text":"<p>Create a calculator program that performs basic operations (add, subtract, multiply, divide) using separate functions. Include error handling for division by zero and invalid operations. Show the results in a Streamlit app where users can input two numbers, select an operation, and view the result. Python Code:</p> <pre><code># calculator.py\ndef add(a, b): return a + b\ndef subtract(a, b): return a - b\ndef multiply(a, b): return a * b\ndef divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Cannot divide by zero\"\n\ndef calculate(operation, a, b):\n    operations = {\"add\": add, \"subtract\": subtract, \"multiply\": multiply, \"divide\": divide}\n    return operations.get(operation, lambda x, y: \"Invalid operation\")(a, b)\n\nif __name__ == \"__main__\":\n    print(calculate(\"add\", 5, 3))\n    print(calculate(\"divide\", 10, 0))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.number_input</code> for two numbers, <code>st.selectbox</code> for operation (add, subtract, multiply, divide), <code>st.button</code> to calculate, and <code>st.write</code> to display the result.</p>"},{"location":"project/Python_Projects/#project-4-number-guessing-game","title":"Project 4: Number Guessing Game","text":"<p>Create a number guessing game where the program generates a random number between 1 and 100, and the user guesses it. Provide feedback (too high, too low, or correct) and track the number of attempts. Handle invalid inputs (e.g., non-numeric guesses). Show the results in a Streamlit app where users can input guesses and see feedback and attempt count. Python Code:</p> <pre><code># number_guessing.py\nimport random\n\ndef guess_game(guess, number, attempts):\n    try:\n        guess = int(guess)\n        attempts += 1\n        if guess &lt; number:\n            return \"Too low\", attempts\n        elif guess &gt; number:\n            return \"Too high\", attempts\n        else:\n            return f\"Correct! Took {attempts} attempts\", attempts\n    except ValueError:\n        return \"Enter a valid number\", attempts\n\nif __name__ == \"__main__\":\n    number = random.randint(1, 100)\n    attempts = 0\n    guess = input(\"Guess a number (1-100): \")\n    result, attempts = guess_game(guess, number, attempts)\n    print(result)\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.number_input</code> for guesses, <code>st.button</code> to submit guesses, and <code>st.write</code> to show feedback and attempt count. Store the random number and attempts in session state.</p>"},{"location":"project/Python_Projects/#project-5-student-grade-calculator","title":"Project 5: Student Grade Calculator","text":"<p>Create a program to calculate student grades based on numeric scores, assigning letter grades (A: 90\u2013100, B: 80\u201389, C: 70\u201379, D: 60\u201369, F: &lt;60). Store students and scores in a dictionary and use list comprehension to process grades. Show the results in a Streamlit app where users can input student names and scores, and view the grade list. Python Code:</p> <pre><code># grade_calculator.py\ndef calculate_grade(score):\n    if score &gt;= 90: return \"A\"\n    elif score &gt;= 80: return \"B\"\n    elif score &gt;= 70: return \"C\"\n    elif score &gt;= 60: return \"D\"\n    else: return \"F\"\n\ndef process_grades(students):\n    return {name: calculate_grade(score) for name, score in students.items()}\n\nif __name__ == \"__main__\":\n    students = {\"Alice\": 85, \"Bob\": 92, \"Charlie\": 78}\n    print(process_grades(students))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for student names, <code>st.number_input</code> for scores, <code>st.button</code> to add students and display grades, and <code>st.write</code> to show the grade list.</p>"},{"location":"project/Python_Projects/#project-6-word-counter","title":"Project 6: Word Counter","text":"<p>Create a program to count the frequency of words in a text string, ignoring punctuation and case. Use string methods to clean the text and a dictionary to store word counts. Show the results in a Streamlit app where users can input text and view the word frequency dictionary. Python Code:</p> <pre><code># word_counter.py\nimport string\n\ndef count_words(text):\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation)).lower()\n    words = text.split()\n    return {word: words.count(word) for word in set(words)}\n\nif __name__ == \"__main__\":\n    print(count_words(\"Hello world! Hello Python.\"))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_area</code> for text input, <code>st.button</code> to count words, and <code>st.write</code> to display the word frequency dictionary.</p>"},{"location":"project/Python_Projects/#project-7-simple-bank-account","title":"Project 7: Simple Bank Account","text":"<p>Create a bank account class with methods for deposit, withdrawal, and balance checking. Use OOP principles and include error handling for negative amounts and insufficient funds. Show the results in a Streamlit app where users can input amounts for deposit or withdrawal and view the balance. Python Code:</p> <pre><code># bank_account.py\nclass BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n\n    def deposit(self, amount):\n        try:\n            if amount &lt;= 0:\n                raise ValueError(\"Amount must be positive\")\n            self.balance += amount\n            return f\"Deposited {amount}, new balance: {self.balance}\"\n        except ValueError as e:\n            return str(e)\n\n    def withdraw(self, amount):\n        try:\n            if amount &lt;= 0:\n                raise ValueError(\"Amount must be positive\")\n            if amount &gt; self.balance:\n                raise ValueError(\"Insufficient funds\")\n            self.balance -= amount\n            return f\"Withdrew {amount}, new balance: {self.balance}\"\n        except ValueError as e:\n            return str(e)\n\n    def get_balance(self):\n        return f\"Balance for {self.owner}: {self.balance}\"\n\nif __name__ == \"__main__\":\n    account = BankAccount(\"Alice\", 100)\n    print(account.deposit(50))\n    print(account.withdraw(30))\n    print(account.get_balance())\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.number_input</code> for amount, <code>st.button</code> for deposit, withdraw, and check balance actions, and <code>st.write</code> to display the results.</p>"},{"location":"project/Python_Projects/#project-8-palindrome-checker","title":"Project 8: Palindrome Checker","text":"<p>Create a function to check if a string is a palindrome, ignoring case and punctuation. Use string methods and a lambda function for text cleaning. Show the results in a Streamlit app where users can input a string and see if it\u2019s a palindrome. Python Code:</p> <pre><code># palindrome.py\ndef is_palindrome(s):\n    clean = lambda x: \"\".join(c.lower() for c in x if c.isalnum())\n    s = clean(s)\n    return s == s[::-1]\n\nif __name__ == \"__main__\":\n    print(is_palindrome(\"A man, a plan, a canal: Panama\"))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for the string, <code>st.button</code> to check, and <code>st.write</code> to display whether the input is a palindrome.</p>"},{"location":"project/Python_Projects/#project-9-expense-tracker","title":"Project 9: Expense Tracker","text":"<p>Create a program to track expenses by category, storing amounts in a dictionary. Implement functions to add expenses and display all expenses, with file I/O for persistence and error handling for negative amounts. Show the results in a Streamlit app where users can input a category and amount, and view the expense summary. Python Code:</p> <pre><code># expense_tracker.py\ndef add_expense(expenses, category, amount):\n    try:\n        if amount &lt;= 0:\n            raise ValueError(\"Amount must be positive\")\n        expenses[category] = expenses.get(category, 0) + amount\n        save_expenses(expenses)\n        return f\"Added {amount} to {category}\"\n    except ValueError as e:\n        return str(e)\n\ndef display_expenses(expenses):\n    return \"\\n\".join([f\"{cat}: {amt}\" for cat, amt in expenses.items()]) if expenses else \"No expenses\"\n\ndef save_expenses(expenses):\n    with open(\"expenses.txt\", \"w\") as f:\n        for cat, amt in expenses.items():\n            f.write(f\"{cat},{amt}\\n\")\n\ndef load_expenses():\n    expenses = {}\n    try:\n        with open(\"expenses.txt\", \"r\") as f:\n            for line in f:\n                cat, amt = line.strip().split(\",\")\n                expenses[cat] = float(amt)\n    except FileNotFoundError:\n        pass\n    return expenses\n\nif __name__ == \"__main__\":\n    expenses = load_expenses()\n    print(add_expense(expenses, \"Food\", 50))\n    print(display_expenses(expenses))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for category, <code>st.number_input</code> for amount, <code>st.button</code> for add and display actions, and <code>st.write</code> to show the expense summary.</p>"},{"location":"project/Python_Projects/#project-10-simple-data-visualizer","title":"Project 10: Simple Data Visualizer","text":"<p>Create a program to visualize a small dataset of student scores using Matplotlib or Seaborn. Use Pandas to store the data as a DataFrame and NumPy for any calculations. Generate a bar plot and save it as an image. Show the results in a Streamlit app where users can input student names and scores, and view the data and plot. Python Code:</p> <pre><code># data_visualizer.py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef visualize_data(data):\n    df = pd.DataFrame(data)\n    plt.figure(figsize=(8, 6))\n    sns.barplot(x=\"Score\", y=\"Student\"; data=df)\n    plt.savefig(\"plot.png\")\n    plt.close()\n    return \"Plot saved as plot.png\"\n\nif __name__ == \"__main__\":\n    data = {\"Student\": [\"Alice\", \"Bob\", \"Charlie\"], \"Score\": [85, 92, 78]}\n    print(visualize_data(data))\n</code></pre> <p>Streamlit Note: Create a Streamlit app using <code>st.text_input</code> for student names, <code>st.number_input</code> for scores, <code>st.button</code> to add data and generate the plot, <code>st.write</code> to show the data, and <code>st.image</code> to display the saved plot.</p>"}]}